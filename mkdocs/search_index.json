{
    "docs": [
        {
            "location": "/", 
            "text": "HSR Notizen\n\n\nSpring Semester '17\n\n\n\n\nDatenbanksysteme 2\n\n\nEngineering-Projekt\n\n\nInformationssicherheit 3\n\n\nWirtschaftsinformatik 1 - IT im Business\n\n\nParallele Programmierung\n\n\nPhysik Anwendungen f\u00fcr Informatik\n\n\nSoftware-Engineering 2\n\n\nVerteilte SW-Systeme\n\n\nVolkswirtschaft und Technikgeschichte\n\n\n\n\nLinks\n\n\n\n\nSlack: \nhttps://hsr-students.slack.com\n\n\nMathJax Syntax\n\n\nMkDocs User-Guide\n\n\nMarkdown Cheatsheet", 
            "title": "Home"
        }, 
        {
            "location": "/#hsr-notizen", 
            "text": "", 
            "title": "HSR Notizen"
        }, 
        {
            "location": "/#spring-semester-17", 
            "text": "Datenbanksysteme 2  Engineering-Projekt  Informationssicherheit 3  Wirtschaftsinformatik 1 - IT im Business  Parallele Programmierung  Physik Anwendungen f\u00fcr Informatik  Software-Engineering 2  Verteilte SW-Systeme  Volkswirtschaft und Technikgeschichte", 
            "title": "Spring Semester '17"
        }, 
        {
            "location": "/#links", 
            "text": "Slack:  https://hsr-students.slack.com  MathJax Syntax  MkDocs User-Guide  Markdown Cheatsheet", 
            "title": "Links"
        }, 
        {
            "location": "/playground/", 
            "text": "Markdown Playground\n\n\nDies ist etwas normaler Text mit etwas \nkursiver\n schrift und etwas \nbold\n schrift\n\n\n\n\nDies ist Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text\nzweite Zeile\n\n\n\n\n\n  \npublic\n \nclass\n \nTestClass\n()\n \n{\n\n    \nint\n \nvar\n \n=\n \n1\n;\n\n    \npublic\n \nmethod\n()\n \n{\n\n      \nreturn\n \nvar\n;\n\n    \n}\n\n  \n}\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n2\n\n\n3\n\n\n\n\n\n\n\n\n\n\n1\n\n\netwas\n\n\nanderes\n\n\n\n\n\n\n2\n\n\nals\n\n\nhier\n\n\n\n\n\n\n\n\n\n\nNotiz\n\n\nTest Notiz mit etwas Text drin\n\n\n\n\n\n\nDanger\n\n\nGefahr!\n\n\n\n\n\n\nWarning\n\n\nWarnung!\n\n\n\n\nInline Math: \n x_i^2 * \\frac{(n^2 * n) - 1}{\\Omega} \n\n\n\n\nDisplay Math:\n\n\\sum_{i=0}^n i^2\n\n\n\n\nGruppen mit \n{}\n: \n{10}^5\n\n\n\n\n\n\nA \\rightarrow B \n\n\n\\lim_{x\\to \\infty} \\sin x", 
            "title": "Playground"
        }, 
        {
            "location": "/playground/#markdown-playground", 
            "text": "Dies ist etwas normaler Text mit etwas  kursiver  schrift und etwas  bold  schrift   Dies ist Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text\nzweite Zeile     public   class   TestClass ()   { \n     int   var   =   1 ; \n     public   method ()   { \n       return   var ; \n     } \n   }      1  2  3      1  etwas  anderes    2  als  hier      Notiz  Test Notiz mit etwas Text drin    Danger  Gefahr!    Warning  Warnung!   Inline Math:   x_i^2 * \\frac{(n^2 * n) - 1}{\\Omega}    Display Math: \\sum_{i=0}^n i^2   Gruppen mit  {} :  {10}^5    A \\rightarrow B   \\lim_{x\\to \\infty} \\sin x", 
            "title": "Markdown Playground"
        }, 
        {
            "location": "/Dbs2/0_Index/", 
            "text": "Datenbanksysteme 2\n\n\n\n\nExam Notes", 
            "title": "0 Index"
        }, 
        {
            "location": "/Dbs2/0_Index/#datenbanksysteme-2", 
            "text": "Exam Notes", 
            "title": "Datenbanksysteme 2"
        }, 
        {
            "location": "/Dbs2/1_Exam/", 
            "text": "Some exam notes...", 
            "title": "1 Exam"
        }, 
        {
            "location": "/Dbs2/2_OR-Mapping/", 
            "text": "OR Mapping\n\n\nZiel: Gap zwischen Objektmodell der Applikation und (meist) relationales Modell der Datenbanken \u00fcberwinden\n\n\nJava Persistence API (JPA)\n\n\n\n\nJPA ist ein Layer zwischen JDBC und dem Programm\n\n\nJPA ist nur eine Definition, implementiert von Providern\n\n\nHier wird die EclipseLink-Implementierung verwendet (Hibernate w\u00e4re ein anderer Provider)\n\n\n\n\nEntities\n\n\n\n\nEntities sind POJO's mit ID-Feld f\u00fcr PK mit default-Konstruktor\n\n\nD\u00fcrfen nicht final sein (wegen z.B. lazy-loading)\n\n\nAbbildung in DB \u00fcber Annotations oder sepparates XML-File\n\n\nAnnotation \n@Entity\n f\u00fcr Klasse, \n@Id\n f\u00fcr PK-Feld\n\n\n\n\nBeispiel\n\n\n@Entity\n\n\npublic\n \nclass\n \nBankCustomer\n \n{\n\n    \n@Id\n\n    \nprivate\n \nlong\n \nid\n;\n\n\n    \npublic\n \nlong\n \ngetId\n()\n \n{\n\n        \nreturn\n \nid\n;\n\n    \n}\n\n    \nprivate\n \nString\n \nname\n;\n\n    \npublic\n \nString\n \ngetName\n()\n \n{\n\n        \nreturn\n \nname\n;\n\n    \n}\n\n    \npublic\n \nvoid\n \nsetName\n(\nString\n \nname\n)\n \n{\n\n        \nthis\n.\nname\n \n=\n \nname\n;\n\n    \n}\n\n\n}\n\n\n\n\n\n\npersistence.xml\n\n\npersistence\n \nxmlns:xsi=\nhttp://www.w3.org/2001/XMLSchema-instance\n\n    \nxsi:schemaLocation=\nhttp://java.sun.com/xml/ns/persistence\n\n\n        http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd\n\n    \nversion=\n2.0\n \nxmlns=\nhttp://java.sun.com/xml/ns/persistence\n\n\npersistence-unit\n \nname=\nBank\n \ntransaction-type=\nRESOURCE_LOCAL\n\n    \nprovider\norg.eclipse.persistence.jpa.PersistenceProvider\n/provider\n\n    \nexclude-unlisted-classes\nfalse\n/exclude-unlisted-classes\n\n        \nproperties\n\n            \nproperty\n \nname=\njavax.persistence.jdbc.driver\n\n                \nvalue=\norg.postgresql.Driver\n/\n\n            \nproperty\n \nname=\njavax.persistence.jdbc.url\n\n                \nvalue=\njdbc:postgresql:jpatest\n/\n\n            \nproperty\n \nname=\njavax.persistence.jdbc.user\n \nvalue=\ntest\n/\n\n            \nproperty\n \nname=\njavax.persistence.jdbc.password\n \nvalue=\ntest\n/\n\n            \nproperty\n \nname=\neclipselink.target-database\n \nvalue=\nPostgreSQL\n/\n\n        \n/properties\n\n    \n/persistence-unit\n\n\n/persistence\n\n\n\n\n\n\nEntities CRUD\n\n\n// SELECT\n\n\nEntityManagerFactory\n \nfactory\n \n=\n\n    \nPersistence\n.\ncreateEntityManagerFactory\n(\nBank\n);\n\n\nEntityManager\n \nem\n \n=\n \nfactory\n.\ncreateEntityManager\n();\n\n\nQuery\n \nquery\n \n=\n \nem\n.\ncreateQuery\n(\nSELECT a FROM BankAccount a\n);\n\n\nList\nBankAccount\n \nlist\n \n=\n \nquery\n.\ngetResultList\n();\n\n\nfor\n \n(\nBankAccount\n \naccount\n \n:\n \nlist\n)\n \n{\n\n    \nSystem\n.\nout\n.\nprintln\n(\naccount\n);\n\n\n}\n\n\nem\n.\nclose\n();\n \n// besser mit try-with-ressources\n\n\n\n// INSERT\n\n\nem\n.\ngetTransaction\n().\nbegin\n();\n\n\nBankCustomer\n \ncustomer\n \n=\n \nnew\n \nBankCustomer\n();\n\n\ncustomer\n.\nsetName\n(\nBill\n);\n\n\nem\n.\npersist\n(\ncustomer\n);\n \n// INSERT and SELECT, customer hat jetzt seine ID\n\n\nem\n.\ngetTransaction\n().\ncommit\n();\n\n\nem\n.\nclose\n();\n\n\n\n// UPDATE\n\n\nem\n.\ngetTransaction\n().\nbegin\n();\n\n\nBankAccount\n \naccount\n \n=\n \nem\n.\nfind\n(\nBankAccount\n.\nclass\n,\n \n1L\n);\n\n\naccount\n.\nincBalance\n(\n100\n);\n\n\nem\n.\ngetTransaction\n().\ncommit\n();\n\n\n\n// DELETE\n\n\n// nicht effizient, Java-Object wird erst durch GC aufger\u00e4umt\n\n\nem\n.\ngetTransaction\n().\nbegin\n();\n\n\nBankAccount\n \naccount\n \n=\n \nem\n.\nfind\n(\nBankAccount\n.\nclass\n,\n \n1L\n);\n\n\nem\n.\nremove\n(\naccount\n);\n\n\nem\n.\ngetTransaction\n().\ncommit\n();\n\n\n\n\n\n\nTable Mapping\n\n\n@Entity\n\n\n@Table\n(\nname\n \n=\n \naccount\n)\n\n\npublic\n \nclass\n \nBankAccount\n \n{\n\n    \n@Id\n\n    \n@Column\n(\nname\n \n=\n \naccountid\n)\n\n    \nprivate\n \nlong\n \nid\n;\n\n\n    \nprivate\n \ndouble\n \nbalance\n;\n \n// 1:1 Mapping\n\n\n    \n@Column\n(\nname\n \n=\n \ndescription\n)\n\n    \nprivate\n \nString\n \nexplanation\n;\n\n\n    \n@Column\n(\nname\n=\n\u201c\nssn\n\u201c\n,\n \nunique\n=\ntrue\n,\n \nnullable\n=\ntrue\n)\n\n    \nprivate\n \nlong\n \nssn\n;\n\n\n    \n@Column\n(\nname\n=\n\u201c\nl_name\n\u201c\n,\n \nlength\n=\n200\n)\n\n    \nprivate\n \nString\n \nlastName\n;\n\n\n    \n//Zusatzinfo, wird als TIMESTAMP abgelegt\n\n    \n@Temporal\n(\nTemporalType\n.\nTIMESTAMP\n)\n \n    \nprivate\n \nCalendar\n \ncreationDate\n;\n\n\n    \n@Transient\n \n// wird nicht gemapped\n\n    \nprivate\n \nString\n \ntempComments\n;\n\n    \n// getter und setter\n\n\n}\n\n\n\n\n\n\n\n\nWeitere Attribute: \nscale\n, \nprecision\n\n\n\n\nRelationen\n\n\n// 1:1 Mapping\n\n\n@Entity\n\n\n@Table\n(\nname\n \n=\n \nbankcustomer\n)\n\n\npublic\n \nclass\n \nBankCustomer\n \n{\n\n    \n@OneToOne\n(\noptional\n \n=\n \ntrue\n)\n\n    \n@JoinColumn\n(\nname\n \n=\n \naddressref\n)\n\n    \nprivate\n \nAddress\n \naddress\n;\n\n    \n// ...\n\n\n}\n\n\n\n// Bidirectional 1:1 mapping, Datenbank bleibt gleich\n\n\n@Entity\n\n\npublic\n \nclass\n \nAddress\n \n{\n\n    \n@OneToOne\n(\nmappedBy\n \n=\n \naddress\n)\n\n    \nprivate\n \nBankCustomer\n \ncustomer\n;\n\n    \n// ...\n\n\n}\n\n\n\n// N:1 Mapping\n\n\nclass\n \nBankAccount\n \n{\n\n    \n@ManyToOne\n(\noptional\n \n=\n \nfalse\n)\n\n    \n@JoinColumn\n(\nname\n \n=\n \ncustomerref\n)\n\n    \nprivate\n \nBankCustomer\n \ncustomer\n;\n\n    \n//...\n\n\n}\n\n\n\n// Bidirectional N:1 \n\n\nclass\n \nBankCustomer\n \n{\n\n    \n@OneToMany\n(\nmappedBy\n \n=\n \ncustomer\n)\n\n    \nprivate\n \nCollection\nBankAccount\n \naccounts\n;\n \n// = ...\n\n    \n// ...\n\n\n}\n\n\n// N:M maping\n\n\nclass\n \nBankManager\n \n{\n\n    \n@ManyToMany\n\n    \n@JoinTable\n(\nname\n \n=\n \ncustomer_manager\n,\n\n        \njoinColumns\n \n=\n \n{\n@JoinColumn\n(\nname\n \n=\n \nmanagerref\n)},\n\n        \ninverseJoinColumns\n \n=\n \n{\n@JoinColumn\n(\nname\n \n=\n \ncustomerref\n)})\n\n    \nprivate\n \nCollection\nBankCustomer\n \ncustomers\n;\n \n// = ...\n\n\n}\n\n\n\n\n\n\n\n\nBei bidirektionalen Beziehungen m\u00fcssen beide Seiten manuell gesetzt werden (im Gegensatz zu z.B. EF)\n\n\nIm Beispiel muss beim Hinzuf\u00fcgen eines \nBankAccount\n dieser der Liste in der \nBankCustomer\n hinzugef\u00fcgt werden\n\n\n\n\n\n\nLazy-Loading ist per default aktiviert f\u00fcr 1:n und n:m\n\n\nBsp: Wenn \nBankCustomer\n geladen werden, wird die \nBankAccounts\n-Liste lazy mit \ncustomer.getAccounts()\n geladen\n\n\n\n\n\n\nEager-Loading standard bei 1:1 und n:1\n\n\nExplizit angeben mit z.B. \n@ManyToMany(fetch = FetchType.EAGER)\n\n\n\n\nPersistence-Context\n\n\n\n\nEin Objekt ist neu erstellt erstmal \nunmanaged\n\n\nWird es in die DB eingef\u00fcgt mit \npersist()\n, ist es \nmanaged\n und somit im Persistence-Context (Objekt hat eine Id)\n\n\nWird die Verbindung geschlossen (\nclose()\n) oder removed, sind die Objekte wieder \nunmanaged\n\n\nPersistence-Kontext verwaltet einen Cache - Bei mehrmaliger Abfrage der gleichen Objekte werden sie aus dem Cache geladen\n\n\nWichtig, sonst k\u00f6nnte es mehrere Java-Instanzen f\u00fcr ein DB-Objekt geben \n\n\nSo gibt es in einem Kontext f\u00fcr ein DB-Objekt genau eine Java Instanz  (Identity Map Pattern)\n\n\n\n\n\n\n\n\n\n\nGe\u00e4nderte Werte im Persistence-Kontext werden beim Transaction-Commit auf der DB gespeichert (Unit of Work Pattern)\n\n\n\n\nEntityManager\n \nem\n \n=\n \nemf\n.\ncreateEntityManager\n();\n\n\nBankCustomer\n \nc1\n \n=\n \nem\n.\nfind\n(\nBankCustomer\n.\nclass\n,\n \n1L\n);\n\n\nBankCustomer\n \nc2\n \n=\n \nem\n.\nfind\n(\nBankCustomer\n.\nclass\n,\n \n1L\n);\n\n\nassert\n(\nc1\n \n==\n \nc2\n);\n \n// gleicher PC\n\n\nEntityManager\n \nem1\n \n=\n \nemf\n.\ncreateEntityManager\n();\n\n\nc2\n \n=\n \nem1\n.\nfind\n(\nBankCustomer\n.\nclass\n,\n \n1L\n);\n\n\nassert\n(\nc1\n \n!=\n \nc2\n);\n \n// unterschiedlicher PC\n\n\n\n\n\n\nEntity Identit\u00e4t\n\n\n\n\nAnnotation \n@Id\n\n\n@GeneratedValue\n - generierte ID mit 4 M\u00f6glichkeiten\n\n\n\n\nTyp Identity\n\n\n@Id\n\n\n@GeneratedValue\n(\nstrategy\n \n=\n \nGenerationType\n.\nIDENTITY\n)\n\n\nprivate\n \nlong\n \naccountId\n;\n\n\n\n\n\n\n\n\nWird abgebildet in \nSERIAL\n\n\n\n\nTyp Sequence\n\n\nId\n\n\n@GeneratedValue\n(\nstrategy\n \n=\n \nGenerationType\n.\nSEQUENCE\n,\n\n    \ngenerator\n \n=\n \nBankCustGen\n)\n\n\n@SequenceGenerator\n(\nname\n \n=\n \nBankCustGen\n,\n\n    \nsequenceName\n \n=\n \nCustomerIdSeq\n,\n\n    \nallocationSize\n=\n1\n)\n\n\nprivate\n \nlong\n \ncustomerId\n;\n\n\n\n\n\n\n\n\nNote\n\n\ntodo\n\n\n\n\nTransitive Persistenz\n\n\n\n\nVon Persistente Objekte erreichbaren Objekte sollten auch persistent sein\n\n\n\n\nInkonsistente Bidirektionalit\u00e4t\n\n\n\n\nIn JPA werden bidirektionale Relationen nicht in beide Richtungen automatisch gesetzt\n\n\nMuss von Hand gemacht werden\n\n\n\n\nTransaktionen\n\n\nEntityManager\n \nem\n \n=\n \nfactory\n.\ncreateEntityManager\n();\n\n\nem\n.\ngetTransaction\n().\nbegin\n();\n\n\n// ...\n\n\n// do something... make changes\n\n\n// ...\n\n\nem\n.\ngetTransaction\n().\ncommit\n();\n \n// or rollback()\n\n\n\n\n\n\n\n\nIsolation Level ist per default Read-Commited\n\n\nNur Daten lesen, die eine andere Transaktion commited hat\n\n\n\n\n\n\n\n\nOptimistic Concurrency\n\n\n\n\nBeim Commit einer Transaktion wird nach Konflikten gepr\u00fcft\n\n\nWenn Konflikt entstand, wird ein Rollback gemacht\n\n\n\n\nVersions-Feld\n\n\n\n\nMit jedem Update Feld hochz\u00e4hlen\n\n\nBeim Schreiben pr\u00fcfen, ob das Feld gleich ist wie der Wert, der vorher gelesen wurde\n\n\nWenn Feld anders, hat jemand in der Zwischenzeit den Record ver\u00e4ndert -\n Rollback\n\n\n\n\nUPDATE\n \nUser\n \nSET\n \n...,\n \nversion\n \n=\n \nversion\n \n+\n \n1\n\n\nWHERE\n \nid\n \n=\n \n?\n \nAND\n \nversion\n \n=\n \nreadVersion\n\n\n\n\n\n\n\n\nJPA wirft bei Verletzung eine \nConcurrencyLockException\n\n\n\n\nEntity Locking\n\n\n\n\nem.lock()\n\n\nOPTIMISTIC_FORCE_INCREMENT: Beim lock direkt direkt das Versions-Feld erh\u00f6hen, damit andere keine Commits mehr darauf machen kann, der vorher gelesen hat\n\n\n\n\nDetached Entities\n\n\n\n\nOft m\u00f6chte man DB-Objekte \"detachen\" (Db-Context schliessen), ver\u00e4ndern, und dann wieder in die DB schreiben\n\n\nMit \nentityManger.merge(object)\n wird ein wieder in den Persistenz-Kontext geladen, dass wieder commited werden kann\n\n\n\n\nInheritance Mapping\n\n\nSingle Table Mapping (Table per Hierarchy)\n\n\n@Entity\n\n\n@Inheritance\n(\nstrategy\n \n=\n \nInheritanceType\n.\nSINGLE_TABLE\n)\n\n\n@DiscriminatorColumn\n(\nname\n \n=\n \ntype\n)\n\n\npublic\n \nabstract\n \nclass\n \nBankCustomer\n \n{\n\n    \n@Id\n \nprivate\n \nString\n \nname\n;\n\n\n}\n\n\n\n@Entity\n\n\n@DiscriminatorValue\n(\nRetail\n)\n\n\npublic\n \nclass\n \nRetailBankCustomer\n \nextends\n \nBankCustomer\n \n{\n\n    \nprivate\n \nint\n \nfees\n;\n\n\n}\n\n\n@Entity\n\n\n@DiscriminatorValue\n(\nPrivate\n)\n\n\npublic\n \nclass\n \nPrivateBankCustomer\n \nextends\n \nBankCustomer\n \n{\n\n    \nprivate\n \nString\n \neliteOffer\n;\n\n\n}\n\n\n\n\n\n\n\n\nDas Feld \"type\" ist hier diskriminator und wird in der DB verwendet, um die verschiedenen \nBankCustomer\n zu unterscheiden\n\n\n\n\nJoined Table Mapping\n\n\nTable per Class Mapping\n\n\nAbfragen mit JPQL\n\n\n\n\nSprache analog zu SQL...\n\n\n, aber operiert auf Entity Model, nicht DB-Model!\n\n\nEs k\u00f6nnen z.B. \"Navigation Attributes\" verwendet werden\n\n\n\"Prepared Statements\" mit Named Parameters\n\n\n\n\nQuery\n \nquery\n \n=\n \nem\n.\ncreateQuery\n(\n\n    \nSELECT c FROM BankCustomer c WHERE c.name LIKE :customerName\n\n\n);\n\n\nquery\n.\nsetParameter\n(\ncustomerName\n,\n \nname\n);\n\n\nquery\n.\nsetMaxResults\n(\n1000\n);\n\n\nList\nBankCustomer\n \nlist\n \n=\n \nquery\n.\ngetResultList\n();\n\n\n\n\n\n\nNamed Queries\n\n\nCriteria API", 
            "title": "2 OR Mapping"
        }, 
        {
            "location": "/Dbs2/2_OR-Mapping/#or-mapping", 
            "text": "Ziel: Gap zwischen Objektmodell der Applikation und (meist) relationales Modell der Datenbanken \u00fcberwinden", 
            "title": "OR Mapping"
        }, 
        {
            "location": "/Dbs2/2_OR-Mapping/#java-persistence-api-jpa", 
            "text": "JPA ist ein Layer zwischen JDBC und dem Programm  JPA ist nur eine Definition, implementiert von Providern  Hier wird die EclipseLink-Implementierung verwendet (Hibernate w\u00e4re ein anderer Provider)", 
            "title": "Java Persistence API (JPA)"
        }, 
        {
            "location": "/Dbs2/2_OR-Mapping/#entities", 
            "text": "Entities sind POJO's mit ID-Feld f\u00fcr PK mit default-Konstruktor  D\u00fcrfen nicht final sein (wegen z.B. lazy-loading)  Abbildung in DB \u00fcber Annotations oder sepparates XML-File  Annotation  @Entity  f\u00fcr Klasse,  @Id  f\u00fcr PK-Feld", 
            "title": "Entities"
        }, 
        {
            "location": "/Dbs2/2_OR-Mapping/#beispiel", 
            "text": "@Entity  public   class   BankCustomer   { \n     @Id \n     private   long   id ; \n\n     public   long   getId ()   { \n         return   id ; \n     } \n     private   String   name ; \n     public   String   getName ()   { \n         return   name ; \n     } \n     public   void   setName ( String   name )   { \n         this . name   =   name ; \n     }  }", 
            "title": "Beispiel"
        }, 
        {
            "location": "/Dbs2/2_OR-Mapping/#persistencexml", 
            "text": "persistence   xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance \n     xsi:schemaLocation= http://java.sun.com/xml/ns/persistence          http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd \n     version= 2.0   xmlns= http://java.sun.com/xml/ns/persistence  persistence-unit   name= Bank   transaction-type= RESOURCE_LOCAL \n     provider org.eclipse.persistence.jpa.PersistenceProvider /provider \n     exclude-unlisted-classes false /exclude-unlisted-classes \n         properties \n             property   name= javax.persistence.jdbc.driver \n                 value= org.postgresql.Driver / \n             property   name= javax.persistence.jdbc.url \n                 value= jdbc:postgresql:jpatest / \n             property   name= javax.persistence.jdbc.user   value= test / \n             property   name= javax.persistence.jdbc.password   value= test / \n             property   name= eclipselink.target-database   value= PostgreSQL / \n         /properties \n     /persistence-unit  /persistence", 
            "title": "persistence.xml"
        }, 
        {
            "location": "/Dbs2/2_OR-Mapping/#entities-crud", 
            "text": "// SELECT  EntityManagerFactory   factory   = \n     Persistence . createEntityManagerFactory ( Bank );  EntityManager   em   =   factory . createEntityManager ();  Query   query   =   em . createQuery ( SELECT a FROM BankAccount a );  List BankAccount   list   =   query . getResultList ();  for   ( BankAccount   account   :   list )   { \n     System . out . println ( account );  }  em . close ();   // besser mit try-with-ressources  // INSERT  em . getTransaction (). begin ();  BankCustomer   customer   =   new   BankCustomer ();  customer . setName ( Bill );  em . persist ( customer );   // INSERT and SELECT, customer hat jetzt seine ID  em . getTransaction (). commit ();  em . close ();  // UPDATE  em . getTransaction (). begin ();  BankAccount   account   =   em . find ( BankAccount . class ,   1L );  account . incBalance ( 100 );  em . getTransaction (). commit ();  // DELETE  // nicht effizient, Java-Object wird erst durch GC aufger\u00e4umt  em . getTransaction (). begin ();  BankAccount   account   =   em . find ( BankAccount . class ,   1L );  em . remove ( account );  em . getTransaction (). commit ();", 
            "title": "Entities CRUD"
        }, 
        {
            "location": "/Dbs2/2_OR-Mapping/#table-mapping", 
            "text": "@Entity  @Table ( name   =   account )  public   class   BankAccount   { \n     @Id \n     @Column ( name   =   accountid ) \n     private   long   id ; \n\n     private   double   balance ;   // 1:1 Mapping \n\n     @Column ( name   =   description ) \n     private   String   explanation ; \n\n     @Column ( name = \u201c ssn \u201c ,   unique = true ,   nullable = true ) \n     private   long   ssn ; \n\n     @Column ( name = \u201c l_name \u201c ,   length = 200 ) \n     private   String   lastName ; \n\n     //Zusatzinfo, wird als TIMESTAMP abgelegt \n     @Temporal ( TemporalType . TIMESTAMP )  \n     private   Calendar   creationDate ; \n\n     @Transient   // wird nicht gemapped \n     private   String   tempComments ; \n     // getter und setter  }    Weitere Attribute:  scale ,  precision", 
            "title": "Table Mapping"
        }, 
        {
            "location": "/Dbs2/2_OR-Mapping/#relationen", 
            "text": "// 1:1 Mapping  @Entity  @Table ( name   =   bankcustomer )  public   class   BankCustomer   { \n     @OneToOne ( optional   =   true ) \n     @JoinColumn ( name   =   addressref ) \n     private   Address   address ; \n     // ...  }  // Bidirectional 1:1 mapping, Datenbank bleibt gleich  @Entity  public   class   Address   { \n     @OneToOne ( mappedBy   =   address ) \n     private   BankCustomer   customer ; \n     // ...  }  // N:1 Mapping  class   BankAccount   { \n     @ManyToOne ( optional   =   false ) \n     @JoinColumn ( name   =   customerref ) \n     private   BankCustomer   customer ; \n     //...  }  // Bidirectional N:1   class   BankCustomer   { \n     @OneToMany ( mappedBy   =   customer ) \n     private   Collection BankAccount   accounts ;   // = ... \n     // ...  }  // N:M maping  class   BankManager   { \n     @ManyToMany \n     @JoinTable ( name   =   customer_manager , \n         joinColumns   =   { @JoinColumn ( name   =   managerref )}, \n         inverseJoinColumns   =   { @JoinColumn ( name   =   customerref )}) \n     private   Collection BankCustomer   customers ;   // = ...  }    Bei bidirektionalen Beziehungen m\u00fcssen beide Seiten manuell gesetzt werden (im Gegensatz zu z.B. EF)  Im Beispiel muss beim Hinzuf\u00fcgen eines  BankAccount  dieser der Liste in der  BankCustomer  hinzugef\u00fcgt werden    Lazy-Loading ist per default aktiviert f\u00fcr 1:n und n:m  Bsp: Wenn  BankCustomer  geladen werden, wird die  BankAccounts -Liste lazy mit  customer.getAccounts()  geladen    Eager-Loading standard bei 1:1 und n:1  Explizit angeben mit z.B.  @ManyToMany(fetch = FetchType.EAGER)", 
            "title": "Relationen"
        }, 
        {
            "location": "/Dbs2/2_OR-Mapping/#persistence-context", 
            "text": "Ein Objekt ist neu erstellt erstmal  unmanaged  Wird es in die DB eingef\u00fcgt mit  persist() , ist es  managed  und somit im Persistence-Context (Objekt hat eine Id)  Wird die Verbindung geschlossen ( close() ) oder removed, sind die Objekte wieder  unmanaged  Persistence-Kontext verwaltet einen Cache - Bei mehrmaliger Abfrage der gleichen Objekte werden sie aus dem Cache geladen  Wichtig, sonst k\u00f6nnte es mehrere Java-Instanzen f\u00fcr ein DB-Objekt geben   So gibt es in einem Kontext f\u00fcr ein DB-Objekt genau eine Java Instanz  (Identity Map Pattern)      Ge\u00e4nderte Werte im Persistence-Kontext werden beim Transaction-Commit auf der DB gespeichert (Unit of Work Pattern)   EntityManager   em   =   emf . createEntityManager ();  BankCustomer   c1   =   em . find ( BankCustomer . class ,   1L );  BankCustomer   c2   =   em . find ( BankCustomer . class ,   1L );  assert ( c1   ==   c2 );   // gleicher PC  EntityManager   em1   =   emf . createEntityManager ();  c2   =   em1 . find ( BankCustomer . class ,   1L );  assert ( c1   !=   c2 );   // unterschiedlicher PC", 
            "title": "Persistence-Context"
        }, 
        {
            "location": "/Dbs2/2_OR-Mapping/#entity-identitat", 
            "text": "Annotation  @Id  @GeneratedValue  - generierte ID mit 4 M\u00f6glichkeiten", 
            "title": "Entity Identit\u00e4t"
        }, 
        {
            "location": "/Dbs2/2_OR-Mapping/#typ-identity", 
            "text": "@Id  @GeneratedValue ( strategy   =   GenerationType . IDENTITY )  private   long   accountId ;    Wird abgebildet in  SERIAL", 
            "title": "Typ Identity"
        }, 
        {
            "location": "/Dbs2/2_OR-Mapping/#typ-sequence", 
            "text": "Id  @GeneratedValue ( strategy   =   GenerationType . SEQUENCE , \n     generator   =   BankCustGen )  @SequenceGenerator ( name   =   BankCustGen , \n     sequenceName   =   CustomerIdSeq , \n     allocationSize = 1 )  private   long   customerId ;    Note  todo", 
            "title": "Typ Sequence"
        }, 
        {
            "location": "/Dbs2/2_OR-Mapping/#transitive-persistenz", 
            "text": "Von Persistente Objekte erreichbaren Objekte sollten auch persistent sein", 
            "title": "Transitive Persistenz"
        }, 
        {
            "location": "/Dbs2/2_OR-Mapping/#inkonsistente-bidirektionalitat", 
            "text": "In JPA werden bidirektionale Relationen nicht in beide Richtungen automatisch gesetzt  Muss von Hand gemacht werden", 
            "title": "Inkonsistente Bidirektionalit\u00e4t"
        }, 
        {
            "location": "/Dbs2/2_OR-Mapping/#transaktionen", 
            "text": "EntityManager   em   =   factory . createEntityManager ();  em . getTransaction (). begin ();  // ...  // do something... make changes  // ...  em . getTransaction (). commit ();   // or rollback()    Isolation Level ist per default Read-Commited  Nur Daten lesen, die eine andere Transaktion commited hat", 
            "title": "Transaktionen"
        }, 
        {
            "location": "/Dbs2/2_OR-Mapping/#optimistic-concurrency", 
            "text": "Beim Commit einer Transaktion wird nach Konflikten gepr\u00fcft  Wenn Konflikt entstand, wird ein Rollback gemacht", 
            "title": "Optimistic Concurrency"
        }, 
        {
            "location": "/Dbs2/2_OR-Mapping/#versions-feld", 
            "text": "Mit jedem Update Feld hochz\u00e4hlen  Beim Schreiben pr\u00fcfen, ob das Feld gleich ist wie der Wert, der vorher gelesen wurde  Wenn Feld anders, hat jemand in der Zwischenzeit den Record ver\u00e4ndert -  Rollback   UPDATE   User   SET   ...,   version   =   version   +   1  WHERE   id   =   ?   AND   version   =   readVersion    JPA wirft bei Verletzung eine  ConcurrencyLockException", 
            "title": "Versions-Feld"
        }, 
        {
            "location": "/Dbs2/2_OR-Mapping/#entity-locking", 
            "text": "em.lock()  OPTIMISTIC_FORCE_INCREMENT: Beim lock direkt direkt das Versions-Feld erh\u00f6hen, damit andere keine Commits mehr darauf machen kann, der vorher gelesen hat", 
            "title": "Entity Locking"
        }, 
        {
            "location": "/Dbs2/2_OR-Mapping/#detached-entities", 
            "text": "Oft m\u00f6chte man DB-Objekte \"detachen\" (Db-Context schliessen), ver\u00e4ndern, und dann wieder in die DB schreiben  Mit  entityManger.merge(object)  wird ein wieder in den Persistenz-Kontext geladen, dass wieder commited werden kann", 
            "title": "Detached Entities"
        }, 
        {
            "location": "/Dbs2/2_OR-Mapping/#inheritance-mapping", 
            "text": "", 
            "title": "Inheritance Mapping"
        }, 
        {
            "location": "/Dbs2/2_OR-Mapping/#single-table-mapping-table-per-hierarchy", 
            "text": "@Entity  @Inheritance ( strategy   =   InheritanceType . SINGLE_TABLE )  @DiscriminatorColumn ( name   =   type )  public   abstract   class   BankCustomer   { \n     @Id   private   String   name ;  }  @Entity  @DiscriminatorValue ( Retail )  public   class   RetailBankCustomer   extends   BankCustomer   { \n     private   int   fees ;  }  @Entity  @DiscriminatorValue ( Private )  public   class   PrivateBankCustomer   extends   BankCustomer   { \n     private   String   eliteOffer ;  }    Das Feld \"type\" ist hier diskriminator und wird in der DB verwendet, um die verschiedenen  BankCustomer  zu unterscheiden", 
            "title": "Single Table Mapping (Table per Hierarchy)"
        }, 
        {
            "location": "/Dbs2/2_OR-Mapping/#joined-table-mapping", 
            "text": "", 
            "title": "Joined Table Mapping"
        }, 
        {
            "location": "/Dbs2/2_OR-Mapping/#table-per-class-mapping", 
            "text": "", 
            "title": "Table per Class Mapping"
        }, 
        {
            "location": "/Dbs2/2_OR-Mapping/#abfragen-mit-jpql", 
            "text": "Sprache analog zu SQL...  , aber operiert auf Entity Model, nicht DB-Model!  Es k\u00f6nnen z.B. \"Navigation Attributes\" verwendet werden  \"Prepared Statements\" mit Named Parameters   Query   query   =   em . createQuery ( \n     SELECT c FROM BankCustomer c WHERE c.name LIKE :customerName  );  query . setParameter ( customerName ,   name );  query . setMaxResults ( 1000 );  List BankCustomer   list   =   query . getResultList ();", 
            "title": "Abfragen mit JPQL"
        }, 
        {
            "location": "/Dbs2/2_OR-Mapping/#named-queries", 
            "text": "", 
            "title": "Named Queries"
        }, 
        {
            "location": "/Dbs2/2_OR-Mapping/#criteria-api", 
            "text": "", 
            "title": "Criteria API"
        }, 
        {
            "location": "/Dbs2/3_Stored_Procedures/", 
            "text": "Stored Procedures / pgSQL\n\n\nStored Procedures\n\n\n\n\nFunktionen, die auf dem DBMS \"nahe den Daten\" ausgef\u00fchrt werden\n\n\nK\u00f6nnen wiederum von anderen SP, Trigger oder PL/SQL ausgef\u00fchrt werden\n\n\nSind Datenbankobjekte\n\n\nHaben eigenes Recht zur Ausf\u00fchrung\n\n\nPL: Prozedurale Sprache f\u00fcr Datenbanken\n\n\n\n\nCREATE\n \nOR\n \nREPLACE\n \nFUNCTION\n \nincrement\n(\ni\n \nINT\n)\n\n\nRETURNS\n \nINT\n \nAS\n \n$$\n\n\nBEGIN\n\n\nRETURN\n \ni\n \n+\n \n1\n;\n\n\nEND\n;\n\n\n$$\n \nLANGUAGE\n \nplpgsql\n;\n\n\n\n-- use\n\n\nSELECT\n \nincrement\n(\n10\n);\n \n-- 11\n\n\n\n\n\n\n\n\nVariablen deklarieren in \nDECLARE\n Block\n\n\nGefolgt von Logik zwischen \nBEGIN\n und \nEND\n\n\nSQL kann direkt eingebettet werden\n\n\nIF: \nIF expression THEN statements ELSIF cond THEN ... END IF;\n\n\nExceptions:\n\n\n\n\nEXCEPTION\n\n\nWHEN\n \ntype\n \nTHEN\n \nstatement\n;\n\n\nWHEN\n \nother_type\n \nTHEN\n \nstatement\n;\n\n\n\n\n\n\nSelect .. Into\n\n\nDECLARE\n\n    \nAngNr\n \nAngestellter\n.\nPersNr\n%\nTYPE\n;\n\n    \n-- Typ von Angestellter.PersNr\n\n\nBEGIN\n \n/*lokaler, anonymer Block */\n\n    \nSELECT\n \nAngestellter\n.\nPersNr\n \nINTO\n \nSTRICT\n \nAngNr\n\n    \nFROM\n \nAngestellter\n\n    \nWHERE\n \nAngestellter\n.\nName\n \n=\n \nMarxer, Markus\n;\n\n\nEND\n\n\n\n\n\n\nInsert ... into\n\n\nDECLARE\n\n    \nPNr\n \nProjekt\n.\nProjNr\n%\nTYPE\n;\n\n    \nAngNr\n \nAngestellter\n.\nPersNr\n%\nTYPE\n;\n\n    \nProzAnt\n \nDECIMAL\n;\n\n\nBEGIN\n\n\n--....\n\n    \nINSERT\n \nINTO\n \nProjektZuteilung\n\n    \nVALUES\n \n(\nAngNr\n,\n \nPNr\n,\n \nProzAnt\n,\n \nNULL\n,\n \nNULL\n);\n\n\nEXCEPTION\n\n    \nWHEN\n \nunique_violation\n \nTHEN\n\n    \n/*Projektzuteilung existiert bereits*/\n\n\nEND\n;\n\n\n\n\n\n\n\n\nFOUND\n wird \ntrue\n, wenn Row gefunden wurde\n\n\nIn PostgreSQL Terminologie\n\n\n\"Stored Procedure\" = \"Function\" mit Returnwert void\n\n\n\n\n\n\n\n\nReturn Table\n\n\nCREATE\n \nOR\n \nREPLACE\n \nFUNCTION\n \nget_AbtMA\n \n(\nnr\n \ninteger\n)\n\n    \nRETURNS\n \nTABLE\n \n(\n\n        \nabtname\n \nVARCHAR\n,\n\n        \nabtMA\n \nVARCHAR\n\n    \n)\n\n\nAS\n \n$$\n\n\nBEGIN\n\n    \nRETURN\n \nQUERY\n\n    \nSELECT\n \nabt\n.\nname\n,\n \nang\n.\nname\n \nFROM\n \nabteilung\n \nabt\n\n    \njoin\n \nangestellter\n \nang\n \non\n \nang\n.\nabtnr\n=\nabt\n.\nabtnr\n\n    \nwhere\n \nabt\n.\nabtnr\n=\nnr\n\n    \norder\n \nby\n \nabt\n.\nname\n,\n \nang\n.\nname\n;\n\n\nEND\n;\n\n\n$$\n \nLANGUAGE\n \nplpgsql\n;\n\n\n\n\n\n\nReturn a Set\n\n\n\n\nReturn a set of rows\n\n\n\n\nCREATE\n \nOR\n \nREPLACE\n \nFUNCTION\n \ngetAllFoo\n()\n\n\nRETURNS\n \nSETOF\n \nfoo\n \nAS\n \n$$\n\n\nDECLARE\n\n    \nr\n \nfoo\n%\nrowtype\n;\n \n-- foo ist tabelle\n\n\nBEGIN\n\n    \nFOR\n \nr\n \nIN\n \nSELECT\n \n*\n \nFROM\n \nfoo\n \nWHERE\n \nfooid\n \n \n0\n\n    \nLOOP\n\n        \n-- do something...\n\n        \nRETURN\n \nNEXT\n \nr\n;\n \n-- return current row of SELECT\n\n    \nEND\n \nLOOP\n;\n\n    \nRETURN\n;\n\n\nEND\n\n\n$$\n \nLANGUAGE\n \nplpgsql\n;\n\n\n\n\n\n\nCursor\n\n\n\n\nEin Cursor zeigt auf ein Tupel in einem ResultSet\n\n\n\n\n\n\nCursor deklarieren in \nDECLARE\n\n\n\n\nAngCursor\n \n(\nabtNr\n \ninteger\n)\n \nCURSOR\n \nFOR\n\n    \nSELECT\n \nSalaer\n,\n \nPersNr\n \nFROM\n \nAngestellter\n\n    \nWHERE\n \nAngestellter\n.\nAbtNr\n \n=\n \nabtNr\n;\n\n\n\n\n\n\n\n\nCursor \u00f6ffnen: \nOPEN AngCursor(2)\n\n\nFetch records\n\n\n\n\nLOOP\n \n/*Iteration ueber Resulatmenge*/\n\n    \nFETCH\n \nAngCursor\n \nINTO\n \nAngSalaer\n,\n \nAngPersNr\n;\n\n    \nEXIT\n \nWHEN\n \nNOT\n \nFOUND\n\n    \nSalSumme\n \n:\n=\n \nSalSumme\n \n+\n \nAngSalaer\n;\n\n    \nRAISE\n \nnotice\n \nAngstellter PersNr: % Salaer %\n,\n\n    \nAngPersNr\n,\n \nAngSalaer\n;\n\n\nEND\n \nLOOP\n;\n\n\n\n\n\n\n\n\nCursor schliessen: \nCLOSE AngCursor\n\n\n\n\nCursor f\u00fcr UPDATE\n\n\nAngCursor\n \nCURSOR\n \nFOR\n\n    \nSELECT\n \nSalaer\n,\n \nChef\n,\n \nPersNr\n \nFROM\n \nAngestellter\n\n    \nWHERE\n \nAngestellter\n.\nAbtNr\n=\nCurrAbtNr\n\n    \nFOR\n \nUPDATE\n;\n\n\nOPEN\n \nAngCursor\n;\n\n\nLOOP\n\n    \nFETCH\n \nAngCursor\n \nINTO\n \nAngRec\n;\n\n    \nEXIT\n \nWHEN\n \nNOT\n \nFOUND\n;\n\n    \nUPDATE\n \nAngestellter\n \nSET\n \nSalaer\n \n=\n \nMinSalaer\n\n    \nWHERE\n \nCURRENT\n \nOF\n \nAngCursor\n;\n \n-- \n---\n\n\nEND\n \nLOOP\n;\n\n\nCLOSE\n \nAngCursor\n;", 
            "title": "3 Stored Procedures"
        }, 
        {
            "location": "/Dbs2/3_Stored_Procedures/#stored-procedures-pgsql", 
            "text": "", 
            "title": "Stored Procedures / pgSQL"
        }, 
        {
            "location": "/Dbs2/3_Stored_Procedures/#stored-procedures", 
            "text": "Funktionen, die auf dem DBMS \"nahe den Daten\" ausgef\u00fchrt werden  K\u00f6nnen wiederum von anderen SP, Trigger oder PL/SQL ausgef\u00fchrt werden  Sind Datenbankobjekte  Haben eigenes Recht zur Ausf\u00fchrung  PL: Prozedurale Sprache f\u00fcr Datenbanken   CREATE   OR   REPLACE   FUNCTION   increment ( i   INT )  RETURNS   INT   AS   $$  BEGIN  RETURN   i   +   1 ;  END ;  $$   LANGUAGE   plpgsql ;  -- use  SELECT   increment ( 10 );   -- 11    Variablen deklarieren in  DECLARE  Block  Gefolgt von Logik zwischen  BEGIN  und  END  SQL kann direkt eingebettet werden  IF:  IF expression THEN statements ELSIF cond THEN ... END IF;  Exceptions:   EXCEPTION  WHEN   type   THEN   statement ;  WHEN   other_type   THEN   statement ;", 
            "title": "Stored Procedures"
        }, 
        {
            "location": "/Dbs2/3_Stored_Procedures/#select-into", 
            "text": "DECLARE \n     AngNr   Angestellter . PersNr % TYPE ; \n     -- Typ von Angestellter.PersNr  BEGIN   /*lokaler, anonymer Block */ \n     SELECT   Angestellter . PersNr   INTO   STRICT   AngNr \n     FROM   Angestellter \n     WHERE   Angestellter . Name   =   Marxer, Markus ;  END", 
            "title": "Select .. Into"
        }, 
        {
            "location": "/Dbs2/3_Stored_Procedures/#insert-into", 
            "text": "DECLARE \n     PNr   Projekt . ProjNr % TYPE ; \n     AngNr   Angestellter . PersNr % TYPE ; \n     ProzAnt   DECIMAL ;  BEGIN  --.... \n     INSERT   INTO   ProjektZuteilung \n     VALUES   ( AngNr ,   PNr ,   ProzAnt ,   NULL ,   NULL );  EXCEPTION \n     WHEN   unique_violation   THEN \n     /*Projektzuteilung existiert bereits*/  END ;    FOUND  wird  true , wenn Row gefunden wurde  In PostgreSQL Terminologie  \"Stored Procedure\" = \"Function\" mit Returnwert void", 
            "title": "Insert ... into"
        }, 
        {
            "location": "/Dbs2/3_Stored_Procedures/#return-table", 
            "text": "CREATE   OR   REPLACE   FUNCTION   get_AbtMA   ( nr   integer ) \n     RETURNS   TABLE   ( \n         abtname   VARCHAR , \n         abtMA   VARCHAR \n     )  AS   $$  BEGIN \n     RETURN   QUERY \n     SELECT   abt . name ,   ang . name   FROM   abteilung   abt \n     join   angestellter   ang   on   ang . abtnr = abt . abtnr \n     where   abt . abtnr = nr \n     order   by   abt . name ,   ang . name ;  END ;  $$   LANGUAGE   plpgsql ;", 
            "title": "Return Table"
        }, 
        {
            "location": "/Dbs2/3_Stored_Procedures/#return-a-set", 
            "text": "Return a set of rows   CREATE   OR   REPLACE   FUNCTION   getAllFoo ()  RETURNS   SETOF   foo   AS   $$  DECLARE \n     r   foo % rowtype ;   -- foo ist tabelle  BEGIN \n     FOR   r   IN   SELECT   *   FROM   foo   WHERE   fooid     0 \n     LOOP \n         -- do something... \n         RETURN   NEXT   r ;   -- return current row of SELECT \n     END   LOOP ; \n     RETURN ;  END  $$   LANGUAGE   plpgsql ;", 
            "title": "Return a Set"
        }, 
        {
            "location": "/Dbs2/3_Stored_Procedures/#cursor", 
            "text": "Ein Cursor zeigt auf ein Tupel in einem ResultSet    Cursor deklarieren in  DECLARE   AngCursor   ( abtNr   integer )   CURSOR   FOR \n     SELECT   Salaer ,   PersNr   FROM   Angestellter \n     WHERE   Angestellter . AbtNr   =   abtNr ;    Cursor \u00f6ffnen:  OPEN AngCursor(2)  Fetch records   LOOP   /*Iteration ueber Resulatmenge*/ \n     FETCH   AngCursor   INTO   AngSalaer ,   AngPersNr ; \n     EXIT   WHEN   NOT   FOUND \n     SalSumme   : =   SalSumme   +   AngSalaer ; \n     RAISE   notice   Angstellter PersNr: % Salaer % , \n     AngPersNr ,   AngSalaer ;  END   LOOP ;    Cursor schliessen:  CLOSE AngCursor", 
            "title": "Cursor"
        }, 
        {
            "location": "/Dbs2/3_Stored_Procedures/#cursor-fur-update", 
            "text": "AngCursor   CURSOR   FOR \n     SELECT   Salaer ,   Chef ,   PersNr   FROM   Angestellter \n     WHERE   Angestellter . AbtNr = CurrAbtNr \n     FOR   UPDATE ;  OPEN   AngCursor ;  LOOP \n     FETCH   AngCursor   INTO   AngRec ; \n     EXIT   WHEN   NOT   FOUND ; \n     UPDATE   Angestellter   SET   Salaer   =   MinSalaer \n     WHERE   CURRENT   OF   AngCursor ;   --  ---  END   LOOP ;  CLOSE   AngCursor ;", 
            "title": "Cursor f\u00fcr UPDATE"
        }, 
        {
            "location": "/EPJ/0_Index/", 
            "text": "Engineering-Projekt", 
            "title": "0 Index"
        }, 
        {
            "location": "/EPJ/0_Index/#engineering-projekt", 
            "text": "", 
            "title": "Engineering-Projekt"
        }, 
        {
            "location": "/EPJ/1_Projektplan/", 
            "text": "Projektplanung\n\n\nMilestones\n\n\n\n\n(Projektplan)\n\n\nAnalyse / Domain Model / Use Cases\n\n\nEnd of Elaboration\n\n\nServer-Logik (nach 1. Construction Iteration)\n\n\nUsability Testing beginnnen (nach 2 construction iteration)\n\n\nFeature Freeze\n\n\n(Code Freeze) - End of Construction\n\n\n\n\nProjektplan\n\n\n\n\nabgemachte Code Reviews?\n\n\nTesting Metriken?\n\n\n\n\nArbeitspakete\n\n\n\n\nMaximale Zeitaufwand festlegen (10h?)\n\n\nZeit pro Arbeitspaket sch\u00e4tzen / Prio setzen\n\n\nEinteilung in kategorien und Milestones\n\n\n\n\nN\u00e4chste Arbeitspakete \n\n- Recherche Framework\n- Auswertung Zeit von Gitlab\n- Technologie festlegen\n- Requirements definieren\n- NF-Requirements definieren\n- Use Cases brief\n- Wichtigste Use Cases casual\n- Domain Modell erstellen\n- Architektur festlegen\n\n\nWeitere f\u00fcr Elaboration-Phase:\n- Build-Toolchain einrichten (Gitlab CI)\n- Static Code analysis? \n- UI-Prototypen\n- Backend-Prototypen mit Architektur, Datenbank und minimaler Logik", 
            "title": "1 Projektplan"
        }, 
        {
            "location": "/EPJ/1_Projektplan/#projektplanung", 
            "text": "", 
            "title": "Projektplanung"
        }, 
        {
            "location": "/EPJ/1_Projektplan/#milestones", 
            "text": "(Projektplan)  Analyse / Domain Model / Use Cases  End of Elaboration  Server-Logik (nach 1. Construction Iteration)  Usability Testing beginnnen (nach 2 construction iteration)  Feature Freeze  (Code Freeze) - End of Construction", 
            "title": "Milestones"
        }, 
        {
            "location": "/EPJ/1_Projektplan/#projektplan", 
            "text": "abgemachte Code Reviews?  Testing Metriken?", 
            "title": "Projektplan"
        }, 
        {
            "location": "/EPJ/1_Projektplan/#arbeitspakete", 
            "text": "Maximale Zeitaufwand festlegen (10h?)  Zeit pro Arbeitspaket sch\u00e4tzen / Prio setzen  Einteilung in kategorien und Milestones   N\u00e4chste Arbeitspakete  \n- Recherche Framework\n- Auswertung Zeit von Gitlab\n- Technologie festlegen\n- Requirements definieren\n- NF-Requirements definieren\n- Use Cases brief\n- Wichtigste Use Cases casual\n- Domain Modell erstellen\n- Architektur festlegen  Weitere f\u00fcr Elaboration-Phase:\n- Build-Toolchain einrichten (Gitlab CI)\n- Static Code analysis? \n- UI-Prototypen\n- Backend-Prototypen mit Architektur, Datenbank und minimaler Logik", 
            "title": "Arbeitspakete"
        }, 
        {
            "location": "/ITBus/0_Index/", 
            "text": "Wirtschaftsinformatik 1 - IT im Business\n\n\n\n\nExam Notes", 
            "title": "0 Index"
        }, 
        {
            "location": "/ITBus/0_Index/#wirtschaftsinformatik-1-it-im-business", 
            "text": "Exam Notes", 
            "title": "Wirtschaftsinformatik 1 - IT im Business"
        }, 
        {
            "location": "/ITBus/1_Exam/", 
            "text": "Exam\n\n\n\n\nTestatbedingungen\n\n\nAnwesenheit Gastvortr\u00e4ge 04.05 und 18.05\n\n\n\n\n\n\nGastreferate sind auch Pr\u00fcfungsstoff!", 
            "title": "1 Exam"
        }, 
        {
            "location": "/ITBus/1_Exam/#exam", 
            "text": "Testatbedingungen  Anwesenheit Gastvortr\u00e4ge 04.05 und 18.05    Gastreferate sind auch Pr\u00fcfungsstoff!", 
            "title": "Exam"
        }, 
        {
            "location": "/ITBus/2_Informationssysteme/", 
            "text": "Informationssysteme\n\n\nFall-Studie UPS\n\n\n\n\n\n\nMit welchen ICT-Technologien unterst\u00fctzt UPS den Distributionsprozess?\n- Statistische Auswertung\n\n\n\n\nz.B. Realtime Berechnung der Lieferungsrouten und ad-hoc \u00c4nderungen\n\n\n\n\n\n\n\n\nBetrachten Sie das Beispiel \u201eTrack \n Trace\". Noch bis im Jahre 2003 ging es auch ohne Track \n Trace. Welche Bedeutung hat diese Innovation f\u00fcr die Kleinkunden von UPS? Und f\u00fcr die Firmenkunden von UPS? Und f\u00fcr UPS selber?\n\n\n\n\n\n\n\n\nF\u00fcr Kleinkunden: Immediate Feedback; Man sieht transparent, wo das Paket ist. F\u00fchrt zu weniger Supportanfragen\n\n\nF\u00fcr Firmenkunden: Weitergabe einer Lieferzeit an Endkunden; Lieferzeit voraussehbar, z.B. f\u00fcr Just-in-time production\n\n\nF\u00fcr UPS selber: Weniger Supportanfragen von Kunden\n\n\n\n\n\n\n\n\nWorin bestehen die Eingaben, die Verarbeitung und die Ausgaben des Paketverfolgungssystems von UPS?\n\n\n\n\n\n\nWelche Arten von Dienstleistungen stellt die Website f\u00fcr Privatpersonen, f\u00fcr kleine und f\u00fcr grosse Unternehmen zur Verf\u00fcgung? F\u00fchren Sie die Serviceleistungen auf und beschreiben Sie jede in einigen Abs\u00e4tzen, z. B. UPS CampusShip oder UPS Ocean Freight. Erl\u00e4utern Sie, wie Sie bzw. Ihre Unternehmung von diesem Service profitieren k\u00f6nnten.\n\n\n\n\n\n\nWie zahlen sich die Techniken f\u00fcr das Unternehmen aus? Was gesch\u00e4he, wenn diese Techniken nicht verf\u00fcgbar w\u00e4ren?", 
            "title": "2 Informationssysteme"
        }, 
        {
            "location": "/ITBus/2_Informationssysteme/#informationssysteme", 
            "text": "", 
            "title": "Informationssysteme"
        }, 
        {
            "location": "/ITBus/2_Informationssysteme/#fall-studie-ups", 
            "text": "Mit welchen ICT-Technologien unterst\u00fctzt UPS den Distributionsprozess?\n- Statistische Auswertung   z.B. Realtime Berechnung der Lieferungsrouten und ad-hoc \u00c4nderungen     Betrachten Sie das Beispiel \u201eTrack   Trace\". Noch bis im Jahre 2003 ging es auch ohne Track   Trace. Welche Bedeutung hat diese Innovation f\u00fcr die Kleinkunden von UPS? Und f\u00fcr die Firmenkunden von UPS? Und f\u00fcr UPS selber?     F\u00fcr Kleinkunden: Immediate Feedback; Man sieht transparent, wo das Paket ist. F\u00fchrt zu weniger Supportanfragen  F\u00fcr Firmenkunden: Weitergabe einer Lieferzeit an Endkunden; Lieferzeit voraussehbar, z.B. f\u00fcr Just-in-time production  F\u00fcr UPS selber: Weniger Supportanfragen von Kunden     Worin bestehen die Eingaben, die Verarbeitung und die Ausgaben des Paketverfolgungssystems von UPS?    Welche Arten von Dienstleistungen stellt die Website f\u00fcr Privatpersonen, f\u00fcr kleine und f\u00fcr grosse Unternehmen zur Verf\u00fcgung? F\u00fchren Sie die Serviceleistungen auf und beschreiben Sie jede in einigen Abs\u00e4tzen, z. B. UPS CampusShip oder UPS Ocean Freight. Erl\u00e4utern Sie, wie Sie bzw. Ihre Unternehmung von diesem Service profitieren k\u00f6nnten.    Wie zahlen sich die Techniken f\u00fcr das Unternehmen aus? Was gesch\u00e4he, wenn diese Techniken nicht verf\u00fcgbar w\u00e4ren?", 
            "title": "Fall-Studie UPS"
        }, 
        {
            "location": "/InfSi3/0_Index/", 
            "text": "Informationssicherheit 3\n\n\n\n\nExam Notes", 
            "title": "0 Index"
        }, 
        {
            "location": "/InfSi3/0_Index/#informationssicherheit-3", 
            "text": "Exam Notes", 
            "title": "Informationssicherheit 3"
        }, 
        {
            "location": "/InfSi3/1_Exam/", 
            "text": "Exam\n\n\n\n\nPr\u00fcfung ohne Unterlagen\n\n\nSelbststudium ist Pr\u00fcfungsstoff!", 
            "title": "1 Exam"
        }, 
        {
            "location": "/InfSi3/1_Exam/#exam", 
            "text": "Pr\u00fcfung ohne Unterlagen  Selbststudium ist Pr\u00fcfungsstoff!", 
            "title": "Exam"
        }, 
        {
            "location": "/InfSi3/2_Overview/", 
            "text": "Overview, Legal Aspects and Global Threats", 
            "title": "2 Overview"
        }, 
        {
            "location": "/InfSi3/2_Overview/#overview-legal-aspects-and-global-threats", 
            "text": "", 
            "title": "Overview, Legal Aspects and Global Threats"
        }, 
        {
            "location": "/InfSi3/3_Software_Security/", 
            "text": "Software Security\n\n\nThe Trinity of Trouble\n\n\n\n\nConnectivity\n: Immer mehr verbundene Ger\u00e4te\n\n\nSoftware wird als Service publiziert, die nie daf\u00fcr gedacht war\n\n\n\n\n\n\nExtensibility\n: Viele software wird modular\n\n\nDurch Plugins erweiterbar, z.B. Browser\n\n\n\n\n\n\nComplexity\n: Moderne Software ist komplex\n\n\nz.B. Betriebssysteme, Runtimes\n\n\nAnzahl Fehler steigt etwa quadratisch zu Anzahl Codezeilen\n\n\n\n\n\n\n\n\nDefects = Bugs + Flaws\n\n\n\n\nBug\n: Implementations-Fehler, der sich relativ leicht beheben l\u00e4sst\n\n\nFlaw\n: Design-Fehler in der Software, nur schwer zu finden / zu fixen\n\n\nIn der Praxis sind solche Defects 50/50 geteilt in Bugs und Flaws\n\n\n\n\nBest Practices\n\n\n\n\nPenetration ist nicht die effizienteste Massnahme, da die Fehler erst sp\u00e4t in der Entwicklung gefunden werden und so die Kosten enorm steigen\n\n\nStatische Code Analyse\n\n\nz.B. mit Coverity (f\u00fcr Github projekte kostenlos)\n\n\n\n\n\n\n\n\nArchitectural Risk Analysis\n\n\n\n\nArchitektur auf einer Seite zusammen fassen (\"Flipchart\")\n\n\n\n\nAttack Resistance Analysis\n\n\n\n\nAnsatz mit Checklisten\n\n\nGut f\u00fcr bekannte Schwachstellen und Angriffe\n\n\nSchlecht f\u00fcr neue Attacken / 0-days\n\n\n\n\nAmbiguity Analysis\n\n\n\n\nVon dritter Seite wird die Software und Architektur studiert\n\n\nGut, um Widerspr\u00fcche und Fehler im Design zu finden\n\n\n\n\nWeakness Analysis\n\n\n\n\nVerwendete Libraries und Frameworks analysieren\n\n\n\n\nMicrosoft Security Development Lifecycle\n\n\n\n\nSDL - Simplified Version\n lesen!\n\n\nBest Practises des SDL kennen\n\n\n\n\nThreat Modeling = Risk Analysis\n\n\n\n\n\n\nFuzzing: Zuf\u00e4llige Input-Daten f\u00fcr Testf\u00e4lle, daf\u00fcr sehr viele verschiedene Inputs", 
            "title": "3 Software Security"
        }, 
        {
            "location": "/InfSi3/3_Software_Security/#software-security", 
            "text": "", 
            "title": "Software Security"
        }, 
        {
            "location": "/InfSi3/3_Software_Security/#the-trinity-of-trouble", 
            "text": "Connectivity : Immer mehr verbundene Ger\u00e4te  Software wird als Service publiziert, die nie daf\u00fcr gedacht war    Extensibility : Viele software wird modular  Durch Plugins erweiterbar, z.B. Browser    Complexity : Moderne Software ist komplex  z.B. Betriebssysteme, Runtimes  Anzahl Fehler steigt etwa quadratisch zu Anzahl Codezeilen", 
            "title": "The Trinity of Trouble"
        }, 
        {
            "location": "/InfSi3/3_Software_Security/#defects-bugs-flaws", 
            "text": "Bug : Implementations-Fehler, der sich relativ leicht beheben l\u00e4sst  Flaw : Design-Fehler in der Software, nur schwer zu finden / zu fixen  In der Praxis sind solche Defects 50/50 geteilt in Bugs und Flaws", 
            "title": "Defects = Bugs + Flaws"
        }, 
        {
            "location": "/InfSi3/3_Software_Security/#best-practices", 
            "text": "Penetration ist nicht die effizienteste Massnahme, da die Fehler erst sp\u00e4t in der Entwicklung gefunden werden und so die Kosten enorm steigen  Statische Code Analyse  z.B. mit Coverity (f\u00fcr Github projekte kostenlos)", 
            "title": "Best Practices"
        }, 
        {
            "location": "/InfSi3/3_Software_Security/#architectural-risk-analysis", 
            "text": "Architektur auf einer Seite zusammen fassen (\"Flipchart\")", 
            "title": "Architectural Risk Analysis"
        }, 
        {
            "location": "/InfSi3/3_Software_Security/#attack-resistance-analysis", 
            "text": "Ansatz mit Checklisten  Gut f\u00fcr bekannte Schwachstellen und Angriffe  Schlecht f\u00fcr neue Attacken / 0-days", 
            "title": "Attack Resistance Analysis"
        }, 
        {
            "location": "/InfSi3/3_Software_Security/#ambiguity-analysis", 
            "text": "Von dritter Seite wird die Software und Architektur studiert  Gut, um Widerspr\u00fcche und Fehler im Design zu finden", 
            "title": "Ambiguity Analysis"
        }, 
        {
            "location": "/InfSi3/3_Software_Security/#weakness-analysis", 
            "text": "Verwendete Libraries und Frameworks analysieren", 
            "title": "Weakness Analysis"
        }, 
        {
            "location": "/InfSi3/3_Software_Security/#microsoft-security-development-lifecycle", 
            "text": "SDL - Simplified Version  lesen!  Best Practises des SDL kennen   Threat Modeling = Risk Analysis    Fuzzing: Zuf\u00e4llige Input-Daten f\u00fcr Testf\u00e4lle, daf\u00fcr sehr viele verschiedene Inputs", 
            "title": "Microsoft Security Development Lifecycle"
        }, 
        {
            "location": "/ParProg/0_Index/", 
            "text": "Parallele Programmierung\n\n\n\n\nExam Notes\n\n\nMulti-Threading Grundlagen", 
            "title": "0 Index"
        }, 
        {
            "location": "/ParProg/0_Index/#parallele-programmierung", 
            "text": "Exam Notes  Multi-Threading Grundlagen", 
            "title": "Parallele Programmierung"
        }, 
        {
            "location": "/ParProg/1_Exam/", 
            "text": "Exam\n\n\nHilfsmittel\n\n\n\n\n1 A4 beidseitig", 
            "title": "1 Exam"
        }, 
        {
            "location": "/ParProg/1_Exam/#exam", 
            "text": "", 
            "title": "Exam"
        }, 
        {
            "location": "/ParProg/1_Exam/#hilfsmittel", 
            "text": "1 A4 beidseitig", 
            "title": "Hilfsmittel"
        }, 
        {
            "location": "/ParProg/2_Multi-Threading_Grundlagen/", 
            "text": "Multi-Threading Grundlagen\n\n\nMotivation\n\n\n\n\nReale Prozesse abbilden (Druckjobs, Server-Client)\n\n\nPerfromance-Steigerung\n\n\n\n\nSeit 2003 stagnieren Taktraten, stattdessen wird mehr auf Hyperthreading und mehrere Kerne gesetzt. Deshalb m\u00fcssen Programme darauf optimiert werden\n\n\n\n\n\n\nHyperthreading (Virtual Threading): Ein CPU-Core hat zwei Register-Sets, aber immer noch nur ein Rechenwerk (ALU)\n\n\n\n\nIst nicht \"echte\" Parallelisierung\n\n\n\n\n\n\n\n\nParallelit\u00e4t vs. Nebenl\u00e4ufigkeit\n\n\n\n\nParallelit\u00e4t\n:  Zerlegung eines Ablaufs in mehrere Teilabl\u00e4ufe, welche gleichzeitig auf mehreren Prozessoren laufen\n\n\nNebenl\u00e4ufigkeit\n (Concurrency): Gleichzeitig oder verzahnt ausf\u00fchrbare Abl\u00e4ufe, welche auf gemeinsame Ressourcen zugreifen.\n\n\n\u00c4lteres Prinzip, z.B. Drucker\n\n\nKann anschein von Parallelit\u00e4t haben, aber es wird immer nur etwas auf einmal ausgef\u00fchrt\n\n\n\n\n\n\n\n\n\n\nSystem Grundlagen Repetition\n\n\nThreads\n\n\n\n\nParallele Ablaufsequenz innerhalb eines Programms, teilen den Adressraum mit dem ganzen Prozess\n\n\nIst g\u00fcnstiger als eigener Prozess, braucht keine eigene Pagetable\n\n\nJeder Thread hat eigenen Stack\n\n\nUser-Level-Thread: Im Prozess implementiert, keine echte Parallelit\u00e4t durch mehrere Prozessoren\n\n\nKernel-Level-Thread: Im Kernel implementiert, kann Multi-Core ausnutzen. Wechsel per SW-Interrupt, ist also nicht ganz \"gratis\"\n\n\nScheduling: Ein CPU-Core kann immer nur ein Thread gleichzeitig ausf\u00fchren. Scheduler teilt die Threads zu\n\n\nWenn nur ein Prozessor Threads verarbeitet, ist es eine Quasi-Parallelisierung\n\n\n\n\nProgrammierung hat f\u00fcr \"echte\" oder \"quasi\"-Parallelit\u00e4t die gleichen Probleme, weil man nie weiss, wann die Kontextwechsel geschehen\n\n\n\n\n\n\nKontextwechsel\n\n\n\n\nSynchron\n: Thread wartet auf Bedingung, gibt den Prozessor selbst frei\n\n\nAsynchron\n: Nach gewisser Zeit wird der Thread gewzungen, die CPU freizugeben\n\n\n\n\n\n\nMulti-Tasking\n\n\nKooperativ\n: Threads m\u00fcssen explizit synchrone Kontextwechsel initiieren\n\n\nPreemptive\n: Scheduler unterbricht den Thread \nasynchron\n in gewissen Zeitintervallen\n\n\nHeute in der Regel immer \npreemptive\n!\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nTodo: Bild Folie 30\n\n\n\n\nGrundlagen Java Threads\n\n\n\n\nJVM ist ein Single Process System\n\n\nMain-Thread f\u00fchrt die \nmain()\n-Methode aus (per Reflection)\n\n\nProgrammierer kann weitere Threads starten\n\n\nLaufzeitsystem startet auch eigene Threads, z.B. GC\n\n\nDie JVM l\u00e4uft solange, bis kein (nicht-Daemon-) Thread mehr l\u00e4uft\n\n\nDaemon-Thread ist z.B. GC, wird bei Ende der JVM unkontrolliert beendet\n\n\n\n\n\n\n\n\nclass\n \nSimpleThread\n \nextends\n \nThread\n \n{\n\n    \n@Override\n\n    \npublic\n \nvoid\n \nrun\n()\n \n{\n\n        \n// thread behavior\n\n\n        \n// thread ends when run() exits \n\n        \n// (or unhandled exception orccurs)\n\n    \n}\n\n\n}\n\n\nThread\n \nmyThread\n \n=\n \nnew\n \nSimpleThread\n();\n\n\nmyThread\n.\nstart\n();\n\n\n\n\n\n\n\n\nWenn unbehandelte Exception in Thread auftritt, laufen andere Threads weiter (in Java, andere Umgebungen anders)\n\n\nThreads laufen ohne Vorkehrungen beliebig verzahnt, \nnicht-deterministischer Ablauf!\n\n\n\n\nRunnable Implementierung statt Vererbung:\n\n\nclass\n \nSimpleLogic\n \nimplements\n \nRunnable\n \n{\n\n    \n@Override\n\n    \npublic\n \nvoid\n \nrun\n()\n \n{\n\n        \n// thread behavior\n\n    \n}\n\n\n}\n\n\n// Pass Runnable to Thread constructor!\n\n\nThread\n \nmyThread\n \n=\n \nnew\n \nThread\n(\nnew\n \nSimpleLogic\n());\n\n\nmyThread\n.\nstart\n();\n\n\n\n\n\n\n\n\nRunnable\n-Interface hat 1 Methode -\n Functional Interface!\n\n\nKann mit Lambdas verwendet werden\n\n\n\n\n\n\n\n\nThread\n \nmyThread\n \n=\n \nnew\n \nThread\n(()\n \n-\n \n{\n\n    \n// thread behavior\n\n\n});\n\n\nmyThread\n.\nstart\n();\n\n\n\n\n\n\n\n\nMit \nThread.sleep(t[ms])\n kann der Thread schlafen gelegt werden\n\n\nThread.yield()\n gibt Thread frei, aber wird gleich wieder \nready\n. Provoziert Thread-Wechsel\n\n\nSollte man nicht verwenden, weil OS das Scheduling selbst verwaltet\n\n\n\n\n\n\nt.join()\n wartet solange, bis der Thread \nt\n terminiert\n\n\n\n\nThread\n \nmyThread\n \n=\n \nnew\n \nThread\n(()\n \n-\n \n{\n\n    \n// thread behavior\n\n\n});\n\n\nmyThread\n.\nstart\n();\n\n\n// Thread started\n\n\nmyThread\n.\njoin\n();\n\n\n// Thread finished\n\n\n\n\n\n\n\n\nThreads k\u00f6nnen von Aussen unterbrochen werden mit \nt.interrupt()\n\n\nL\u00f6st \nInterruptedException\n aus\n\n\nWird meist missbraucht zum Aufbrechen von Blockaden (schlecht!)", 
            "title": "2 Multi Threading Grundlagen"
        }, 
        {
            "location": "/ParProg/2_Multi-Threading_Grundlagen/#multi-threading-grundlagen", 
            "text": "", 
            "title": "Multi-Threading Grundlagen"
        }, 
        {
            "location": "/ParProg/2_Multi-Threading_Grundlagen/#motivation", 
            "text": "Reale Prozesse abbilden (Druckjobs, Server-Client)  Perfromance-Steigerung   Seit 2003 stagnieren Taktraten, stattdessen wird mehr auf Hyperthreading und mehrere Kerne gesetzt. Deshalb m\u00fcssen Programme darauf optimiert werden    Hyperthreading (Virtual Threading): Ein CPU-Core hat zwei Register-Sets, aber immer noch nur ein Rechenwerk (ALU)   Ist nicht \"echte\" Parallelisierung", 
            "title": "Motivation"
        }, 
        {
            "location": "/ParProg/2_Multi-Threading_Grundlagen/#parallelitat-vs-nebenlaufigkeit", 
            "text": "Parallelit\u00e4t :  Zerlegung eines Ablaufs in mehrere Teilabl\u00e4ufe, welche gleichzeitig auf mehreren Prozessoren laufen  Nebenl\u00e4ufigkeit  (Concurrency): Gleichzeitig oder verzahnt ausf\u00fchrbare Abl\u00e4ufe, welche auf gemeinsame Ressourcen zugreifen.  \u00c4lteres Prinzip, z.B. Drucker  Kann anschein von Parallelit\u00e4t haben, aber es wird immer nur etwas auf einmal ausgef\u00fchrt", 
            "title": "Parallelit\u00e4t vs. Nebenl\u00e4ufigkeit"
        }, 
        {
            "location": "/ParProg/2_Multi-Threading_Grundlagen/#system-grundlagen-repetition", 
            "text": "", 
            "title": "System Grundlagen Repetition"
        }, 
        {
            "location": "/ParProg/2_Multi-Threading_Grundlagen/#threads", 
            "text": "Parallele Ablaufsequenz innerhalb eines Programms, teilen den Adressraum mit dem ganzen Prozess  Ist g\u00fcnstiger als eigener Prozess, braucht keine eigene Pagetable  Jeder Thread hat eigenen Stack  User-Level-Thread: Im Prozess implementiert, keine echte Parallelit\u00e4t durch mehrere Prozessoren  Kernel-Level-Thread: Im Kernel implementiert, kann Multi-Core ausnutzen. Wechsel per SW-Interrupt, ist also nicht ganz \"gratis\"  Scheduling: Ein CPU-Core kann immer nur ein Thread gleichzeitig ausf\u00fchren. Scheduler teilt die Threads zu  Wenn nur ein Prozessor Threads verarbeitet, ist es eine Quasi-Parallelisierung   Programmierung hat f\u00fcr \"echte\" oder \"quasi\"-Parallelit\u00e4t die gleichen Probleme, weil man nie weiss, wann die Kontextwechsel geschehen    Kontextwechsel   Synchron : Thread wartet auf Bedingung, gibt den Prozessor selbst frei  Asynchron : Nach gewisser Zeit wird der Thread gewzungen, die CPU freizugeben    Multi-Tasking  Kooperativ : Threads m\u00fcssen explizit synchrone Kontextwechsel initiieren  Preemptive : Scheduler unterbricht den Thread  asynchron  in gewissen Zeitintervallen  Heute in der Regel immer  preemptive !      Note  Todo: Bild Folie 30", 
            "title": "Threads"
        }, 
        {
            "location": "/ParProg/2_Multi-Threading_Grundlagen/#grundlagen-java-threads", 
            "text": "JVM ist ein Single Process System  Main-Thread f\u00fchrt die  main() -Methode aus (per Reflection)  Programmierer kann weitere Threads starten  Laufzeitsystem startet auch eigene Threads, z.B. GC  Die JVM l\u00e4uft solange, bis kein (nicht-Daemon-) Thread mehr l\u00e4uft  Daemon-Thread ist z.B. GC, wird bei Ende der JVM unkontrolliert beendet     class   SimpleThread   extends   Thread   { \n     @Override \n     public   void   run ()   { \n         // thread behavior \n\n         // thread ends when run() exits  \n         // (or unhandled exception orccurs) \n     }  }  Thread   myThread   =   new   SimpleThread ();  myThread . start ();    Wenn unbehandelte Exception in Thread auftritt, laufen andere Threads weiter (in Java, andere Umgebungen anders)  Threads laufen ohne Vorkehrungen beliebig verzahnt,  nicht-deterministischer Ablauf!   Runnable Implementierung statt Vererbung:  class   SimpleLogic   implements   Runnable   { \n     @Override \n     public   void   run ()   { \n         // thread behavior \n     }  }  // Pass Runnable to Thread constructor!  Thread   myThread   =   new   Thread ( new   SimpleLogic ());  myThread . start ();    Runnable -Interface hat 1 Methode -  Functional Interface!  Kann mit Lambdas verwendet werden     Thread   myThread   =   new   Thread (()   -   { \n     // thread behavior  });  myThread . start ();    Mit  Thread.sleep(t[ms])  kann der Thread schlafen gelegt werden  Thread.yield()  gibt Thread frei, aber wird gleich wieder  ready . Provoziert Thread-Wechsel  Sollte man nicht verwenden, weil OS das Scheduling selbst verwaltet    t.join()  wartet solange, bis der Thread  t  terminiert   Thread   myThread   =   new   Thread (()   -   { \n     // thread behavior  });  myThread . start ();  // Thread started  myThread . join ();  // Thread finished    Threads k\u00f6nnen von Aussen unterbrochen werden mit  t.interrupt()  L\u00f6st  InterruptedException  aus  Wird meist missbraucht zum Aufbrechen von Blockaden (schlecht!)", 
            "title": "Grundlagen Java Threads"
        }, 
        {
            "location": "/ParProg/3_Thread-Synchronisation/", 
            "text": "Thread Synchronisation\n\n\n\n\nNote\n\n\nThread.currentThread().join()\n \n\n\nProgramm wartet ewig, weil es auf die Beendigung von sich selbst wartet\n\n\n\n\n\n\nSynchronisation = Einschr\u00e4nkung der Nebenl\u00e4ufigkeit\n\n\nF\u00e4lle f\u00fcr Synchronisation\n\n\nGegenseitiger Ausschluss: Eine Ressource kann nur von jemandem auf einmal benutzt werden\n\n\nWarten auf Bedingung\n\n\n\n\n\n\n\n\nGemeinsame Ressourcen\n\n\n\n\nThreads k\u00f6nnen sich gegenseitig st\u00f6ren, weil sie sich Adressraum und Heap teilen\n\n\nIn Java k\u00f6nnen lokale Variablen (closure) von Threads nur read-only zugegriffen werden\n\n\n\n\nKritische Abschnitte\n\n\n\n\nRace Condition: Fehler aufgrund von unkontrollierter Nebenl\u00e4ufigkeit\n\n\nRace Condition Szenario\n\n\nBeide Threads lesen die aktuelle Balance nacheinander in ein Register\n\n\nDer zweite Thread, der die Balance zur\u00fcck schreibt, \u00fcberschreibt den anderen Wert\n\n\n-\n Lost Update\n\n\n\n\n\n\nEin Programmst\u00fcck, dass eine Race Condition verursachen k\u00f6nnte, ist eine \"Critical Section\"\n\n\nNaiver Ansatz: \"Locked\"-Boolean einf\u00fchren und evtl. warten, bis \nlocked == false\n ist\n\n\nProblem: Pr\u00fcfung des boolean und Zuweisung nicht atomar -\n Gleiches Problem wie vorher\n\n\n\n\n\n\n\n\nGegenseitiger Ausschluss\n\n\n\n\nEigene Implementierung nicht trivial (gibt spezielle Algorithmen)\n\n\nWeitere Probleme mit CPU-Optimierungen, Reihenfolge der Instruktionen ist nicht garantiert\n\n\nBusy-Waiting (Endlosschleife) ist ineffizient\n\n\n\n\nJava Monitor Konzept\n\n\npublic\n \nsynchronized\n \nvoid\n \ndeposit\n(\nint\n \namount\n)\n \n{\n\n    \nthis\n.\nbalance\n \n+=\n \namount\n;\n \n// Kritischer Abschnitt\n\n\n}\n\n\n\n\n\n\n\n\nBody der Funktion wird unter gegenseitigem Ausschluss ausgef\u00fchrt\n\n\nNur ein Thread auf einmal kann die Methode ausf\u00fchren\n\n\nBei jedem Eintritt wird das Objekt gelockt (Monitor-Lock)\n\n\n\n\nGilt f\u00fcr das ganze Objekt, auch andere synchronized-Methoden schliessen sich gegenseitig aus\n\n\n\n\n\n\nFreigabe des Locks bei Ende, return oder unhandled Exception\n\n\n\n\n\n\nRecursive Locks: \nsynchronized\n Method ruft andere \nsynchronized\n Method auf (nested Lock)\n\n\n\n\nIst in Java kein Problem, in anderen Sprachen u.U. schon\n\n\n\n\n\n\n\n\nSynchronized Statements\n\n\n\n\nsynchronized(object) { statements }\n\n\nobject\n bezieht sich auf das Objekt, das gelockt wird\n\n\nBei \nsynchronized\n mit Static-Klassen wird \nclass\n.class\n mitgegeben, dann wird die Klasse gelockt (Singleton)\n\n\n\n\nWarten auf Bedingung\n\n\n\n\nNaiver Ansatz: in Schleife warten, bis Bedingung erf\u00fcllt\n\n\nFunktioniert nicht: Lock wird nicht aufgel\u00f6st, es kann niemand anders das Objekt bearbeiten\n\n\nIneffizent, immer zu pollen\n\n\n\n\n\n\n\n\nWait \n Signal\n\n\n\n\nMonitor: Gegenseitiger Ausschluss + Wait \n Signal Mechanismus\n\n\nNur ein Thread kann \"im Monitor\" sein\n\n\nSpezieller Wartebereich f\u00fcr Threads, die auf eine Bedingung warten\n\n\nSie werden signalisiert, sobald die Bedingung erf\u00fcllt ist\n\n\n\n\nclass\n \nBankAccount\n \n{\n\n    \nprivate\n \nint\n \nbalance\n \n=\n \n0\n;\n\n    \npublic\n \nsynchronized\n \nvoid\n \nwithdraw\n(\nint\n \namount\n)\n\n        \nthrows\n \nInterruptedException\n \n{\n\n        \nwhile\n \n(\namount\n \n \nbalance\n)\n \n{\n\n            \nwait\n();\n\n        \n}\n\n        \nbalance\n \n-=\n \namount\n;\n\n        \n}\n\n    \npublic\n \nsynchronized\n \nvoid\n \ndeposit\n(\nint\n \namount\n)\n \n{\n\n        \nbalance\n \n+=\n \namount\n;\n\n        \nnotifyAll\n();\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\n\nwait()\n setzt den Thread in die Warteschlange zum Warten auf eine Bedingung\n\n\nnotifyAll()\n weckt alle im Monitor wartenden Thread auf\n\n\nBeh\u00e4lt aber den Monitor-Lock f\u00fcr weitere Instruktionen (\"Single and Continue\")\n\n\n\n\n\n\nEin aufgeweckter Thread geht wieder in den \"\u00e4usseren\" Warteraum, genau wie alle anderen eintrittswilligen Threads\n\n\n\n\n\n\n\n\nWieso funktioniert das?\n\n\nwait()\n setzt sich in den \"Warteraum\" und gibt den Monitor (den Lock auf das Objekt) frei\n\n\n\n\n\n\nnotify()\n weckt einen \nbeliebigen\n Thread im \"Warteraum\" auf\n\n\nDie Reihenfolge im \"Warteraum\" ist in Java nicht spezifiziert (in .NET FIFO)\n\n\nSpurious Wakeup: Ein wartender Thread kann \"f\u00e4lschlicherweise\" aufgeweckt werden, ohne dass \nnotify\n aufgerufen wurde\n\n\nProblem von POSIX-Threads\n\n\n\n\n\n\n\n\n\n\nFallstricke beim Java Monitor\n\n\nWait mit If\n\n\n\n\nNach dem \nwait()\n muss die Bedingung wieder \u00fcberpr\u00fcft werden\n\n\nIn der Zwischenzeit k\u00f6nnte nach dem \nnotify()\n und vor dem Eintreten die Bedingung wieder invalidiert werden\n\n\nDaher: \nwhile (!conditioin) { wait(); }\n\n\n\n\n\n\n\n\nSingle-Notify\n\n\n\n\nnotify()\n weckt ein beliebiger einzelner Thread auf\n\n\nWenn immer ein falscher Thread aufgeweckt wird, terminiert das Programm nie\n\n\nL\u00f6sung: \nnotifyAll()\n verwenden\n\n\n\n\nEffizenz-Probleme\n\n\n\n\nnotifyAll()\n weckt alle auf, bei vielen Threads ist das viel Overhead f\u00fcr die \u00dcberpr\u00fcfung der Bedingung\n\n\nKeine Fairness: Keine Warteschlange spezifiziert\n\n\nSignal-and-Continue: Informierte muss neu anstehen und k\u00f6nnen st\u00e4ndig \u00fcberholt werden\n\n\nAuch bei FIFO (.NET) nicht garantiert fair", 
            "title": "3 Thread Synchronisation"
        }, 
        {
            "location": "/ParProg/3_Thread-Synchronisation/#thread-synchronisation", 
            "text": "Note  Thread.currentThread().join()    Programm wartet ewig, weil es auf die Beendigung von sich selbst wartet    Synchronisation = Einschr\u00e4nkung der Nebenl\u00e4ufigkeit  F\u00e4lle f\u00fcr Synchronisation  Gegenseitiger Ausschluss: Eine Ressource kann nur von jemandem auf einmal benutzt werden  Warten auf Bedingung", 
            "title": "Thread Synchronisation"
        }, 
        {
            "location": "/ParProg/3_Thread-Synchronisation/#gemeinsame-ressourcen", 
            "text": "Threads k\u00f6nnen sich gegenseitig st\u00f6ren, weil sie sich Adressraum und Heap teilen  In Java k\u00f6nnen lokale Variablen (closure) von Threads nur read-only zugegriffen werden", 
            "title": "Gemeinsame Ressourcen"
        }, 
        {
            "location": "/ParProg/3_Thread-Synchronisation/#kritische-abschnitte", 
            "text": "Race Condition: Fehler aufgrund von unkontrollierter Nebenl\u00e4ufigkeit  Race Condition Szenario  Beide Threads lesen die aktuelle Balance nacheinander in ein Register  Der zweite Thread, der die Balance zur\u00fcck schreibt, \u00fcberschreibt den anderen Wert  -  Lost Update    Ein Programmst\u00fcck, dass eine Race Condition verursachen k\u00f6nnte, ist eine \"Critical Section\"  Naiver Ansatz: \"Locked\"-Boolean einf\u00fchren und evtl. warten, bis  locked == false  ist  Problem: Pr\u00fcfung des boolean und Zuweisung nicht atomar -  Gleiches Problem wie vorher", 
            "title": "Kritische Abschnitte"
        }, 
        {
            "location": "/ParProg/3_Thread-Synchronisation/#gegenseitiger-ausschluss", 
            "text": "Eigene Implementierung nicht trivial (gibt spezielle Algorithmen)  Weitere Probleme mit CPU-Optimierungen, Reihenfolge der Instruktionen ist nicht garantiert  Busy-Waiting (Endlosschleife) ist ineffizient", 
            "title": "Gegenseitiger Ausschluss"
        }, 
        {
            "location": "/ParProg/3_Thread-Synchronisation/#java-monitor-konzept", 
            "text": "public   synchronized   void   deposit ( int   amount )   { \n     this . balance   +=   amount ;   // Kritischer Abschnitt  }    Body der Funktion wird unter gegenseitigem Ausschluss ausgef\u00fchrt  Nur ein Thread auf einmal kann die Methode ausf\u00fchren  Bei jedem Eintritt wird das Objekt gelockt (Monitor-Lock)   Gilt f\u00fcr das ganze Objekt, auch andere synchronized-Methoden schliessen sich gegenseitig aus    Freigabe des Locks bei Ende, return oder unhandled Exception    Recursive Locks:  synchronized  Method ruft andere  synchronized  Method auf (nested Lock)   Ist in Java kein Problem, in anderen Sprachen u.U. schon", 
            "title": "Java Monitor Konzept"
        }, 
        {
            "location": "/ParProg/3_Thread-Synchronisation/#synchronized-statements", 
            "text": "synchronized(object) { statements }  object  bezieht sich auf das Objekt, das gelockt wird  Bei  synchronized  mit Static-Klassen wird  class .class  mitgegeben, dann wird die Klasse gelockt (Singleton)", 
            "title": "Synchronized Statements"
        }, 
        {
            "location": "/ParProg/3_Thread-Synchronisation/#warten-auf-bedingung", 
            "text": "Naiver Ansatz: in Schleife warten, bis Bedingung erf\u00fcllt  Funktioniert nicht: Lock wird nicht aufgel\u00f6st, es kann niemand anders das Objekt bearbeiten  Ineffizent, immer zu pollen", 
            "title": "Warten auf Bedingung"
        }, 
        {
            "location": "/ParProg/3_Thread-Synchronisation/#wait-signal", 
            "text": "Monitor: Gegenseitiger Ausschluss + Wait   Signal Mechanismus  Nur ein Thread kann \"im Monitor\" sein  Spezieller Wartebereich f\u00fcr Threads, die auf eine Bedingung warten  Sie werden signalisiert, sobald die Bedingung erf\u00fcllt ist   class   BankAccount   { \n     private   int   balance   =   0 ; \n     public   synchronized   void   withdraw ( int   amount ) \n         throws   InterruptedException   { \n         while   ( amount     balance )   { \n             wait (); \n         } \n         balance   -=   amount ; \n         } \n     public   synchronized   void   deposit ( int   amount )   { \n         balance   +=   amount ; \n         notifyAll (); \n     }  }    wait()  setzt den Thread in die Warteschlange zum Warten auf eine Bedingung  notifyAll()  weckt alle im Monitor wartenden Thread auf  Beh\u00e4lt aber den Monitor-Lock f\u00fcr weitere Instruktionen (\"Single and Continue\")    Ein aufgeweckter Thread geht wieder in den \"\u00e4usseren\" Warteraum, genau wie alle anderen eintrittswilligen Threads     Wieso funktioniert das?  wait()  setzt sich in den \"Warteraum\" und gibt den Monitor (den Lock auf das Objekt) frei    notify()  weckt einen  beliebigen  Thread im \"Warteraum\" auf  Die Reihenfolge im \"Warteraum\" ist in Java nicht spezifiziert (in .NET FIFO)  Spurious Wakeup: Ein wartender Thread kann \"f\u00e4lschlicherweise\" aufgeweckt werden, ohne dass  notify  aufgerufen wurde  Problem von POSIX-Threads", 
            "title": "Wait &amp; Signal"
        }, 
        {
            "location": "/ParProg/3_Thread-Synchronisation/#fallstricke-beim-java-monitor", 
            "text": "", 
            "title": "Fallstricke beim Java Monitor"
        }, 
        {
            "location": "/ParProg/3_Thread-Synchronisation/#wait-mit-if", 
            "text": "Nach dem  wait()  muss die Bedingung wieder \u00fcberpr\u00fcft werden  In der Zwischenzeit k\u00f6nnte nach dem  notify()  und vor dem Eintreten die Bedingung wieder invalidiert werden  Daher:  while (!conditioin) { wait(); }", 
            "title": "Wait mit If"
        }, 
        {
            "location": "/ParProg/3_Thread-Synchronisation/#single-notify", 
            "text": "notify()  weckt ein beliebiger einzelner Thread auf  Wenn immer ein falscher Thread aufgeweckt wird, terminiert das Programm nie  L\u00f6sung:  notifyAll()  verwenden", 
            "title": "Single-Notify"
        }, 
        {
            "location": "/ParProg/3_Thread-Synchronisation/#effizenz-probleme", 
            "text": "notifyAll()  weckt alle auf, bei vielen Threads ist das viel Overhead f\u00fcr die \u00dcberpr\u00fcfung der Bedingung  Keine Fairness: Keine Warteschlange spezifiziert  Signal-and-Continue: Informierte muss neu anstehen und k\u00f6nnen st\u00e4ndig \u00fcberholt werden  Auch bei FIFO (.NET) nicht garantiert fair", 
            "title": "Effizenz-Probleme"
        }, 
        {
            "location": "/ParProg/4_Synchronisationsprimitiven/", 
            "text": "Note\n\n\nQuiz letzte Vorlesung: \nnotify()\n reicht, da nur auf eine Bedingung gewartet wird, und nur ein einziger Thread darf weiter machen (One-In/One-Out)\n\n\n\n\nSymaphor\n\n\n\n\nVon Dijkstra, kommt von Eisenbahn-Signalen\n\n\nIst ein Z\u00e4hler mit der Anzahl noch freier Ressourcen\n\n\nacquire()\n: Beziehe freie Ressource oder warte, Z\u00e4hler dekrementieren\n\n\nrelease()\n: Ressource freigeben, Z\u00e4hler inkrementieren\n\n\nMonitor-Nachbau ist nicht garantiert fair, weil \nnotify()\n ein beliebiger Thread weckt\n\n\nBin\u00e4re Sempahore: \n\u01f9ew Semaphore(1)\n, gegenseitiger Ausschluss\n\n\nKann in Java auch negativ initialisiert werden (nicht bei .NET)\n\n\nFaire Semaphore: \nnew Sempahore(N, true)\n\n\nBenutzt FIFO-Warteschlange\n\n\nAllerdings langsamer als \"unfaire\" Variante\n\n\n\n\n\n\nAnwendung BoundedBuffer:\n\n\nMit Semaphoren deutlich schneller als mit Monitor (ca. 3x)\n\n\nGrund: \nnotifyAll()\n fallen weg, es m\u00fcssen nicht immer alle Threads aufgeweckt werden\n\n\n\"Faire\" Variante ist etwa gleich schnell\n\n\n\n\n\n\n\n\nLock \n Condition\n\n\n\n\nSpezialfall des Monitors\n\n\nVerschiedene Wartelisten f\u00fcr mehrere Bedingungen\n\n\nNotify geht auf eine der \"Warter\u00e4ume\"\n\n\nIn Java unabh\u00e4ngig vom Java Monitor, muss selbst nachgebaut werden\n\n\nAuf einen Lock (analog \nsynchronized\n) k\u00f6nnen mehrer Conditions definiert werden\n\n\nLock kann \"fair\" sein\n\n\n\n\nprivate\n \nLock\n \nmonitor\n \n=\n \nnew\n \nReentrantLock\n(\ntrue\n);\n\n\nprivate\n \nCondition\n \nnonFull\n \n=\n \nmonitor\n.\nnewCondition\n();\n\n\nprivate\n \nCondition\n \nnonEmpty\n \n=\n \nmonitor\n.\nnewCondition\n();\n\n\n\n\n\n\npublic\n \nvoid\n \nput\n(\nT\n \nitem\n)\n \nthrows\n \nInterruptedException\n \n{\n\n    \nmonitor\n.\nlock\n();\n\n    \ntry\n \n{\n\n        \nwhile\n \n(\nqueue\n.\nsize\n()\n \n==\n \nCapacity\n)\n \n{\n \n            \nnonFull\n.\nawait\n();\n\n        \n}\n\n        \nqueue\n.\nadd\n(\nitem\n);\n\n        \nnonEmpty\n.\nsignal\n();\n\n    \n}\n \nfinally\n \n{\n \nmonitor\n.\nunlock\n();\n \n}\n\n\n}\n\n\n// Analog f\u00fcr get()\n\n\n\n\n\n\n\n\nsignal()\n notifiziert ein beliebiger Thread f\u00fcr diese Condition, \nsignalAll()\n alle\n\n\n\u00dcberholen ist weiterhin ein Problem, da die aufgeweckten Threads wieder in den \"normalen\" Warteraum kommen\n\n\n\n\nRead-Write Lock\n\n\n\n\nErlaube parallele Lese-Zugriffe\n\n\nSchreibzugriffe mit gegenseitigem Ausschluss\n\n\n\n\nReadWriteLock\n \nrwLock\n \n=\n \nnew\n \nReentrantReadWriteLock\n(\ntrue\n);\n\n\nrwLock\n.\nreadLock\n().\nlock\n();\n\n\n// read-only accesses\n\n\nrwLock\n.\nreadLock\n().\nunlock\n();\n\n\n\nrwLock\n.\nwriteLock\n().\nlock\n();\n\n\n// write (and read) accesses\n\n\nrwLock\n.\nwriteLock\n().\nunlock\n();\n\n\n\n\n\n\n\n\nDer WriteLock ist gleich wie der Lock bei Lock \n Condition\n\n\n\n\nCount Down Latch\n\n\n\n\nZeitlicher Synchronisationspunkt von mehreren Threads\n\n\n\n\nN Threads warten auf Control-Thread, Control-Thread wartet auf N Threads und gibt \"Startsignal\"\n\n\n\n\n\n\nCount Down Latch hat Z\u00e4hler und wartet, bis er 0 wird\n\n\n\n\nThreads k\u00f6nnen Z\u00e4hler dekrementieren mit \ncountDown()\n\n\n\n\nCountDownLatch\n \ncarsReady\n \n=\n \nnew\n \nCountDownLatch\n(\nN\n);\n\n\nCountDownLatch\n \nstartSignal\n \n=\n \nnew\n \nCountDownLatch\n(\n1\n);\n\n\n\n// N Cars\n\n\ncarsReady\n.\ncountDown\n();\n\n\nstartSignal\n.\nawait\n();\n\n\n\n// 1 RaceControl\n\n\ncarsReady\n.\nawait\n();\n\n\nstartSignal\n.\ncountDown\n();\n\n\n\n\n\n\n\n\nGeht auch mit Multi-Release/-Aquire Semaphore\n\n\nCountDown l\u00e4sst sich nicht wieder hochsetzen\n\n\n\n\nCyclic Barrier\n\n\n\n\nN Threads warten aufeinander\n\n\nawait()\n blockiert, bis N Threads \nawait()\n aufgerufen haben\n\n\nKann wiederverwendet werden\n\n\n\n\nCyclicBarrier\n \ngameRound\n \n=\n \nnew\n \nCyclicBarrier\n(\nN\n);\n\n\n\n// Bei N Players:               \n\n\nwhile\n \n(\ntrue\n)\n \n{\n\n    \ngameRound\n.\nawait\n();\n\n    \n// play concurrently with others\n\n\n}\n\n\n// Mehrere Runden\n\n\n\n\n\n\n\n\nWenn ein Thread im \nawait()\n eine Exception wirft, ist die Barriere kaputt\n\n\nPhaser\n: Kann zus\u00e4tzlich Teilnehmer im nachhinein an- und abmelden\n\n\n\n\nExchanger\n\n\n\n\n\"Rende-vouz\": Barriere mit zwei Parteien und tauschen etwas aus\n\n\n`exchange(v) Blockiert, bis anderer Thread auch exchange() aufruft\n\n\nLiefert Argument x des jeweils anderen Threads", 
            "title": "4 Synchronisationsprimitiven"
        }, 
        {
            "location": "/ParProg/4_Synchronisationsprimitiven/#symaphor", 
            "text": "Von Dijkstra, kommt von Eisenbahn-Signalen  Ist ein Z\u00e4hler mit der Anzahl noch freier Ressourcen  acquire() : Beziehe freie Ressource oder warte, Z\u00e4hler dekrementieren  release() : Ressource freigeben, Z\u00e4hler inkrementieren  Monitor-Nachbau ist nicht garantiert fair, weil  notify()  ein beliebiger Thread weckt  Bin\u00e4re Sempahore:  \u01f9ew Semaphore(1) , gegenseitiger Ausschluss  Kann in Java auch negativ initialisiert werden (nicht bei .NET)  Faire Semaphore:  new Sempahore(N, true)  Benutzt FIFO-Warteschlange  Allerdings langsamer als \"unfaire\" Variante    Anwendung BoundedBuffer:  Mit Semaphoren deutlich schneller als mit Monitor (ca. 3x)  Grund:  notifyAll()  fallen weg, es m\u00fcssen nicht immer alle Threads aufgeweckt werden  \"Faire\" Variante ist etwa gleich schnell", 
            "title": "Symaphor"
        }, 
        {
            "location": "/ParProg/4_Synchronisationsprimitiven/#lock-condition", 
            "text": "Spezialfall des Monitors  Verschiedene Wartelisten f\u00fcr mehrere Bedingungen  Notify geht auf eine der \"Warter\u00e4ume\"  In Java unabh\u00e4ngig vom Java Monitor, muss selbst nachgebaut werden  Auf einen Lock (analog  synchronized ) k\u00f6nnen mehrer Conditions definiert werden  Lock kann \"fair\" sein   private   Lock   monitor   =   new   ReentrantLock ( true );  private   Condition   nonFull   =   monitor . newCondition ();  private   Condition   nonEmpty   =   monitor . newCondition ();   public   void   put ( T   item )   throws   InterruptedException   { \n     monitor . lock (); \n     try   { \n         while   ( queue . size ()   ==   Capacity )   {  \n             nonFull . await (); \n         } \n         queue . add ( item ); \n         nonEmpty . signal (); \n     }   finally   {   monitor . unlock ();   }  }  // Analog f\u00fcr get()    signal()  notifiziert ein beliebiger Thread f\u00fcr diese Condition,  signalAll()  alle  \u00dcberholen ist weiterhin ein Problem, da die aufgeweckten Threads wieder in den \"normalen\" Warteraum kommen", 
            "title": "Lock &amp; Condition"
        }, 
        {
            "location": "/ParProg/4_Synchronisationsprimitiven/#read-write-lock", 
            "text": "Erlaube parallele Lese-Zugriffe  Schreibzugriffe mit gegenseitigem Ausschluss   ReadWriteLock   rwLock   =   new   ReentrantReadWriteLock ( true );  rwLock . readLock (). lock ();  // read-only accesses  rwLock . readLock (). unlock ();  rwLock . writeLock (). lock ();  // write (and read) accesses  rwLock . writeLock (). unlock ();    Der WriteLock ist gleich wie der Lock bei Lock   Condition", 
            "title": "Read-Write Lock"
        }, 
        {
            "location": "/ParProg/4_Synchronisationsprimitiven/#count-down-latch", 
            "text": "Zeitlicher Synchronisationspunkt von mehreren Threads   N Threads warten auf Control-Thread, Control-Thread wartet auf N Threads und gibt \"Startsignal\"    Count Down Latch hat Z\u00e4hler und wartet, bis er 0 wird   Threads k\u00f6nnen Z\u00e4hler dekrementieren mit  countDown()   CountDownLatch   carsReady   =   new   CountDownLatch ( N );  CountDownLatch   startSignal   =   new   CountDownLatch ( 1 );  // N Cars  carsReady . countDown ();  startSignal . await ();  // 1 RaceControl  carsReady . await ();  startSignal . countDown ();    Geht auch mit Multi-Release/-Aquire Semaphore  CountDown l\u00e4sst sich nicht wieder hochsetzen", 
            "title": "Count Down Latch"
        }, 
        {
            "location": "/ParProg/4_Synchronisationsprimitiven/#cyclic-barrier", 
            "text": "N Threads warten aufeinander  await()  blockiert, bis N Threads  await()  aufgerufen haben  Kann wiederverwendet werden   CyclicBarrier   gameRound   =   new   CyclicBarrier ( N );  // Bei N Players:                 while   ( true )   { \n     gameRound . await (); \n     // play concurrently with others  }  // Mehrere Runden    Wenn ein Thread im  await()  eine Exception wirft, ist die Barriere kaputt  Phaser : Kann zus\u00e4tzlich Teilnehmer im nachhinein an- und abmelden", 
            "title": "Cyclic Barrier"
        }, 
        {
            "location": "/ParProg/4_Synchronisationsprimitiven/#exchanger", 
            "text": "\"Rende-vouz\": Barriere mit zwei Parteien und tauschen etwas aus  `exchange(v) Blockiert, bis anderer Thread auch exchange() aufruft  Liefert Argument x des jeweils anderen Threads", 
            "title": "Exchanger"
        }, 
        {
            "location": "/ParProg/4_Weitere_Synchronisationsprimitiven/", 
            "text": "", 
            "title": "4 Weitere Synchronisationsprimitiven"
        }, 
        {
            "location": "/PhAI/0_Index/", 
            "text": "Physik Anwendungen f\u00fcr Informatik\n\n\n\n\nExam Notes", 
            "title": "0 Index"
        }, 
        {
            "location": "/PhAI/0_Index/#physik-anwendungen-fur-informatik", 
            "text": "Exam Notes", 
            "title": "Physik Anwendungen f\u00fcr Informatik"
        }, 
        {
            "location": "/PhAI/1_Exam/", 
            "text": "Some exam notes...", 
            "title": "1 Exam"
        }, 
        {
            "location": "/SE2/0_Index/", 
            "text": "Software Engineering 2\n\n\n\n\nExam Notes", 
            "title": "0 Index"
        }, 
        {
            "location": "/SE2/0_Index/#software-engineering-2", 
            "text": "Exam Notes", 
            "title": "Software Engineering 2"
        }, 
        {
            "location": "/SE2/1_Exam/", 
            "text": "Some exam notes...", 
            "title": "1 Exam"
        }, 
        {
            "location": "/SE2/2_Project_Automation/", 
            "text": "Note\n\n\nkontakt: mmeili\n\n\n\n\nLeitsatz: \"Automate everything you need to do more than once\"\n\n\nIdee: Build-Script\n\n\n\n\nPro\n\n\nCompile, unit test, package, integration test, deploy automatisiert\n\n\nWiederholbar\n\n\ncan automatisch scheduled werden\n\n\n\n\n\n\nCon\n\n\nnon-interactive process, man kann nicht eingreifen\n\n\nMaintenace und Erweiterung ist m\u00fchsam\n\n\nMeist platform-abh\u00e4ngig (Batch, bash)\n\n\n\n\n\n\n\n\nZiele\n\n\n\n\nCRISP\n\n\nComplete: Jeder Build wird von neu auf aufgebaut\n\n\nRepeatable: Wiederverwendbar, auch mit \u00e4lteren Versionen\n\n\nInformative: Feedback \u00fcber den Prozess, z.B. Testresultate\n\n\nSchedulable\n\n\nPortable: Nicht nur auf lokaler Maschine ausf\u00fchrbar\n\n\n\n\n\n\nFlexibilit\u00e4t: Indiviuelle Tasks ausf\u00fchren\n\n\n\n\nBuild Tools\n\n\nImperative Build Tools\n\n\n\n\nMake-Familie: Den DA-Graphen wird explizit definiert (Abh\u00e4ngigkeiten)\n\n\nPros\n\n\nSehr flexibel und m\u00e4chtig\n\n\n\n\n\n\nCons\n\n\nKomplexe Definitionen\n\n\nSchwierig wiederzuverwenden\n\n\nViel copy-paste\n\n\n\n\n\n\n\n\nDeclarative Build Tools\n\n\n\n\nz.B. Maven, Gradle\n\n\nDeklarativ: Wie soll das Ergebnis aussehen?\n\n\nConvention over Configuration (nur konfigurieren, was nicht default ist)\n\n\nProjekt-Struktur ist meist default vorgegeben\n\n\nresources-Verzeichnis ist read-only!\n\n\n\n\n\n\nPros\n\n\nK\u00fcrzere files\n\n\nWiederverwendbare Logik\n\n\nDependeny Management\n\n\n\n\n\n\nCons\n\n\nWeniger flexibel\n\n\nStrenge Projektstruktur\n\n\n\n\n\n\n\n\nContinuous Integration\n\n\n\n\nMaintain a single source repository\n\n\nAutomate the build\n\n\nMake the build self-testing\n\n\nEveryone commits to the mainline every day\n\n\nEvery commit to the mainline should be built\n\n\nKeep the build fast\n\n\nTest in a clone of the production environment\n\n\nMake it easy to get the latest deliverables\n\n\nEveryone can see what\u2019s happening\n\n\nAutomate deployment", 
            "title": "2 Project Automation"
        }, 
        {
            "location": "/SE2/2_Project_Automation/#idee-build-script", 
            "text": "Pro  Compile, unit test, package, integration test, deploy automatisiert  Wiederholbar  can automatisch scheduled werden    Con  non-interactive process, man kann nicht eingreifen  Maintenace und Erweiterung ist m\u00fchsam  Meist platform-abh\u00e4ngig (Batch, bash)", 
            "title": "Idee: Build-Script"
        }, 
        {
            "location": "/SE2/2_Project_Automation/#ziele", 
            "text": "CRISP  Complete: Jeder Build wird von neu auf aufgebaut  Repeatable: Wiederverwendbar, auch mit \u00e4lteren Versionen  Informative: Feedback \u00fcber den Prozess, z.B. Testresultate  Schedulable  Portable: Nicht nur auf lokaler Maschine ausf\u00fchrbar    Flexibilit\u00e4t: Indiviuelle Tasks ausf\u00fchren", 
            "title": "Ziele"
        }, 
        {
            "location": "/SE2/2_Project_Automation/#build-tools", 
            "text": "", 
            "title": "Build Tools"
        }, 
        {
            "location": "/SE2/2_Project_Automation/#imperative-build-tools", 
            "text": "Make-Familie: Den DA-Graphen wird explizit definiert (Abh\u00e4ngigkeiten)  Pros  Sehr flexibel und m\u00e4chtig    Cons  Komplexe Definitionen  Schwierig wiederzuverwenden  Viel copy-paste", 
            "title": "Imperative Build Tools"
        }, 
        {
            "location": "/SE2/2_Project_Automation/#declarative-build-tools", 
            "text": "z.B. Maven, Gradle  Deklarativ: Wie soll das Ergebnis aussehen?  Convention over Configuration (nur konfigurieren, was nicht default ist)  Projekt-Struktur ist meist default vorgegeben  resources-Verzeichnis ist read-only!    Pros  K\u00fcrzere files  Wiederverwendbare Logik  Dependeny Management    Cons  Weniger flexibel  Strenge Projektstruktur", 
            "title": "Declarative Build Tools"
        }, 
        {
            "location": "/SE2/2_Project_Automation/#continuous-integration", 
            "text": "Maintain a single source repository  Automate the build  Make the build self-testing  Everyone commits to the mainline every day  Every commit to the mainline should be built  Keep the build fast  Test in a clone of the production environment  Make it easy to get the latest deliverables  Everyone can see what\u2019s happening  Automate deployment", 
            "title": "Continuous Integration"
        }, 
        {
            "location": "/SE2/3_SE_Practises/", 
            "text": "Software Engineering Practices\n\n\nRequirements Practises\n\n\nDig for Requirements\n\n\n\n\nMit dem Kunden zusammen arbeiten\n\n\nDenken aus Benutzersicht\n\n\n\"W\u00fcnsche\" von echten Anforderungen trennen\n\n\nGr\u00fcnde hinterfragen\n\n\n\n\n\n\nGen\u00fcgend abstrakt definieren, Details k\u00f6nnen schnell \u00e4ndern\n\n\nWenn zu genau spezifiziert, werden sie genau so implementiert und sind nicht erweiterbar\n\n\n\n\n\n\n\n\nMake Quality a Requirement\n\n\n\n\nQualit\u00e4t als NF-Anforderungen\n\n\nM\u00f6glichst testbar machen\n\n\nBasierend auf echten Anforderungen von Benuzter-Bed\u00fcrfnissen\n\n\nSind schwieriger zu ermitteln, oft unter-/un- bewusst\n\n\nErmittlungstechniken\n\n\nChecklisten (Brainstorming)\n\n\nBefragen, Beobachten\n\n\n\n\n\n\nGrosser Einfluss auf Architekturentscheidungen\n\n\nevtl. Referenzsystem festlegen f\u00fcr Performance-Tests\n\n\n\n\nDeal with Changes\n\n\n\n\nEs gibt keine \"stabilen\" Requirements\n\n\nM\u00f6glichst flexibles Design\n\n\n\n\nDesign Practises\n\n\nDRY\n\n\n\n\nCode-Redundanz ist schlecht, nicht wartbar\n\n\nAuch in Code-Doku redundante Beschreibungen vermeiden\n\n\n\n\nAchieve Orthogonality\n\n\n\n\n\"Eliminate effects between unrelated things\"\n\n\nKeine Kopplung zwischen konzeptionell unabh\u00e4ngiger Konzepte\n\n\nLow Coupling / High Cohesion\n\n\nArchitektur sollte keine Zyklen haben (DAG)\n\n\nSonst schwer auszutauschen\n\n\nKeine Wiederverwendbarkeit\n\n\nNicht sauber testbar\n\n\n\n\n\n\n\n\nDesign to Test\n\n\n\n\nVor Entwicklungszeit betrachten, da es Architetktur beeinflusst\n\n\n\n\nImplementation Practises\n\n\nFix broken Windows\n\n\n\n\n\"Broken Window Syndrom\": Wenn Probleme nicht behoben werden, bleiben sie bestehen\n\n\nProbleme beheben, wenn sie entstehen\n\n\nRefactoring / Code Reviews\n\n\n\n\nRefactor early and often\n\n\n\n\nRefactoring als Prozess definieren\n\n\nGute Tests for Refactoring haben, um nicht Fehler einzubauen\n\n\n\n\nProgram Deliberately\n\n\n\n\nNicht auf \"gut Gl\u00fcck\" programmieren\n\n\nSpezifikation lesen (vor allem bei Paral. Progr.)\n\n\n\n\nVerification Practises\n\n\nTest rigorously\n\n\n\n\nfr\u00fch, h\u00e4ufig, automatisch testen\n\n\n\"Find Issues Once\": F\u00fcr gefundene Fehler Tests schreiben\n\n\nIntegration Tests genauso wichtig wie Unit Tests\n\n\n\n\nPerform Reviews", 
            "title": "3 SE Practises"
        }, 
        {
            "location": "/SE2/3_SE_Practises/#software-engineering-practices", 
            "text": "", 
            "title": "Software Engineering Practices"
        }, 
        {
            "location": "/SE2/3_SE_Practises/#requirements-practises", 
            "text": "", 
            "title": "Requirements Practises"
        }, 
        {
            "location": "/SE2/3_SE_Practises/#dig-for-requirements", 
            "text": "Mit dem Kunden zusammen arbeiten  Denken aus Benutzersicht  \"W\u00fcnsche\" von echten Anforderungen trennen  Gr\u00fcnde hinterfragen    Gen\u00fcgend abstrakt definieren, Details k\u00f6nnen schnell \u00e4ndern  Wenn zu genau spezifiziert, werden sie genau so implementiert und sind nicht erweiterbar", 
            "title": "Dig for Requirements"
        }, 
        {
            "location": "/SE2/3_SE_Practises/#make-quality-a-requirement", 
            "text": "Qualit\u00e4t als NF-Anforderungen  M\u00f6glichst testbar machen  Basierend auf echten Anforderungen von Benuzter-Bed\u00fcrfnissen  Sind schwieriger zu ermitteln, oft unter-/un- bewusst  Ermittlungstechniken  Checklisten (Brainstorming)  Befragen, Beobachten    Grosser Einfluss auf Architekturentscheidungen  evtl. Referenzsystem festlegen f\u00fcr Performance-Tests", 
            "title": "Make Quality a Requirement"
        }, 
        {
            "location": "/SE2/3_SE_Practises/#deal-with-changes", 
            "text": "Es gibt keine \"stabilen\" Requirements  M\u00f6glichst flexibles Design", 
            "title": "Deal with Changes"
        }, 
        {
            "location": "/SE2/3_SE_Practises/#design-practises", 
            "text": "", 
            "title": "Design Practises"
        }, 
        {
            "location": "/SE2/3_SE_Practises/#dry", 
            "text": "Code-Redundanz ist schlecht, nicht wartbar  Auch in Code-Doku redundante Beschreibungen vermeiden", 
            "title": "DRY"
        }, 
        {
            "location": "/SE2/3_SE_Practises/#achieve-orthogonality", 
            "text": "\"Eliminate effects between unrelated things\"  Keine Kopplung zwischen konzeptionell unabh\u00e4ngiger Konzepte  Low Coupling / High Cohesion  Architektur sollte keine Zyklen haben (DAG)  Sonst schwer auszutauschen  Keine Wiederverwendbarkeit  Nicht sauber testbar", 
            "title": "Achieve Orthogonality"
        }, 
        {
            "location": "/SE2/3_SE_Practises/#design-to-test", 
            "text": "Vor Entwicklungszeit betrachten, da es Architetktur beeinflusst", 
            "title": "Design to Test"
        }, 
        {
            "location": "/SE2/3_SE_Practises/#implementation-practises", 
            "text": "", 
            "title": "Implementation Practises"
        }, 
        {
            "location": "/SE2/3_SE_Practises/#fix-broken-windows", 
            "text": "\"Broken Window Syndrom\": Wenn Probleme nicht behoben werden, bleiben sie bestehen  Probleme beheben, wenn sie entstehen  Refactoring / Code Reviews", 
            "title": "Fix broken Windows"
        }, 
        {
            "location": "/SE2/3_SE_Practises/#refactor-early-and-often", 
            "text": "Refactoring als Prozess definieren  Gute Tests for Refactoring haben, um nicht Fehler einzubauen", 
            "title": "Refactor early and often"
        }, 
        {
            "location": "/SE2/3_SE_Practises/#program-deliberately", 
            "text": "Nicht auf \"gut Gl\u00fcck\" programmieren  Spezifikation lesen (vor allem bei Paral. Progr.)", 
            "title": "Program Deliberately"
        }, 
        {
            "location": "/SE2/3_SE_Practises/#verification-practises", 
            "text": "", 
            "title": "Verification Practises"
        }, 
        {
            "location": "/SE2/3_SE_Practises/#test-rigorously", 
            "text": "fr\u00fch, h\u00e4ufig, automatisch testen  \"Find Issues Once\": F\u00fcr gefundene Fehler Tests schreiben  Integration Tests genauso wichtig wie Unit Tests", 
            "title": "Test rigorously"
        }, 
        {
            "location": "/SE2/3_SE_Practises/#perform-reviews", 
            "text": "", 
            "title": "Perform Reviews"
        }, 
        {
            "location": "/Vss/0_Index/", 
            "text": "Verteilte Software-Systeme\n\n\n\n\nExam Notes\n\n\nIntroduction", 
            "title": "0 Index"
        }, 
        {
            "location": "/Vss/0_Index/#verteilte-software-systeme", 
            "text": "Exam Notes  Introduction", 
            "title": "Verteilte Software-Systeme"
        }, 
        {
            "location": "/Vss/1_Exam/", 
            "text": "Exam\n\n\nHilfsmittel\n\n\n\n\n2 A4-Seiten Zusammenfassung", 
            "title": "1 Exam"
        }, 
        {
            "location": "/Vss/1_Exam/#exam", 
            "text": "", 
            "title": "Exam"
        }, 
        {
            "location": "/Vss/1_Exam/#hilfsmittel", 
            "text": "2 A4-Seiten Zusammenfassung", 
            "title": "Hilfsmittel"
        }, 
        {
            "location": "/Vss/2_Introduction/", 
            "text": "Introduction\n\n\n\n\nTransparency Types: Eigenschaften eines Systems transparent (= \"durchsichtig\") f\u00fcr den Benutzer machen, damit er nicht mitbekommt, dass z.B. mehrere Benutzer gleichzeitig zugreifen (Concurrency Transparency)\n\n\nVorteile von VSS\n\n\nBilden die verteilte Realit\u00e4t ab (verschiedene Arbeitspl\u00e4tze etc.)\n\n\nPerformancesteigerung (paralelle Verarbeitung)\n\n\nSkalierbarkeit\n\n\nFehlertoleranz\n\n\n\n\n\n\nHerausforderungen VSS\n\n\nKomplexe Kommunikation\n\n\nPerformanceprobleme (Latenz, Durchsatz)\n\n\nZuverl\u00e4ssigkeit (Netzzugriffe, Ausf\u00e4lle)\n\n\nTransaktionssicherheit (mehrere Benutzer)\n\n\n\n\n\n\n\n\nMiddleware\n\n\nMidleware\n ist infrastrukturelle Software, die eine Ebene unter dem Software-System liegt\n\n\n\n\nWird i.d.R. nicht selbst geschrieben\n\n\nDient zur Kommunikation zwischen den Software-Komponenten\n\n\n\n\nKommunikationsmiddleware\n\n\n\n\nInterfaces zur Netzwerkprogrammierung\n\n\nTCP/IP Sockets, RESTful HTTP, etc.\n\n\n\n\nAnwedungsorientierte Middleware\n\n\n\n\nHigh-level Protokolle\n\n\nUnterst\u00fctzung verteiler Andwendungen\n\n\nVereinfacht das Design der Applikation\n\n\nbietet Sicherheit, Zuverl\u00e4ssigkeit, verteilte Transaktionen, ...\n\n\nz.B. .NET Application Server, SQL mit Remote Queries, ...\n\n\n\n\n\n\nVSS Architectural Styles\n\n\n\n\n\n\n\n\nHub and Spoke\n: Alle kommunizieren \u00fcber zentrale Stelle (\"Hub\")\n\n\n\n\n\n\nCORBA (Centralized Object Request Broker Architecture) wird heute nicht mehr verwendet, die Prinzipien sind aber immer noch releveant\n\n\n\n\n\n\nIdempotenz\n\n\n\n\nIdempotente Funktion: z.B. zwei Zahlen addieren, Funktion macht bei jedem gleichen Aufruf das selbe\n\n\nNicht-idempotente Funktion: Es wird ein Zustand ver\u00e4ndert, bei zweitem gleichen Aufruf ist das Verhalten anders. z.B. Lagerstand \u00e4ndern, Konto-\u00dcbertrag\n\n\nServer idempotent machen: Designfrage, z.B. jede Nachricht mit eindeutiger ID versehen, Server darf diese ID nur einmal bearbeiten", 
            "title": "2 Introduction"
        }, 
        {
            "location": "/Vss/2_Introduction/#introduction", 
            "text": "Transparency Types: Eigenschaften eines Systems transparent (= \"durchsichtig\") f\u00fcr den Benutzer machen, damit er nicht mitbekommt, dass z.B. mehrere Benutzer gleichzeitig zugreifen (Concurrency Transparency)  Vorteile von VSS  Bilden die verteilte Realit\u00e4t ab (verschiedene Arbeitspl\u00e4tze etc.)  Performancesteigerung (paralelle Verarbeitung)  Skalierbarkeit  Fehlertoleranz    Herausforderungen VSS  Komplexe Kommunikation  Performanceprobleme (Latenz, Durchsatz)  Zuverl\u00e4ssigkeit (Netzzugriffe, Ausf\u00e4lle)  Transaktionssicherheit (mehrere Benutzer)", 
            "title": "Introduction"
        }, 
        {
            "location": "/Vss/2_Introduction/#middleware", 
            "text": "Midleware  ist infrastrukturelle Software, die eine Ebene unter dem Software-System liegt   Wird i.d.R. nicht selbst geschrieben  Dient zur Kommunikation zwischen den Software-Komponenten", 
            "title": "Middleware"
        }, 
        {
            "location": "/Vss/2_Introduction/#kommunikationsmiddleware", 
            "text": "Interfaces zur Netzwerkprogrammierung  TCP/IP Sockets, RESTful HTTP, etc.", 
            "title": "Kommunikationsmiddleware"
        }, 
        {
            "location": "/Vss/2_Introduction/#anwedungsorientierte-middleware", 
            "text": "High-level Protokolle  Unterst\u00fctzung verteiler Andwendungen  Vereinfacht das Design der Applikation  bietet Sicherheit, Zuverl\u00e4ssigkeit, verteilte Transaktionen, ...  z.B. .NET Application Server, SQL mit Remote Queries, ...", 
            "title": "Anwedungsorientierte Middleware"
        }, 
        {
            "location": "/Vss/2_Introduction/#vss-architectural-styles", 
            "text": "Hub and Spoke : Alle kommunizieren \u00fcber zentrale Stelle (\"Hub\")    CORBA (Centralized Object Request Broker Architecture) wird heute nicht mehr verwendet, die Prinzipien sind aber immer noch releveant", 
            "title": "VSS Architectural Styles"
        }, 
        {
            "location": "/Vss/2_Introduction/#idempotenz", 
            "text": "Idempotente Funktion: z.B. zwei Zahlen addieren, Funktion macht bei jedem gleichen Aufruf das selbe  Nicht-idempotente Funktion: Es wird ein Zustand ver\u00e4ndert, bei zweitem gleichen Aufruf ist das Verhalten anders. z.B. Lagerstand \u00e4ndern, Konto-\u00dcbertrag  Server idempotent machen: Designfrage, z.B. jede Nachricht mit eindeutiger ID versehen, Server darf diese ID nur einmal bearbeiten", 
            "title": "Idempotenz"
        }, 
        {
            "location": "/Vss/3_socket_programmierung/", 
            "text": "Socket Programmierung\n\n\n\n\nMessage-Oriented Middleware (z.B. HTTP GET / POST)\n\n\nClient wartet meist asynchron auf die Antwort\n\n\n\n\n\n\nRemote Procedure Call\n\n\nz.B. JAVA RMI\n\n\nHeute Web-Services (RESTful HTTP)\n\n\nClient wartet auf die Antwort\n\n\n\n\n\n\nFallacies of Distributed Systems\n\n\nFowler's First Law\n of Distributed Object Design\n\n\nVerteilte eigene Objekte sind starke Kopplung!\n\n\nM\u00fcssen meist in gleicher Sprache sein\n\n\n\n\n\n\n\n\nSockets\n\n\n\n\nMiddleware, um \u00fcber TCP / UDP zu kommunizieren\n\n\nZwei Prozesse schreiben und lesen auf den Socket, als ob es ein File w\u00e4re\n\n\nIdentifiziert durch Tupel IP-Adresse und Port\n\n\nZuerst muss Session aufgebaut werden\n\n\nEnge Kopplung zwischen Client und Server\n\n\nIn TCP/IP-Model auf Application-Layer, in OSI-Modell auf Session-Layer\n\n\nNachteile\n\n\nReiner Bytestream - Muss geparsed werden\n\n\nMessage Exchange Patterns muss selbst implementiert werden, z.B. Reihenfolge der Messages\n\n\n\n\n\n\nMeist nicht direkt auf Sockets programmieren, sondern h\u00f6here Abstraktion verwenden\n\n\n\n\nServer\n\n\n\n\nH\u00f6rt auf einen Port (Listener)\n\n\nErstellt f\u00fcr jeden Client einen eigenen Socket\n\n\n\n\nMeist wird f\u00fcr jede Client-Connection (Socket) ein eigener Thread verwendet\n\n\n\n\n\n\nBerkeley Sockets bieten ein standardisiertes Interface\n\n\n\n\n\n\nWebSockets\n\n\n\n\nBei reinem HTTP kann der Server nur Daten senden, wenn der Client eine Anfrage sendet\n\n\nMit Websockets kann der Server Daten auf den Client \"pushen\"\n\n\nBrowser sendet Daten mit \nsend()\n und empf\u00e4ngt Daten in \nonmessage\n Event handler\n\n\nWird von modernen Browsern unterst\u00fctzt\n\n\n\n\nUDP-Sockets\n\n\n\n\nClient muss keine Verbindung vor dem Senden zum Server aufbauen, sondern kann direkt anfangen zu senden\n\n\nServer sendet keine Best\u00e4tigung\n\n\nJava Tutorial\n\n\n\n\nMessaging Patterns\n\n\n\n\nBasic Pattern\n: Analog zu einem Brief, der von einem Message Endpoint zum anderen gesendet wird\n\n\nBlocking Receiver Message Pattern\n: Synchrone \u00dcbertragung, Server und Client warten auf die Antwort\n\n\nPolling Receiver Message Pattern\n: Der Receiver macht Anfragen zum Empfangen der Nachricht (Polling)\n\n\nService Activator Message Pattern\n: Auf einen Request ruft der \"Replier\" mit dem \"Service Activator\" die richtige Service-Funktion auf (RPC-style)", 
            "title": "3 socket programmierung"
        }, 
        {
            "location": "/Vss/3_socket_programmierung/#socket-programmierung", 
            "text": "Message-Oriented Middleware (z.B. HTTP GET / POST)  Client wartet meist asynchron auf die Antwort    Remote Procedure Call  z.B. JAVA RMI  Heute Web-Services (RESTful HTTP)  Client wartet auf die Antwort    Fallacies of Distributed Systems  Fowler's First Law  of Distributed Object Design  Verteilte eigene Objekte sind starke Kopplung!  M\u00fcssen meist in gleicher Sprache sein", 
            "title": "Socket Programmierung"
        }, 
        {
            "location": "/Vss/3_socket_programmierung/#sockets", 
            "text": "Middleware, um \u00fcber TCP / UDP zu kommunizieren  Zwei Prozesse schreiben und lesen auf den Socket, als ob es ein File w\u00e4re  Identifiziert durch Tupel IP-Adresse und Port  Zuerst muss Session aufgebaut werden  Enge Kopplung zwischen Client und Server  In TCP/IP-Model auf Application-Layer, in OSI-Modell auf Session-Layer  Nachteile  Reiner Bytestream - Muss geparsed werden  Message Exchange Patterns muss selbst implementiert werden, z.B. Reihenfolge der Messages    Meist nicht direkt auf Sockets programmieren, sondern h\u00f6here Abstraktion verwenden", 
            "title": "Sockets"
        }, 
        {
            "location": "/Vss/3_socket_programmierung/#server", 
            "text": "H\u00f6rt auf einen Port (Listener)  Erstellt f\u00fcr jeden Client einen eigenen Socket   Meist wird f\u00fcr jede Client-Connection (Socket) ein eigener Thread verwendet    Berkeley Sockets bieten ein standardisiertes Interface", 
            "title": "Server"
        }, 
        {
            "location": "/Vss/3_socket_programmierung/#websockets", 
            "text": "Bei reinem HTTP kann der Server nur Daten senden, wenn der Client eine Anfrage sendet  Mit Websockets kann der Server Daten auf den Client \"pushen\"  Browser sendet Daten mit  send()  und empf\u00e4ngt Daten in  onmessage  Event handler  Wird von modernen Browsern unterst\u00fctzt", 
            "title": "WebSockets"
        }, 
        {
            "location": "/Vss/3_socket_programmierung/#udp-sockets", 
            "text": "Client muss keine Verbindung vor dem Senden zum Server aufbauen, sondern kann direkt anfangen zu senden  Server sendet keine Best\u00e4tigung  Java Tutorial", 
            "title": "UDP-Sockets"
        }, 
        {
            "location": "/Vss/3_socket_programmierung/#messaging-patterns", 
            "text": "Basic Pattern : Analog zu einem Brief, der von einem Message Endpoint zum anderen gesendet wird  Blocking Receiver Message Pattern : Synchrone \u00dcbertragung, Server und Client warten auf die Antwort  Polling Receiver Message Pattern : Der Receiver macht Anfragen zum Empfangen der Nachricht (Polling)  Service Activator Message Pattern : Auf einen Request ruft der \"Replier\" mit dem \"Service Activator\" die richtige Service-Funktion auf (RPC-style)", 
            "title": "Messaging Patterns"
        }, 
        {
            "location": "/Vss/4_Asynchronous_Messaging/", 
            "text": "Asynchronous Messaging\n\n\nZiel\n\n\n\n\nLose Kopplung zum Austausch von Nachrichten auf unterschiedlichen Plattformen in unterschiedlichen Formaten\n\n\nSkalierbarkeit, Fehlertoleranz, Erweiterbarkeit\n\n\nViele Design-Entscheidungen, z.B. QoS Eigenschaften\n\n\n\n\nEinf\u00fchrung Messaging\n\n\n\n\nEine Message besteht aus Message Descriptor und Message Data\n\n\nDer Queue Manager ist verantwortlich f\u00fcr das Versenden und Empfangen von Nachrichten\n\n\nBei Asynchronous RPC antwortet der Server zwei Mal\n\n\nDas erste Mal als Best\u00e4tigung der Ausf\u00fchrung (Accept Request)\n\n\nDas zweite Mal mit dem Resultat\n\n\n\n\n\n\n\n\nMessaging Middleware\n\n\n\n\nz.B. IBM MQ, Microsoft MQ, ActiveMQ (Apache)\n\n\n\n\nJava Message Service (JMS) API\n\n\n\n\nGrundlegende MOM API\n\n\nPut\n: Append a message to the queue\n\n\nGet\n: Block until queue ist not empty, then remove first message\n\n\nPoll\n: Remove first entry if queue is not empty, never block\n\n\nNotify\n: Install a handler to be notified when a message is put into the queue\n\n\n\n\n\n\nMessage Reliability Levels\n\n\nEine JMS Message besteht aus Header, Properties und Body\n\n\nProperties sind Erweiterungen des Standard-headers und optional\n\n\n\n\n\n\n\n\nBeispiel Queue Sender (Message Producer)\n\n\nConnection\n \nconnection\n \n=\n \nconnectionFactory\n.\ncreateConnection\n();\n\n\nconnection\n.\nstart\n();\n\n\nSession\n \nsession\n \n=\n \nconnection\n.\ncreateSession\n(\nmp\n.\ntransacted\n,\n\n    \nSession\n.\nAUTO_ACKNOWLEDGE\n);\n\n\nDestination\n \ndestination\n \n=\n \nsession\n.\ncreateQueue\n(\ntestQueue\n);\n\n\nMessageProducer\n \nproducer\n \n=\n \nsession\n.\ncreateProducer\n(\ndestination\n);\n\n\nproducer\n.\nsetDeliveryMode\n(\nDeliveryMode\n.\nPERSISTENT\n);\n\n\nTextMessage\n \nmessage\n \n=\n \nsession\n.\ncreateTextMessage\n(\nhello\n);\n\n\nproducer\n.\nsend\n(\nmessage\n);\n\n\nproducer\n.\nclose\n();\n\n\nsession\n.\nclose\n();\n\n\nconnection\n.\nclose\n();\n\n\n\n\n\n\nBeispiel Queue Receiver (Message Consumer)\n\n\nConnection\n \nconnection\n \n=\n \nconnectionFactory\n.\ncreateConnection\n();\n\n\nconnection\n.\nstart\n();\n\n\nSession\n \nsession\n \n=\n \nconnection\n.\ncreateSession\n(\nmc\n.\ntransacted\n,\n\n    \nSession\n.\nAUTO_ACKNOWLEDGE\n);\n\n\nDestination\n \ndestination\n \n=\n \nsession\n.\ncreateQueue\n(\ntestQueue\n);\n\n\nMessageConsumer\n \nconsumer\n \n=\n \nsession\n.\ncreateConsumer\n(\ndestination\n);\n\n\nTextMessage\n \ntext\n=(\nTextMessage\n)\n \nconsumer\n.\nreceive\n();\n\n\nconsumer\n.\nclose\n();\n \n\nsession\n.\nclose\n();\n\n\nconnection\n.\nclose\n();\n\n\n\n\n\n\nEnterprise Integration Patterns\n\n\nPoint-to-Point Messaging Pattern\n\n\n\n\nSimpelste Form, ein Sender schickt einem Receiver \u00fcber einen beliebigen Channel eine Message\n\n\nMeist wird eine \nMessage Expiration\n gesetzt. Ist diese abgelaufen, wenn der Receiver die Message erh\u00e4lt, wird sie verworfen oder an einen \"Dead Letter Channel\" geschickt\n\n\nCommand Message Pattern\n: Message, die dem Receiver mitteilt, etwas auszuf\u00fchren\n\n\nDocument Message Pattern\n: Reine Daten-\u00dcbertragung\n\n\n\n\nPublic-Subscribe Pattern\n\n\n\n\nDer Publisher (Sender) schickt die Messages an einen \nPublish-Subscribe-Channel\n\n\nDer Channel schickt eine Kopie der Message an einen Output Channel\n\n\nJeder Output-Channel hat genau 1 Subscriber\n\n\n\n\nJeder Subscriber erh\u00e4lt die Nachricht 1 Mal\n\n\n\n\n\n\nTopic-based\n: Subscriber melden sich an verschiedenen \"topics\" an (logische Channels) und erhalten nur die Nachrichten, die zu diesen Topics geschickt werden\n\n\n\n\n\n\nContent-based\n: Der Subscriber definiert Eigenschaften der Messages, die er bekommen m\u00f6chte. Er erh\u00e4lt dann nur die Nachrichten, die dem entspechen\n\n\n\n\n\n\nMeistens gibt es zwischen Publisher und Subscriber einen Message Broker, der die Messages entgegennimmt und Subscribers verwaltet\n\n\n\n\n\n\nReceiving Message Endpoint Pattern\n\n\n\n\nCompeting Customers\n: Mehrere Receiver verarbeiten messages gleichzeitig\n\n\nSelective Customer\n: Der Receiver entscheided beim Ankommen der Message anhand von Kriterien, ob die Message verarbeitet werden soll\n\n\n\n\nRabbitMQ\n\n\n\n\nRouting: Messages werden Anhand von Eigenschaften an den entsprechenden Receiver zugestellt\n\n\nRPC: Beim Request gibt der Client eine Callback Queue an (\nreply_to\n) und eine eindeutige ID. So wird beim Callback die Response dem Request zugeordnet", 
            "title": "4 Asynchronous Messaging"
        }, 
        {
            "location": "/Vss/4_Asynchronous_Messaging/#asynchronous-messaging", 
            "text": "", 
            "title": "Asynchronous Messaging"
        }, 
        {
            "location": "/Vss/4_Asynchronous_Messaging/#ziel", 
            "text": "Lose Kopplung zum Austausch von Nachrichten auf unterschiedlichen Plattformen in unterschiedlichen Formaten  Skalierbarkeit, Fehlertoleranz, Erweiterbarkeit  Viele Design-Entscheidungen, z.B. QoS Eigenschaften", 
            "title": "Ziel"
        }, 
        {
            "location": "/Vss/4_Asynchronous_Messaging/#einfuhrung-messaging", 
            "text": "Eine Message besteht aus Message Descriptor und Message Data  Der Queue Manager ist verantwortlich f\u00fcr das Versenden und Empfangen von Nachrichten  Bei Asynchronous RPC antwortet der Server zwei Mal  Das erste Mal als Best\u00e4tigung der Ausf\u00fchrung (Accept Request)  Das zweite Mal mit dem Resultat", 
            "title": "Einf\u00fchrung Messaging"
        }, 
        {
            "location": "/Vss/4_Asynchronous_Messaging/#messaging-middleware", 
            "text": "z.B. IBM MQ, Microsoft MQ, ActiveMQ (Apache)", 
            "title": "Messaging Middleware"
        }, 
        {
            "location": "/Vss/4_Asynchronous_Messaging/#java-message-service-jms-api", 
            "text": "Grundlegende MOM API  Put : Append a message to the queue  Get : Block until queue ist not empty, then remove first message  Poll : Remove first entry if queue is not empty, never block  Notify : Install a handler to be notified when a message is put into the queue    Message Reliability Levels  Eine JMS Message besteht aus Header, Properties und Body  Properties sind Erweiterungen des Standard-headers und optional", 
            "title": "Java Message Service (JMS) API"
        }, 
        {
            "location": "/Vss/4_Asynchronous_Messaging/#beispiel-queue-sender-message-producer", 
            "text": "Connection   connection   =   connectionFactory . createConnection ();  connection . start ();  Session   session   =   connection . createSession ( mp . transacted , \n     Session . AUTO_ACKNOWLEDGE );  Destination   destination   =   session . createQueue ( testQueue );  MessageProducer   producer   =   session . createProducer ( destination );  producer . setDeliveryMode ( DeliveryMode . PERSISTENT );  TextMessage   message   =   session . createTextMessage ( hello );  producer . send ( message );  producer . close ();  session . close ();  connection . close ();", 
            "title": "Beispiel Queue Sender (Message Producer)"
        }, 
        {
            "location": "/Vss/4_Asynchronous_Messaging/#beispiel-queue-receiver-message-consumer", 
            "text": "Connection   connection   =   connectionFactory . createConnection ();  connection . start ();  Session   session   =   connection . createSession ( mc . transacted , \n     Session . AUTO_ACKNOWLEDGE );  Destination   destination   =   session . createQueue ( testQueue );  MessageConsumer   consumer   =   session . createConsumer ( destination );  TextMessage   text =( TextMessage )   consumer . receive ();  consumer . close ();   session . close ();  connection . close ();", 
            "title": "Beispiel Queue Receiver (Message Consumer)"
        }, 
        {
            "location": "/Vss/4_Asynchronous_Messaging/#enterprise-integration-patterns", 
            "text": "", 
            "title": "Enterprise Integration Patterns"
        }, 
        {
            "location": "/Vss/4_Asynchronous_Messaging/#point-to-point-messaging-pattern", 
            "text": "Simpelste Form, ein Sender schickt einem Receiver \u00fcber einen beliebigen Channel eine Message  Meist wird eine  Message Expiration  gesetzt. Ist diese abgelaufen, wenn der Receiver die Message erh\u00e4lt, wird sie verworfen oder an einen \"Dead Letter Channel\" geschickt  Command Message Pattern : Message, die dem Receiver mitteilt, etwas auszuf\u00fchren  Document Message Pattern : Reine Daten-\u00dcbertragung", 
            "title": "Point-to-Point Messaging Pattern"
        }, 
        {
            "location": "/Vss/4_Asynchronous_Messaging/#public-subscribe-pattern", 
            "text": "Der Publisher (Sender) schickt die Messages an einen  Publish-Subscribe-Channel  Der Channel schickt eine Kopie der Message an einen Output Channel  Jeder Output-Channel hat genau 1 Subscriber   Jeder Subscriber erh\u00e4lt die Nachricht 1 Mal    Topic-based : Subscriber melden sich an verschiedenen \"topics\" an (logische Channels) und erhalten nur die Nachrichten, die zu diesen Topics geschickt werden    Content-based : Der Subscriber definiert Eigenschaften der Messages, die er bekommen m\u00f6chte. Er erh\u00e4lt dann nur die Nachrichten, die dem entspechen    Meistens gibt es zwischen Publisher und Subscriber einen Message Broker, der die Messages entgegennimmt und Subscribers verwaltet", 
            "title": "Public-Subscribe Pattern"
        }, 
        {
            "location": "/Vss/4_Asynchronous_Messaging/#receiving-message-endpoint-pattern", 
            "text": "Competing Customers : Mehrere Receiver verarbeiten messages gleichzeitig  Selective Customer : Der Receiver entscheided beim Ankommen der Message anhand von Kriterien, ob die Message verarbeitet werden soll", 
            "title": "Receiving Message Endpoint Pattern"
        }, 
        {
            "location": "/Vss/4_Asynchronous_Messaging/#rabbitmq", 
            "text": "Routing: Messages werden Anhand von Eigenschaften an den entsprechenden Receiver zugestellt  RPC: Beim Request gibt der Client eine Callback Queue an ( reply_to ) und eine eindeutige ID. So wird beim Callback die Response dem Request zugeordnet", 
            "title": "RabbitMQ"
        }, 
        {
            "location": "/VwlTg/0_Index/", 
            "text": "Volkswirtschaft und Technikgeschichte\n\n\n\n\nExam Notes", 
            "title": "0 Index"
        }, 
        {
            "location": "/VwlTg/0_Index/#volkswirtschaft-und-technikgeschichte", 
            "text": "Exam Notes", 
            "title": "Volkswirtschaft und Technikgeschichte"
        }, 
        {
            "location": "/VwlTg/1_Exam/", 
            "text": "Some exam notes...", 
            "title": "1 Exam"
        }, 
        {
            "location": "/VwlTg/2_Wohlstand/", 
            "text": "Wohlstand / Makro\u00f6konomisches Gleichgewicht\n\n\n\n\nMikro\u00f6konimie untersucht das Verhalten einzelner M\u00e4rkte und Branchen, Makro\u00f6konomie auf Stufe von mehreren L\u00e4ndern\n\n\n\n\nPreisniveau\n\n\n\n\nPreisniveau: Je h\u00f6her, desto h\u00f6her werden die Preise\n\n\nWird mit einem standardisierten G\u00fctekorb gemessen\n\n\nVerschiedene G\u00fctekorbe, z.B. f\u00fcr Konsumenten oder Produzenten\n\n\n\n\n\n\nProduzentenpreisindex in den letzten Jahren stark gesunken\n\n\nStarker Franken (zuerst 1.20, jetzt ca. 1.08)\n\n\nRohstoffe sind g\u00fcnstiger geworden (geringere Nachfrage)\n\n\n\n\n\n\nDagegen ist konsumentenindex nur leicht gesunken\n\n\nKonsumenteng\u00fcterkorb ist auf Luxuskonsum ausgerichtet\n\n\nWenig f\u00fcr Bildung, viel f\u00fcr Restaurant / Hotels\n\n\n\n\n\n\nF\u00fcr SNB ist sinkende Konsumentenindex gef\u00e4hrlich\n\n\nKonsumenten sparen mehr -\n Deflation\n\n\nProblem in Japan seit 20 Jahren (stark verschuldet)\n\n\n\n\n\n\nFolie 11: Schweizer Volk kann Inflation sehr gut einsch\u00e4tzen\n\n\n\n\nReales BIP\n\n\n\n\nBIP: Alle G\u00fcter und Dienstleistungen, die in einem Jahr in einem Land hergestellt werden\n\n\nReales BIP: Nominales BIP - Inflation\n\n\nheisst: Alles zu festgelegten Standardpreisen\n\n\n\n\n\n\nHier immer das reale BIP gemeint!\n\n\n2009 Finanzkriese: Platzen der Immobilienblase in den USA + Eurokrise (unabh\u00e4ngig)\n\n\n2015: BIP pro Kopf gesunken, weil starker Zuwanderung von Arbeitskr\u00e4ften\n\n\nEinwanderer gehen in Branchen, die weniger Wertsch\u00f6pfung haben, z.B. Gesundheitsbereich, Pflege, etc.\n\n\n\n\n\n\n\n\nAN-Kurve (Aggregierte Nachfrage)\n\n\n\n\nNachfrage nach G\u00fctern von Konsumenten, Unternehmen, Staat, Import/Export\n\n\nUSA hat negative Nettoexperte (mehr Importe als Exporte)\n\n\nJe tiefer das Preisniveau, desto h\u00f6her die Nachfrage\n\n\n\n\nAAL-Konstante (langfristig aggregiertes Angebot)\n\n\n\n\nDer Punkt, an dem ein Land mit allen verf\u00fcgbaren Ressourcen produzieren\n\n\nheisst: Jeder arbeitet, alle Maschinen laufen, etc.\n\n\n\"Optimale Produktionsmenge\"\n\n\nIst bei uns konstante Gr\u00f6sse\n\n\n\n\nAAk-Kurve (kurzfristig aggregiertes Angebot)\n\n\n\n\nJe h\u00f6her die Preise, desto mehr wollen die Produzenten herstellen\n\n\nKann theoretisch \u00fcber Kapazit\u00e4tsgrenze, dann arbeiten Menschen \u00fcberstunden\n\n\n\"\u00fcberhitzte\" Wirtschaft\n\n\nF\u00fchrt zu explodierenden Preisen\n\n\n\n\n\n\n\n\nProduktion links der Kapazit\u00e4tsgrenze -\n Rezession\n\n\n\n\n\n\nIdealerweise kreuzen sich AN und AAK genau auf Kapazit\u00e4tsgrenze\n\n\n\n\nOptimale Auslastung und genau soviel, wie die Nachfrage verlangt\n\n\nIn der Schweiz ist der Punkt eher rechts der Grenze, weil z.T. viele Arbeitskr\u00e4fte fehlen\n\n\nAndere Darstellung: Angebot eines Landes ist gleich der Nachfrage\n\n\n\n\nReales BIP in der Schweiz\n\n\n\n\nIn Produktionswert sind die Werte mehrmals verrechnet, wenn z.B. ein F\u00f6rster sein Holz verkauft und die S\u00e4gerei das Holz dem Schreiner, ist das Holz zwei Mal verrechnet\n\n\nVorleistungen rechnen dies raus - etwa die H\u00e4lfte in der Schweiz\n\n\nRund 2/3 des BIP geht an Arbeitnehmer, 1/6 an Arbeitgeber\n\n\nIn der Schweiz ist dieser Wert ziemlich konstant, im Gegensatz z.B. zu USA und Schweden\n\n\nGrund: GAVs, Arbeitsfrieden, (direkte Demokratie)\n\n\n\n\n\n\nExporte in der Schweiz in den letzten Jahren gesunken, aber auch Importe sind gefallen -\n BIP bleibt gleich\n\n\nGold- Import und Export ist gleich gross (70 Mia.)\n\n\nSchweiz ist Handelsplatz f\u00fcr Gold\n\n\n\n\n\n\nKaufkraftbereinigung: BIP bereinigt nach Kaufkraft, d.h. was kann man mit dem BIP kaufen?\n\n\n1975 war die Schweiz das reichste Land der Welt, danach weniger Wachstum\n\n\nAbschottung, Binnenmarkt geschlossen\n\n\nPreis von direkter Demokratie, F\u00f6deralismus, ...\n\n\n\n\n\n\nStarke Korrelation zwischen BIP pro Kopf und sozialem Fortschritt\n\n\nHoher Wohlstand ist wichtig bis zu einem gewissen Grad (dann immer weniger Fortschritt)", 
            "title": "2 Wohlstand"
        }, 
        {
            "location": "/VwlTg/2_Wohlstand/#wohlstand-makrookonomisches-gleichgewicht", 
            "text": "Mikro\u00f6konimie untersucht das Verhalten einzelner M\u00e4rkte und Branchen, Makro\u00f6konomie auf Stufe von mehreren L\u00e4ndern", 
            "title": "Wohlstand / Makro\u00f6konomisches Gleichgewicht"
        }, 
        {
            "location": "/VwlTg/2_Wohlstand/#preisniveau", 
            "text": "Preisniveau: Je h\u00f6her, desto h\u00f6her werden die Preise  Wird mit einem standardisierten G\u00fctekorb gemessen  Verschiedene G\u00fctekorbe, z.B. f\u00fcr Konsumenten oder Produzenten    Produzentenpreisindex in den letzten Jahren stark gesunken  Starker Franken (zuerst 1.20, jetzt ca. 1.08)  Rohstoffe sind g\u00fcnstiger geworden (geringere Nachfrage)    Dagegen ist konsumentenindex nur leicht gesunken  Konsumenteng\u00fcterkorb ist auf Luxuskonsum ausgerichtet  Wenig f\u00fcr Bildung, viel f\u00fcr Restaurant / Hotels    F\u00fcr SNB ist sinkende Konsumentenindex gef\u00e4hrlich  Konsumenten sparen mehr -  Deflation  Problem in Japan seit 20 Jahren (stark verschuldet)    Folie 11: Schweizer Volk kann Inflation sehr gut einsch\u00e4tzen", 
            "title": "Preisniveau"
        }, 
        {
            "location": "/VwlTg/2_Wohlstand/#reales-bip", 
            "text": "BIP: Alle G\u00fcter und Dienstleistungen, die in einem Jahr in einem Land hergestellt werden  Reales BIP: Nominales BIP - Inflation  heisst: Alles zu festgelegten Standardpreisen    Hier immer das reale BIP gemeint!  2009 Finanzkriese: Platzen der Immobilienblase in den USA + Eurokrise (unabh\u00e4ngig)  2015: BIP pro Kopf gesunken, weil starker Zuwanderung von Arbeitskr\u00e4ften  Einwanderer gehen in Branchen, die weniger Wertsch\u00f6pfung haben, z.B. Gesundheitsbereich, Pflege, etc.", 
            "title": "Reales BIP"
        }, 
        {
            "location": "/VwlTg/2_Wohlstand/#an-kurve-aggregierte-nachfrage", 
            "text": "Nachfrage nach G\u00fctern von Konsumenten, Unternehmen, Staat, Import/Export  USA hat negative Nettoexperte (mehr Importe als Exporte)  Je tiefer das Preisniveau, desto h\u00f6her die Nachfrage", 
            "title": "AN-Kurve (Aggregierte Nachfrage)"
        }, 
        {
            "location": "/VwlTg/2_Wohlstand/#aal-konstante-langfristig-aggregiertes-angebot", 
            "text": "Der Punkt, an dem ein Land mit allen verf\u00fcgbaren Ressourcen produzieren  heisst: Jeder arbeitet, alle Maschinen laufen, etc.  \"Optimale Produktionsmenge\"  Ist bei uns konstante Gr\u00f6sse", 
            "title": "AAL-Konstante (langfristig aggregiertes Angebot)"
        }, 
        {
            "location": "/VwlTg/2_Wohlstand/#aak-kurve-kurzfristig-aggregiertes-angebot", 
            "text": "Je h\u00f6her die Preise, desto mehr wollen die Produzenten herstellen  Kann theoretisch \u00fcber Kapazit\u00e4tsgrenze, dann arbeiten Menschen \u00fcberstunden  \"\u00fcberhitzte\" Wirtschaft  F\u00fchrt zu explodierenden Preisen     Produktion links der Kapazit\u00e4tsgrenze -  Rezession    Idealerweise kreuzen sich AN und AAK genau auf Kapazit\u00e4tsgrenze   Optimale Auslastung und genau soviel, wie die Nachfrage verlangt  In der Schweiz ist der Punkt eher rechts der Grenze, weil z.T. viele Arbeitskr\u00e4fte fehlen  Andere Darstellung: Angebot eines Landes ist gleich der Nachfrage", 
            "title": "AAk-Kurve (kurzfristig aggregiertes Angebot)"
        }, 
        {
            "location": "/VwlTg/2_Wohlstand/#reales-bip-in-der-schweiz", 
            "text": "In Produktionswert sind die Werte mehrmals verrechnet, wenn z.B. ein F\u00f6rster sein Holz verkauft und die S\u00e4gerei das Holz dem Schreiner, ist das Holz zwei Mal verrechnet  Vorleistungen rechnen dies raus - etwa die H\u00e4lfte in der Schweiz  Rund 2/3 des BIP geht an Arbeitnehmer, 1/6 an Arbeitgeber  In der Schweiz ist dieser Wert ziemlich konstant, im Gegensatz z.B. zu USA und Schweden  Grund: GAVs, Arbeitsfrieden, (direkte Demokratie)    Exporte in der Schweiz in den letzten Jahren gesunken, aber auch Importe sind gefallen -  BIP bleibt gleich  Gold- Import und Export ist gleich gross (70 Mia.)  Schweiz ist Handelsplatz f\u00fcr Gold    Kaufkraftbereinigung: BIP bereinigt nach Kaufkraft, d.h. was kann man mit dem BIP kaufen?  1975 war die Schweiz das reichste Land der Welt, danach weniger Wachstum  Abschottung, Binnenmarkt geschlossen  Preis von direkter Demokratie, F\u00f6deralismus, ...    Starke Korrelation zwischen BIP pro Kopf und sozialem Fortschritt  Hoher Wohlstand ist wichtig bis zu einem gewissen Grad (dann immer weniger Fortschritt)", 
            "title": "Reales BIP in der Schweiz"
        }, 
        {
            "location": "/VwlTg/3_Einkommensverteilung_und_Sozialwerke/", 
            "text": "Einkommensverteilung \n Sozialwerke\n\n\n\n\nProblem bei BIP pro Kopf: Es gibt kein \"Durschnitts-Kopf\"\n\n\n\n\nEffizienz und Veteilung\n\n\n\n\nEffizienz: Situation eines einzelnen Verbessern, ohne andere schlechter zu stellen\n\n\nauch z.b.: Reiche werden reicher, alle anderen bleiben gleich\n\n\n\n\n\n\n\"M\u00f6glichst grossen Kuchen backen\" ohne R\u00fccksicht auf Verteilung\n\n\n\n\nVerteilungsgerechtigkeit\n\n\n\n\nVerteilung ist abh\u00e4ngig von Produktivit\u00e4t der Arbeitenden\n\n\nProduktivit\u00e4t = Wertsch\u00f6pfung / Stunde\n\n\nKassierer z.B. hat wenig Wertsch\u00f6pfung -\n weniger Produktivit\u00e4t\n\n\n\n\n\n\nWenn die Gesellschaft nicht damit einverstanden ist, muss umverteilt werden (z.B. wegen k\u00f6rperlicher / geistlicher Einschr\u00e4nkung)\n\n\n\n\nHerausforderungen\n\n\n\n\nWird zu viel umverteilt, gibt es weniger Anreize zu pers\u00f6nlicher Leistung\n\n\nWird zu wenig umverteilt, wird es als ungerecht empfunden\n\n\nDies braucht eine Balance der sozialpolitischen Instrumente\n\n\nGerecht / ungerecht != gleich / ungleiche Verteilung!\n\n\n\n\nGini-Koeffizient\n\n\n\n\nDiagonale w\u00e4re perfekte Gleichverteilung\n\n\nJe gr\u00f6sser der \"Bauch\", desto gr\u00f6sser die Ungleicher die Verteilung\n\n\nGini-Koeffizient: Anteil des Bauches mit der Fl\u00e4che unter der Diagonale\n\n\nJe h\u00f6her der Koeffizient, desto h\u00f6her die Ungleichheite Verteilung\n\n\n\n\n\n\nSagt nicht aus, wie hoch der Wohlstand ist\n\n\n\n\nGini-Koeffizient gibt es f\u00fcr Einkommen und Verm\u00f6gen\n\n\n\n\n\n\nChina und USA haben hohen Koeffizient, Schweiz etwas h\u00f6her als Deutschland / \u00d6sterreich\n\n\n\n\nS\u00fcdamerika hat hohe Ungleichverteilung\n\n\nUSA hat starke Leistungs-Philosphie -\n Ungleiche Verteilung ist \"amerikanisch\"\n\n\n\n\nVerm\u00f6gens-Verteilung\n\n\n\n\nStudie der SGB\n\n\nSchweiz hat angeblich einer der h\u00f6chsten Verm\u00f6gens-Gini-Koeffizienten\n\n\nHat nur Verm\u00f6gen der Steuerabrechnung eingerechnet\n\n\nHeisst: Ohne Pensionskasse, Immobilien (nur Eigenmietwert)\n\n\n\n\n\n\n\n\nArten der Umverteilung\n\n\n\n\nBei Umverteilung nimmt man immer jemandem etwas weg!\n\n\n\n\nEinkommensquellen (Lohn, Ertr\u00e4ge aus Verm\u00f6gen)\n\n\n\n\n\n\nUmverteilung ist in Schweiz relativ niedrig, aber ist auch weniger ungerecht verteilt im internationalen Vergleich\n\n\n\n\nSchweiz: Niedriger Lohn ca. 4000, guter Lohn ca. 10000, Faktor 2.5\n\n\n\n\n\n\n\n\nEs gibt viele Arbeitsstellen f\u00fcr Umverteilung in der Schweiz\n\n\n\n\n\n\nDie drei S\u00e4ulen der Schweizer Altersvorsorge\n\n\nAHV (1. S\u00e4ule)\n\n\n\n\nPflicht f\u00fcr ganze Bev\u00f6lkerung (mit Aufenthaltsbewilligung)\n\n\nZiel: Reine Existenzsicherung\n\n\n\n\nBerufliche Vorsorge (Pensionskasse)\n\n\n\n\nHaben alle mit Arbeitsstelle in der Schweiz (Pflicht)\n\n\n70%-80% des Lebensstandards in der Pension\n\n\nZwei Optionen: Einmalig ganzes Geld bekommen oder lebenslang einen Betrag (Rente) erhalten\n\n\nJunge zahlen weniger Prozente als \u00e4ltere\n\n\nBegr\u00fcndung: \"junge brauche das Geld noch\"\n\n\nEiner der Hauptgr\u00fcnde, dass \u00e4ltere nur schwieriger einen Job finden (Unternehmen muss mind. H\u00e4lfte \u00fcbernehmen)\n\n\n\n\n\n\n\n\nSelbstvorsoge\n\n\n\n\nKann vom steuerbaren Einkommen abgezogen werden\n\n\nPrivates Verm\u00f6gen \n freiwillig\n\n\n\n\nHerausforderungen f\u00fcr die erste und zweite S\u00e4ule\n\n\n\n\nHerausforderung: Leute w\u00e4ren immer \u00e4lter\n\n\nAHV geht von einer Pyramide aus: Mehr j\u00fcngere als \u00e4ltere\n\n\nGeburtenrate ist zu tief (1.6 statt 2.1), Durschnittliches Alter steigt\n\n\nAHV ist seit 2 Jahren im defizit\n\n\nWird momentan durch Fond (28 Mia.) finanziert\n\n\nIst aufgebraucht zwischen 2027 und 2033\n\n\n\n\nL\u00f6sungsm\u00f6glichkeiten\n\n\n\n\nDirekt einflussbare Parameter\n\n\nH\u00f6here Beitr\u00e4ge\n\n\nTiefere Renten (ausgeschlossen!1!!!)\n\n\nRentenalter erh\u00f6hen\n\n\n\n\n\n\n\n\nIndirekt beeinflussbar (keine L\u00f6sungen)\n\n\n\n\nImmigration\n\n\nGeburtenrate\n\n\nWirtschaftswachstum\n\n\n\n\n\n\n\n\nGesetzliches Rentenalter != durchschnittliches Rentenalter!\n\n\n\n\nz.B in Belgien, Frankreich ist effektives Rentenalter viel tiefer\n\n\nIn Portugal, Japan sehr hohes effektives Alter\n\n\nWeil wenig Altersvorsorge, keine Wahl\n\n\n\n\n\n\nIn der Schweiz \"arbeitet man gerne\"\n\n\nMan kann die Pension um 4 Jahre verz\u00f6gern f\u00fcr h\u00f6here Rente\n\n\n\n\n\n\n\n\nProbleme BVG (Pensionskasse)\n\n\n\n\nEs gibt einen Mindestzinssatz, die die Pensionskassen bieten m\u00fcssen\n\n\n2003: 4%, heute 1.75%\n\n\nHistorisch sind Pensionskassen unterdeckt, im letzten Jahr wieder h\u00f6her\n\n\nGewerkschaften wollen h\u00f6here Zinss\u00e4tze, Pensionskassen tiefere\n\n\nEin Drittel wird auf Obligationen investiert (Negativzinsen!)\n\n\nUmwandlungssatz: Prozentsatz des angesparten Verm\u00f6ges, der als rente ausbezahlt wird\n\n\n2005: 7.2% -\n Lebenserwartung von ~79\n\n\n2014: 6.8%\n\n\n2010: Referendum gegen 6.4% vom Schweizer Volk\n\n\n\n\n\n\n\n\nArmut in der Schweiz\n\n\n\n\nArmut nimmt in der Schweiz ab\n\n\n\"absolut arm\":\n\n\nDefiniert mit u.a. \"Kein Auto, kein Farbfernseher\"\n\n\nWenn drei von neun Kategorien erf\u00fcllt\n\n\n\n\n\n\n\n\nBedinungsloses Grundeinkommen\n\n\n\n\nTheoretisch 80-90% finanzierbar\n\n\nK\u00fcrzen von vielen Sozialleistungen, weil sie jetzt durch BGE gedeckt w\u00e4ren\n\n\nMehr als die H\u00e4lfte durch R\u00fcckzahlungen von Arbeitgeber", 
            "title": "3 Einkommensverteilung und Sozialwerke"
        }, 
        {
            "location": "/VwlTg/3_Einkommensverteilung_und_Sozialwerke/#einkommensverteilung-sozialwerke", 
            "text": "Problem bei BIP pro Kopf: Es gibt kein \"Durschnitts-Kopf\"", 
            "title": "Einkommensverteilung &amp; Sozialwerke"
        }, 
        {
            "location": "/VwlTg/3_Einkommensverteilung_und_Sozialwerke/#effizienz-und-veteilung", 
            "text": "Effizienz: Situation eines einzelnen Verbessern, ohne andere schlechter zu stellen  auch z.b.: Reiche werden reicher, alle anderen bleiben gleich    \"M\u00f6glichst grossen Kuchen backen\" ohne R\u00fccksicht auf Verteilung", 
            "title": "Effizienz und Veteilung"
        }, 
        {
            "location": "/VwlTg/3_Einkommensverteilung_und_Sozialwerke/#verteilungsgerechtigkeit", 
            "text": "Verteilung ist abh\u00e4ngig von Produktivit\u00e4t der Arbeitenden  Produktivit\u00e4t = Wertsch\u00f6pfung / Stunde  Kassierer z.B. hat wenig Wertsch\u00f6pfung -  weniger Produktivit\u00e4t    Wenn die Gesellschaft nicht damit einverstanden ist, muss umverteilt werden (z.B. wegen k\u00f6rperlicher / geistlicher Einschr\u00e4nkung)", 
            "title": "Verteilungsgerechtigkeit"
        }, 
        {
            "location": "/VwlTg/3_Einkommensverteilung_und_Sozialwerke/#herausforderungen", 
            "text": "Wird zu viel umverteilt, gibt es weniger Anreize zu pers\u00f6nlicher Leistung  Wird zu wenig umverteilt, wird es als ungerecht empfunden  Dies braucht eine Balance der sozialpolitischen Instrumente  Gerecht / ungerecht != gleich / ungleiche Verteilung!", 
            "title": "Herausforderungen"
        }, 
        {
            "location": "/VwlTg/3_Einkommensverteilung_und_Sozialwerke/#gini-koeffizient", 
            "text": "Diagonale w\u00e4re perfekte Gleichverteilung  Je gr\u00f6sser der \"Bauch\", desto gr\u00f6sser die Ungleicher die Verteilung  Gini-Koeffizient: Anteil des Bauches mit der Fl\u00e4che unter der Diagonale  Je h\u00f6her der Koeffizient, desto h\u00f6her die Ungleichheite Verteilung    Sagt nicht aus, wie hoch der Wohlstand ist   Gini-Koeffizient gibt es f\u00fcr Einkommen und Verm\u00f6gen    China und USA haben hohen Koeffizient, Schweiz etwas h\u00f6her als Deutschland / \u00d6sterreich   S\u00fcdamerika hat hohe Ungleichverteilung  USA hat starke Leistungs-Philosphie -  Ungleiche Verteilung ist \"amerikanisch\"", 
            "title": "Gini-Koeffizient"
        }, 
        {
            "location": "/VwlTg/3_Einkommensverteilung_und_Sozialwerke/#vermogens-verteilung", 
            "text": "Studie der SGB  Schweiz hat angeblich einer der h\u00f6chsten Verm\u00f6gens-Gini-Koeffizienten  Hat nur Verm\u00f6gen der Steuerabrechnung eingerechnet  Heisst: Ohne Pensionskasse, Immobilien (nur Eigenmietwert)", 
            "title": "Verm\u00f6gens-Verteilung"
        }, 
        {
            "location": "/VwlTg/3_Einkommensverteilung_und_Sozialwerke/#arten-der-umverteilung", 
            "text": "Bei Umverteilung nimmt man immer jemandem etwas weg!   Einkommensquellen (Lohn, Ertr\u00e4ge aus Verm\u00f6gen)    Umverteilung ist in Schweiz relativ niedrig, aber ist auch weniger ungerecht verteilt im internationalen Vergleich   Schweiz: Niedriger Lohn ca. 4000, guter Lohn ca. 10000, Faktor 2.5     Es gibt viele Arbeitsstellen f\u00fcr Umverteilung in der Schweiz", 
            "title": "Arten der Umverteilung"
        }, 
        {
            "location": "/VwlTg/3_Einkommensverteilung_und_Sozialwerke/#die-drei-saulen-der-schweizer-altersvorsorge", 
            "text": "", 
            "title": "Die drei S\u00e4ulen der Schweizer Altersvorsorge"
        }, 
        {
            "location": "/VwlTg/3_Einkommensverteilung_und_Sozialwerke/#ahv-1-saule", 
            "text": "Pflicht f\u00fcr ganze Bev\u00f6lkerung (mit Aufenthaltsbewilligung)  Ziel: Reine Existenzsicherung", 
            "title": "AHV (1. S\u00e4ule)"
        }, 
        {
            "location": "/VwlTg/3_Einkommensverteilung_und_Sozialwerke/#berufliche-vorsorge-pensionskasse", 
            "text": "Haben alle mit Arbeitsstelle in der Schweiz (Pflicht)  70%-80% des Lebensstandards in der Pension  Zwei Optionen: Einmalig ganzes Geld bekommen oder lebenslang einen Betrag (Rente) erhalten  Junge zahlen weniger Prozente als \u00e4ltere  Begr\u00fcndung: \"junge brauche das Geld noch\"  Einer der Hauptgr\u00fcnde, dass \u00e4ltere nur schwieriger einen Job finden (Unternehmen muss mind. H\u00e4lfte \u00fcbernehmen)", 
            "title": "Berufliche Vorsorge (Pensionskasse)"
        }, 
        {
            "location": "/VwlTg/3_Einkommensverteilung_und_Sozialwerke/#selbstvorsoge", 
            "text": "Kann vom steuerbaren Einkommen abgezogen werden  Privates Verm\u00f6gen   freiwillig", 
            "title": "Selbstvorsoge"
        }, 
        {
            "location": "/VwlTg/3_Einkommensverteilung_und_Sozialwerke/#herausforderungen-fur-die-erste-und-zweite-saule", 
            "text": "Herausforderung: Leute w\u00e4ren immer \u00e4lter  AHV geht von einer Pyramide aus: Mehr j\u00fcngere als \u00e4ltere  Geburtenrate ist zu tief (1.6 statt 2.1), Durschnittliches Alter steigt  AHV ist seit 2 Jahren im defizit  Wird momentan durch Fond (28 Mia.) finanziert  Ist aufgebraucht zwischen 2027 und 2033", 
            "title": "Herausforderungen f\u00fcr die erste und zweite S\u00e4ule"
        }, 
        {
            "location": "/VwlTg/3_Einkommensverteilung_und_Sozialwerke/#losungsmoglichkeiten", 
            "text": "Direkt einflussbare Parameter  H\u00f6here Beitr\u00e4ge  Tiefere Renten (ausgeschlossen!1!!!)  Rentenalter erh\u00f6hen     Indirekt beeinflussbar (keine L\u00f6sungen)   Immigration  Geburtenrate  Wirtschaftswachstum     Gesetzliches Rentenalter != durchschnittliches Rentenalter!   z.B in Belgien, Frankreich ist effektives Rentenalter viel tiefer  In Portugal, Japan sehr hohes effektives Alter  Weil wenig Altersvorsorge, keine Wahl    In der Schweiz \"arbeitet man gerne\"  Man kann die Pension um 4 Jahre verz\u00f6gern f\u00fcr h\u00f6here Rente", 
            "title": "L\u00f6sungsm\u00f6glichkeiten"
        }, 
        {
            "location": "/VwlTg/3_Einkommensverteilung_und_Sozialwerke/#probleme-bvg-pensionskasse", 
            "text": "Es gibt einen Mindestzinssatz, die die Pensionskassen bieten m\u00fcssen  2003: 4%, heute 1.75%  Historisch sind Pensionskassen unterdeckt, im letzten Jahr wieder h\u00f6her  Gewerkschaften wollen h\u00f6here Zinss\u00e4tze, Pensionskassen tiefere  Ein Drittel wird auf Obligationen investiert (Negativzinsen!)  Umwandlungssatz: Prozentsatz des angesparten Verm\u00f6ges, der als rente ausbezahlt wird  2005: 7.2% -  Lebenserwartung von ~79  2014: 6.8%  2010: Referendum gegen 6.4% vom Schweizer Volk", 
            "title": "Probleme BVG (Pensionskasse)"
        }, 
        {
            "location": "/VwlTg/3_Einkommensverteilung_und_Sozialwerke/#armut-in-der-schweiz", 
            "text": "Armut nimmt in der Schweiz ab  \"absolut arm\":  Definiert mit u.a. \"Kein Auto, kein Farbfernseher\"  Wenn drei von neun Kategorien erf\u00fcllt", 
            "title": "Armut in der Schweiz"
        }, 
        {
            "location": "/VwlTg/3_Einkommensverteilung_und_Sozialwerke/#bedinungsloses-grundeinkommen", 
            "text": "Theoretisch 80-90% finanzierbar  K\u00fcrzen von vielen Sozialleistungen, weil sie jetzt durch BGE gedeckt w\u00e4ren  Mehr als die H\u00e4lfte durch R\u00fcckzahlungen von Arbeitgeber", 
            "title": "Bedinungsloses Grundeinkommen"
        }, 
        {
            "location": "/VwlTg/4_Arbeitsmarkt/", 
            "text": "Langfristiges Wachstum\n\n\nBedeutung des langfristigen Wirtschaftswachstums\n\n\n\n\nZweiter WK hatte langfristig keinen Effekt auf das Wachstum, weder in Japan noch USA\n\n\n1960 - 1980: Japan hat USA aufgeholt, seit 1990 ist l\u00fccke wieder gr\u00f6sser\n\n\n\n\nLangfristiger Wachstumstrend\n\n\n\n\nKonjukturverlauf ist genauer Verlauf, der schwankt\n\n\nWachstumstrend ist durchschnitt \u00fcber einen l\u00e4ngeren Zeitraum\n\n\n\n\nErfolgsfaktoren\n\n\n\n\nProduktivit\u00e4t wird gemessen in BIP / Arbeitsstunden\n\n\nDamit BIP / Kopf w\u00e4chst, muss mehr oder effizienter gearbeitet werden\n\n\nUm Produktivit\u00e4t zu erh\u00f6hen, kann Kapital aufgewendet oder in Technologie investiert werden (technischer Fortschritt)\n\n\nInnovation ist einzige \"unendliche\" Ressource\n\n\nDadurch k\u00f6nnte das Wachstum immer weiter gehen\n\n\n\n\n\n\nWeitere externe Faktoren der Wirtschaftspolitik\n\n\n\n\nWachstum im Vergleich\n\n\n\n\nWachstum in der Schweiz nahm 1970-2000 stark ab\n\n\nSeit 2000 wieder leicht besser\n\n\nAber insgesamt sinkendes Wachstum\n\n\n\n\nGr\u00fcnde\n\n\n\n\nExogene Faktoren\n\n\nKein Seezugang ist ein Nachteil\n\n\nSozialkapital, Klima, Rohstoffe hier kein Problem\n\n\n\n\n\n\nWirtschaftspolitik\n\n\n??\n\n\n\n\n\n\nMehr Arbeitsstunden\n\n\nTiefe Arbeitslosenquote in der Schweiz\n\n\nGrund: Arbeitsmoral, vern\u00fcnftige L\u00f6hne\n\n\nH\u00f6here Quote durch Immigranten\n\n\n\n\n\n\nTechnischer Fortschritt\n\n\nSchweiz einer der innovativsten Standorte weltweit\n\n\nPatentschutz (20 J.) f\u00f6rdert Innovation\n\n\n\n\n\n\nArbeitsproduktivit\u00e4t\n\n\nSchweiz international schlecht aufgestellt, hinter FR, DE, USA\n\n\n1970 war Schweiz das produktivste Land\n\n\n\n\n\n\n\n\nProduktivit\u00e4tsschw\u00e4che der Schweiz\n\n\n\n\nWachstum der Staatsquote\n\n\nStarke Sozialisierung\n\n\n\n\n\n\nImmigration\n\n\nSch\u00e4dlich, wenn nur geringqualifizierte\n\n\nnicht das grosse Problem\n\n\n\n\n\n\n\n\nAbschottung des Binnenmarkts\n\n\n\n\nz.B. Online-Gl\u00fccksspielgesetz\n\n\nRestriktiver Import von z.B. Wein, Fleisch\n\n\n-\n \"Hochpreisinsel\"\n\n\n\n\n\n\n\n\nStaatsquote: Anteil des BIP am \u00f6ffentlichen Konsum und \u00f6ffentliche Bruttoinvestitionen\n\n\n\n\nStaatsquote ist in der Schweiz noch klein im Vergleich, aber w\u00e4chst am schnellsten\n\n\n\n\nEind\u00e4mmung der Staatsquote\n\n\n\n\n2004-2008: Nicht funktioniert\n\n\n2008-2011: 2. Paket mit sehr \u00e4hnlichen Massnahmen, kein Erfolg\n\n\n2012-2015: 3. Plan, wieder die gleichen Massnahmen\n\n\n\n\n2016-2019: 4. Plan\n\n\n\n\n\n\nGrund: Schweizer wollen Unabh\u00e4ngigkeit behalten", 
            "title": "4 Arbeitsmarkt"
        }, 
        {
            "location": "/VwlTg/4_Arbeitsmarkt/#langfristiges-wachstum", 
            "text": "", 
            "title": "Langfristiges Wachstum"
        }, 
        {
            "location": "/VwlTg/4_Arbeitsmarkt/#bedeutung-des-langfristigen-wirtschaftswachstums", 
            "text": "Zweiter WK hatte langfristig keinen Effekt auf das Wachstum, weder in Japan noch USA  1960 - 1980: Japan hat USA aufgeholt, seit 1990 ist l\u00fccke wieder gr\u00f6sser", 
            "title": "Bedeutung des langfristigen Wirtschaftswachstums"
        }, 
        {
            "location": "/VwlTg/4_Arbeitsmarkt/#langfristiger-wachstumstrend", 
            "text": "Konjukturverlauf ist genauer Verlauf, der schwankt  Wachstumstrend ist durchschnitt \u00fcber einen l\u00e4ngeren Zeitraum", 
            "title": "Langfristiger Wachstumstrend"
        }, 
        {
            "location": "/VwlTg/4_Arbeitsmarkt/#erfolgsfaktoren", 
            "text": "Produktivit\u00e4t wird gemessen in BIP / Arbeitsstunden  Damit BIP / Kopf w\u00e4chst, muss mehr oder effizienter gearbeitet werden  Um Produktivit\u00e4t zu erh\u00f6hen, kann Kapital aufgewendet oder in Technologie investiert werden (technischer Fortschritt)  Innovation ist einzige \"unendliche\" Ressource  Dadurch k\u00f6nnte das Wachstum immer weiter gehen    Weitere externe Faktoren der Wirtschaftspolitik", 
            "title": "Erfolgsfaktoren"
        }, 
        {
            "location": "/VwlTg/4_Arbeitsmarkt/#wachstum-im-vergleich", 
            "text": "Wachstum in der Schweiz nahm 1970-2000 stark ab  Seit 2000 wieder leicht besser  Aber insgesamt sinkendes Wachstum", 
            "title": "Wachstum im Vergleich"
        }, 
        {
            "location": "/VwlTg/4_Arbeitsmarkt/#grunde", 
            "text": "Exogene Faktoren  Kein Seezugang ist ein Nachteil  Sozialkapital, Klima, Rohstoffe hier kein Problem    Wirtschaftspolitik  ??    Mehr Arbeitsstunden  Tiefe Arbeitslosenquote in der Schweiz  Grund: Arbeitsmoral, vern\u00fcnftige L\u00f6hne  H\u00f6here Quote durch Immigranten    Technischer Fortschritt  Schweiz einer der innovativsten Standorte weltweit  Patentschutz (20 J.) f\u00f6rdert Innovation    Arbeitsproduktivit\u00e4t  Schweiz international schlecht aufgestellt, hinter FR, DE, USA  1970 war Schweiz das produktivste Land", 
            "title": "Gr\u00fcnde"
        }, 
        {
            "location": "/VwlTg/4_Arbeitsmarkt/#produktivitatsschwache-der-schweiz", 
            "text": "Wachstum der Staatsquote  Starke Sozialisierung    Immigration  Sch\u00e4dlich, wenn nur geringqualifizierte  nicht das grosse Problem     Abschottung des Binnenmarkts   z.B. Online-Gl\u00fccksspielgesetz  Restriktiver Import von z.B. Wein, Fleisch  -  \"Hochpreisinsel\"     Staatsquote: Anteil des BIP am \u00f6ffentlichen Konsum und \u00f6ffentliche Bruttoinvestitionen   Staatsquote ist in der Schweiz noch klein im Vergleich, aber w\u00e4chst am schnellsten", 
            "title": "Produktivit\u00e4tsschw\u00e4che der Schweiz"
        }, 
        {
            "location": "/VwlTg/4_Arbeitsmarkt/#eindammung-der-staatsquote", 
            "text": "2004-2008: Nicht funktioniert  2008-2011: 2. Paket mit sehr \u00e4hnlichen Massnahmen, kein Erfolg  2012-2015: 3. Plan, wieder die gleichen Massnahmen   2016-2019: 4. Plan    Grund: Schweizer wollen Unabh\u00e4ngigkeit behalten", 
            "title": "Eind\u00e4mmung der Staatsquote"
        }, 
        {
            "location": "/VwlTg/4_Wachstum/", 
            "text": "", 
            "title": "4 Wachstum"
        }
    ]
}