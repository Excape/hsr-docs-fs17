{
    "docs": [
        {
            "location": "/", 
            "text": "HSR Notizen\n\n\nSpring Semester '17\n\n\n\n\nDatenbanksysteme 2\n\n\nEngineering-Projekt\n\n\nInformationssicherheit 3\n\n\nWirtschaftsinformatik 1 - IT im Business\n\n\nParallele Programmierung\n\n\nPhysik Anwendungen f\u00fcr Informatik\n\n\nSoftware-Engineering 2\n\n\nVerteilte SW-Systeme\n\n\nVolkswirtschaft und Technikgeschichte\n\n\n\n\nLinks\n\n\n\n\nSlack: \nhttps://hsr-students.slack.com\n\n\nMathJax Syntax\n\n\nMkDocs User-Guide\n\n\nMarkdown Cheatsheet", 
            "title": "Home"
        }, 
        {
            "location": "/#hsr-notizen", 
            "text": "", 
            "title": "HSR Notizen"
        }, 
        {
            "location": "/#spring-semester-17", 
            "text": "Datenbanksysteme 2  Engineering-Projekt  Informationssicherheit 3  Wirtschaftsinformatik 1 - IT im Business  Parallele Programmierung  Physik Anwendungen f\u00fcr Informatik  Software-Engineering 2  Verteilte SW-Systeme  Volkswirtschaft und Technikgeschichte", 
            "title": "Spring Semester '17"
        }, 
        {
            "location": "/#links", 
            "text": "Slack:  https://hsr-students.slack.com  MathJax Syntax  MkDocs User-Guide  Markdown Cheatsheet", 
            "title": "Links"
        }, 
        {
            "location": "/playground/", 
            "text": "Markdown Playground\n\n\nDies ist etwas normaler Text mit etwas \nkursiver\n schrift und etwas \nbold\n schrift\n\n\n\n\nDies ist Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text\nzweite Zeile\n\n\n\n\n\n  \npublic\n \nclass\n \nTestClass\n()\n \n{\n\n    \nint\n \nvar\n \n=\n \n1\n;\n\n    \npublic\n \nmethod\n()\n \n{\n\n      \nreturn\n \nvar\n;\n\n    \n}\n\n  \n}\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n2\n\n\n3\n\n\n\n\n\n\n\n\n\n\n1\n\n\netwas\n\n\nanderes\n\n\n\n\n\n\n2\n\n\nals\n\n\nhier\n\n\n\n\n\n\n\n\n\n\nNotiz\n\n\nTest Notiz mit etwas Text drin\n\n\n\n\n\n\nDanger\n\n\nGefahr!\n\n\n\n\n\n\nWarning\n\n\nWarnung!\n\n\n\n\nInline Math: \n x_i^2 * \\frac{(n^2 * n) - 1}{\\Omega} \n\n\n\n\nDisplay Math:\n\n\\sum_{i=0}^n i^2\n\n\n\n\nGruppen mit \n{}\n: \n{10}^5\n\n\n\n\n\n\nA \\rightarrow B \n\n\n\\lim_{x\\to \\infty} \\sin x", 
            "title": "Playground"
        }, 
        {
            "location": "/playground/#markdown-playground", 
            "text": "Dies ist etwas normaler Text mit etwas  kursiver  schrift und etwas  bold  schrift   Dies ist Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text\nzweite Zeile     public   class   TestClass ()   { \n     int   var   =   1 ; \n     public   method ()   { \n       return   var ; \n     } \n   }      1  2  3      1  etwas  anderes    2  als  hier      Notiz  Test Notiz mit etwas Text drin    Danger  Gefahr!    Warning  Warnung!   Inline Math:   x_i^2 * \\frac{(n^2 * n) - 1}{\\Omega}    Display Math: \\sum_{i=0}^n i^2   Gruppen mit  {} :  {10}^5    A \\rightarrow B   \\lim_{x\\to \\infty} \\sin x", 
            "title": "Markdown Playground"
        }, 
        {
            "location": "/Dbs2/0_Index/", 
            "text": "Datenbanksysteme 2\n\n\n\n\nExam Notes", 
            "title": "0 Index"
        }, 
        {
            "location": "/Dbs2/0_Index/#datenbanksysteme-2", 
            "text": "Exam Notes", 
            "title": "Datenbanksysteme 2"
        }, 
        {
            "location": "/Dbs2/1_Exam/", 
            "text": "Some exam notes...", 
            "title": "1 Exam"
        }, 
        {
            "location": "/Dbs2/2_OR-Mapping/", 
            "text": "OR Mapping\n\n\nZiel: Gap zwischen Objektmodell der Applikation und (meist) relationales Modell der Datenbanken \u00fcberwinden\n\n\nJava Persistence API (JPA)\n\n\n\n\nJPA ist ein Layer zwischen JDBC und dem Programm\n\n\nJPA ist nur eine Definition, implementiert von Providern\n\n\nHier wird die EclipseLink-Implementierung verwendet (Hibernate w\u00e4re ein anderer Provider)\n\n\n\n\nEntities\n\n\n\n\nEntities sind POJO's mit ID-Feld f\u00fcr PK mit default-Konstruktor\n\n\nD\u00fcrfen nicht final sein (wegen z.B. lazy-loading)\n\n\nAbbildung in DB \u00fcber Annotations oder sepparates XML-File\n\n\nAnnotation \n@Entity\n f\u00fcr Klasse, \n@Id\n f\u00fcr PK-Feld\n\n\n\n\nBeispiel\n\n\n@Entity\n\n\npublic\n \nclass\n \nBankCustomer\n \n{\n\n    \n@Id\n\n    \nprivate\n \nlong\n \nid\n;\n\n\n    \npublic\n \nlong\n \ngetId\n()\n \n{\n\n        \nreturn\n \nid\n;\n\n    \n}\n\n    \nprivate\n \nString\n \nname\n;\n\n    \npublic\n \nString\n \ngetName\n()\n \n{\n\n        \nreturn\n \nname\n;\n\n    \n}\n\n    \npublic\n \nvoid\n \nsetName\n(\nString\n \nname\n)\n \n{\n\n        \nthis\n.\nname\n \n=\n \nname\n;\n\n    \n}\n\n\n}\n\n\n\n\n\n\npersistence.xml\n\n\npersistence\n \nxmlns:xsi=\nhttp://www.w3.org/2001/XMLSchema-instance\n\n    \nxsi:schemaLocation=\nhttp://java.sun.com/xml/ns/persistence\n\n\n        http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd\n\n    \nversion=\n2.0\n \nxmlns=\nhttp://java.sun.com/xml/ns/persistence\n\n\npersistence-unit\n \nname=\nBank\n \ntransaction-type=\nRESOURCE_LOCAL\n\n    \nprovider\norg.eclipse.persistence.jpa.PersistenceProvider\n/provider\n\n    \nexclude-unlisted-classes\nfalse\n/exclude-unlisted-classes\n\n        \nproperties\n\n            \nproperty\n \nname=\njavax.persistence.jdbc.driver\n\n                \nvalue=\norg.postgresql.Driver\n/\n\n            \nproperty\n \nname=\njavax.persistence.jdbc.url\n\n                \nvalue=\njdbc:postgresql:jpatest\n/\n\n            \nproperty\n \nname=\njavax.persistence.jdbc.user\n \nvalue=\ntest\n/\n\n            \nproperty\n \nname=\njavax.persistence.jdbc.password\n \nvalue=\ntest\n/\n\n            \nproperty\n \nname=\neclipselink.target-database\n \nvalue=\nPostgreSQL\n/\n\n        \n/properties\n\n    \n/persistence-unit\n\n\n/persistence\n\n\n\n\n\n\nEntities CRUD\n\n\n// SELECT\n\n\nEntityManagerFactory\n \nfactory\n \n=\n\n    \nPersistence\n.\ncreateEntityManagerFactory\n(\nBank\n);\n\n\nEntityManager\n \nem\n \n=\n \nfactory\n.\ncreateEntityManager\n();\n\n\nQuery\n \nquery\n \n=\n \nem\n.\ncreateQuery\n(\nSELECT a FROM BankAccount a\n);\n\n\nList\nBankAccount\n \nlist\n \n=\n \nquery\n.\ngetResultList\n();\n\n\nfor\n \n(\nBankAccount\n \naccount\n \n:\n \nlist\n)\n \n{\n\n    \nSystem\n.\nout\n.\nprintln\n(\naccount\n);\n\n\n}\n\n\nem\n.\nclose\n();\n \n// besser mit try-with-ressources\n\n\n\n// INSERT\n\n\nem\n.\ngetTransaction\n().\nbegin\n();\n\n\nBankCustomer\n \ncustomer\n \n=\n \nnew\n \nBankCustomer\n();\n\n\ncustomer\n.\nsetName\n(\nBill\n);\n\n\nem\n.\npersist\n(\ncustomer\n);\n \n// INSERT and SELECT, customer hat jetzt seine ID\n\n\nem\n.\ngetTransaction\n().\ncommit\n();\n\n\nem\n.\nclose\n();\n\n\n\n// UPDATE\n\n\nem\n.\ngetTransaction\n().\nbegin\n();\n\n\nBankAccount\n \naccount\n \n=\n \nem\n.\nfind\n(\nBankAccount\n.\nclass\n,\n \n1L\n);\n\n\naccount\n.\nincBalance\n(\n100\n);\n\n\nem\n.\ngetTransaction\n().\ncommit\n();\n\n\n\n// DELETE\n\n\n// nicht effizient, Java-Object wird erst durch GC aufger\u00e4umt\n\n\nem\n.\ngetTransaction\n().\nbegin\n();\n\n\nBankAccount\n \naccount\n \n=\n \nem\n.\nfind\n(\nBankAccount\n.\nclass\n,\n \n1L\n);\n\n\nem\n.\nremove\n(\naccount\n);\n\n\nem\n.\ngetTransaction\n().\ncommit\n();\n\n\n\n\n\n\nTable Mapping\n\n\n@Entity\n\n\n@Table\n(\nname\n \n=\n \naccount\n)\n\n\npublic\n \nclass\n \nBankAccount\n \n{\n\n    \n@Id\n\n    \n@Column\n(\nname\n \n=\n \naccountid\n)\n\n    \nprivate\n \nlong\n \nid\n;\n\n\n    \nprivate\n \ndouble\n \nbalance\n;\n \n// 1:1 Mapping\n\n\n    \n@Column\n(\nname\n \n=\n \ndescription\n)\n\n    \nprivate\n \nString\n \nexplanation\n;\n\n\n    \n@Column\n(\nname\n=\n\u201c\nssn\n\u201c\n,\n \nunique\n=\ntrue\n,\n \nnullable\n=\ntrue\n)\n\n    \nprivate\n \nlong\n \nssn\n;\n\n\n    \n@Column\n(\nname\n=\n\u201c\nl_name\n\u201c\n,\n \nlength\n=\n200\n)\n\n    \nprivate\n \nString\n \nlastName\n;\n\n\n    \n//Zusatzinfo, wird als TIMESTAMP abgelegt\n\n    \n@Temporal\n(\nTemporalType\n.\nTIMESTAMP\n)\n \n    \nprivate\n \nCalendar\n \ncreationDate\n;\n\n\n    \n@Transient\n \n// wird nicht gemapped\n\n    \nprivate\n \nString\n \ntempComments\n;\n\n    \n// getter und setter\n\n\n}\n\n\n\n\n\n\n\n\nWeitere Attribute: \nscale\n, \nprecision\n\n\n\n\nRelationen\n\n\n// 1:1 Mapping\n\n\n@Entity\n\n\n@Table\n(\nname\n \n=\n \nbankcustomer\n)\n\n\npublic\n \nclass\n \nBankCustomer\n \n{\n\n    \n@OneToOne\n(\noptional\n \n=\n \ntrue\n)\n\n    \n@JoinColumn\n(\nname\n \n=\n \naddressref\n)\n\n    \nprivate\n \nAddress\n \naddress\n;\n\n    \n// ...\n\n\n}\n\n\n\n// Bidirectional 1:1 mapping, Datenbank bleibt gleich\n\n\n@Entity\n\n\npublic\n \nclass\n \nAddress\n \n{\n\n    \n@OneToOne\n(\nmappedBy\n \n=\n \naddress\n)\n\n    \nprivate\n \nBankCustomer\n \ncustomer\n;\n\n    \n// ...\n\n\n}\n\n\n\n// N:1 Mapping\n\n\nclass\n \nBankAccount\n \n{\n\n    \n@ManyToOne\n(\noptional\n \n=\n \nfalse\n)\n\n    \n@JoinColumn\n(\nname\n \n=\n \ncustomerref\n)\n\n    \nprivate\n \nBankCustomer\n \ncustomer\n;\n\n    \n//...\n\n\n}\n\n\n\n// Bidirectional N:1 \n\n\nclass\n \nBankCustomer\n \n{\n\n    \n@OneToMany\n(\nmappedBy\n \n=\n \ncustomer\n)\n\n    \nprivate\n \nCollection\nBankAccount\n \naccounts\n;\n \n// = ...\n\n    \n// ...\n\n\n}\n\n\n// N:M maping\n\n\nclass\n \nBankManager\n \n{\n\n    \n@ManyToMany\n\n    \n@JoinTable\n(\nname\n \n=\n \ncustomer_manager\n,\n\n        \njoinColumns\n \n=\n \n{\n@JoinColumn\n(\nname\n \n=\n \nmanagerref\n)},\n\n        \ninverseJoinColumns\n \n=\n \n{\n@JoinColumn\n(\nname\n \n=\n \ncustomerref\n)})\n\n    \nprivate\n \nCollection\nBankCustomer\n \ncustomers\n;\n \n// = ...\n\n\n}\n\n\n\n\n\n\n\n\nBei bidirektionalen Beziehungen m\u00fcssen beide Seiten manuell gesetzt werden (im Gegensatz zu z.B. EF)\n\n\nIm Beispiel muss beim Hinzuf\u00fcgen eines \nBankAccount\n dieser der Liste in der \nBankCustomer\n hinzugef\u00fcgt werden\n\n\n\n\n\n\nLazy-Loading ist per default aktiviert f\u00fcr 1:n und n:m\n\n\nBsp: Wenn \nBankCustomer\n geladen werden, wird die \nBankAccounts\n-Liste lazy mit \ncustomer.getAccounts()\n geladen\n\n\n\n\n\n\nEager-Loading standard bei 1:1 und n:1\n\n\nExplizit angeben mit z.B. \n@ManyToMany(fetch = FetchType.EAGER)\n\n\n\n\nPersistence-Context\n\n\n\n\nEin Objekt ist neu erstellt erstmal \nunmanaged\n\n\nWird es in die DB eingef\u00fcgt \npersist()\n, ist es \nmanaged\n und somit im Persistence-Context\n\n\nWird die Verbindung geschlossen (\nclose()\n) oder removed, sind die Objekte wieder \nunmanaged", 
            "title": "2 OR Mapping"
        }, 
        {
            "location": "/Dbs2/2_OR-Mapping/#or-mapping", 
            "text": "Ziel: Gap zwischen Objektmodell der Applikation und (meist) relationales Modell der Datenbanken \u00fcberwinden", 
            "title": "OR Mapping"
        }, 
        {
            "location": "/Dbs2/2_OR-Mapping/#java-persistence-api-jpa", 
            "text": "JPA ist ein Layer zwischen JDBC und dem Programm  JPA ist nur eine Definition, implementiert von Providern  Hier wird die EclipseLink-Implementierung verwendet (Hibernate w\u00e4re ein anderer Provider)", 
            "title": "Java Persistence API (JPA)"
        }, 
        {
            "location": "/Dbs2/2_OR-Mapping/#entities", 
            "text": "Entities sind POJO's mit ID-Feld f\u00fcr PK mit default-Konstruktor  D\u00fcrfen nicht final sein (wegen z.B. lazy-loading)  Abbildung in DB \u00fcber Annotations oder sepparates XML-File  Annotation  @Entity  f\u00fcr Klasse,  @Id  f\u00fcr PK-Feld", 
            "title": "Entities"
        }, 
        {
            "location": "/Dbs2/2_OR-Mapping/#beispiel", 
            "text": "@Entity  public   class   BankCustomer   { \n     @Id \n     private   long   id ; \n\n     public   long   getId ()   { \n         return   id ; \n     } \n     private   String   name ; \n     public   String   getName ()   { \n         return   name ; \n     } \n     public   void   setName ( String   name )   { \n         this . name   =   name ; \n     }  }", 
            "title": "Beispiel"
        }, 
        {
            "location": "/Dbs2/2_OR-Mapping/#persistencexml", 
            "text": "persistence   xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance \n     xsi:schemaLocation= http://java.sun.com/xml/ns/persistence          http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd \n     version= 2.0   xmlns= http://java.sun.com/xml/ns/persistence  persistence-unit   name= Bank   transaction-type= RESOURCE_LOCAL \n     provider org.eclipse.persistence.jpa.PersistenceProvider /provider \n     exclude-unlisted-classes false /exclude-unlisted-classes \n         properties \n             property   name= javax.persistence.jdbc.driver \n                 value= org.postgresql.Driver / \n             property   name= javax.persistence.jdbc.url \n                 value= jdbc:postgresql:jpatest / \n             property   name= javax.persistence.jdbc.user   value= test / \n             property   name= javax.persistence.jdbc.password   value= test / \n             property   name= eclipselink.target-database   value= PostgreSQL / \n         /properties \n     /persistence-unit  /persistence", 
            "title": "persistence.xml"
        }, 
        {
            "location": "/Dbs2/2_OR-Mapping/#entities-crud", 
            "text": "// SELECT  EntityManagerFactory   factory   = \n     Persistence . createEntityManagerFactory ( Bank );  EntityManager   em   =   factory . createEntityManager ();  Query   query   =   em . createQuery ( SELECT a FROM BankAccount a );  List BankAccount   list   =   query . getResultList ();  for   ( BankAccount   account   :   list )   { \n     System . out . println ( account );  }  em . close ();   // besser mit try-with-ressources  // INSERT  em . getTransaction (). begin ();  BankCustomer   customer   =   new   BankCustomer ();  customer . setName ( Bill );  em . persist ( customer );   // INSERT and SELECT, customer hat jetzt seine ID  em . getTransaction (). commit ();  em . close ();  // UPDATE  em . getTransaction (). begin ();  BankAccount   account   =   em . find ( BankAccount . class ,   1L );  account . incBalance ( 100 );  em . getTransaction (). commit ();  // DELETE  // nicht effizient, Java-Object wird erst durch GC aufger\u00e4umt  em . getTransaction (). begin ();  BankAccount   account   =   em . find ( BankAccount . class ,   1L );  em . remove ( account );  em . getTransaction (). commit ();", 
            "title": "Entities CRUD"
        }, 
        {
            "location": "/Dbs2/2_OR-Mapping/#table-mapping", 
            "text": "@Entity  @Table ( name   =   account )  public   class   BankAccount   { \n     @Id \n     @Column ( name   =   accountid ) \n     private   long   id ; \n\n     private   double   balance ;   // 1:1 Mapping \n\n     @Column ( name   =   description ) \n     private   String   explanation ; \n\n     @Column ( name = \u201c ssn \u201c ,   unique = true ,   nullable = true ) \n     private   long   ssn ; \n\n     @Column ( name = \u201c l_name \u201c ,   length = 200 ) \n     private   String   lastName ; \n\n     //Zusatzinfo, wird als TIMESTAMP abgelegt \n     @Temporal ( TemporalType . TIMESTAMP )  \n     private   Calendar   creationDate ; \n\n     @Transient   // wird nicht gemapped \n     private   String   tempComments ; \n     // getter und setter  }    Weitere Attribute:  scale ,  precision", 
            "title": "Table Mapping"
        }, 
        {
            "location": "/Dbs2/2_OR-Mapping/#relationen", 
            "text": "// 1:1 Mapping  @Entity  @Table ( name   =   bankcustomer )  public   class   BankCustomer   { \n     @OneToOne ( optional   =   true ) \n     @JoinColumn ( name   =   addressref ) \n     private   Address   address ; \n     // ...  }  // Bidirectional 1:1 mapping, Datenbank bleibt gleich  @Entity  public   class   Address   { \n     @OneToOne ( mappedBy   =   address ) \n     private   BankCustomer   customer ; \n     // ...  }  // N:1 Mapping  class   BankAccount   { \n     @ManyToOne ( optional   =   false ) \n     @JoinColumn ( name   =   customerref ) \n     private   BankCustomer   customer ; \n     //...  }  // Bidirectional N:1   class   BankCustomer   { \n     @OneToMany ( mappedBy   =   customer ) \n     private   Collection BankAccount   accounts ;   // = ... \n     // ...  }  // N:M maping  class   BankManager   { \n     @ManyToMany \n     @JoinTable ( name   =   customer_manager , \n         joinColumns   =   { @JoinColumn ( name   =   managerref )}, \n         inverseJoinColumns   =   { @JoinColumn ( name   =   customerref )}) \n     private   Collection BankCustomer   customers ;   // = ...  }    Bei bidirektionalen Beziehungen m\u00fcssen beide Seiten manuell gesetzt werden (im Gegensatz zu z.B. EF)  Im Beispiel muss beim Hinzuf\u00fcgen eines  BankAccount  dieser der Liste in der  BankCustomer  hinzugef\u00fcgt werden    Lazy-Loading ist per default aktiviert f\u00fcr 1:n und n:m  Bsp: Wenn  BankCustomer  geladen werden, wird die  BankAccounts -Liste lazy mit  customer.getAccounts()  geladen    Eager-Loading standard bei 1:1 und n:1  Explizit angeben mit z.B.  @ManyToMany(fetch = FetchType.EAGER)", 
            "title": "Relationen"
        }, 
        {
            "location": "/Dbs2/2_OR-Mapping/#persistence-context", 
            "text": "Ein Objekt ist neu erstellt erstmal  unmanaged  Wird es in die DB eingef\u00fcgt  persist() , ist es  managed  und somit im Persistence-Context  Wird die Verbindung geschlossen ( close() ) oder removed, sind die Objekte wieder  unmanaged", 
            "title": "Persistence-Context"
        }, 
        {
            "location": "/EPJ/0_Index/", 
            "text": "Engineering-Projekt", 
            "title": "0 Index"
        }, 
        {
            "location": "/EPJ/0_Index/#engineering-projekt", 
            "text": "", 
            "title": "Engineering-Projekt"
        }, 
        {
            "location": "/EPJ/1_Projektplan/", 
            "text": "Projektplanung\n\n\nMilestones\n\n\n\n\n(Projektplan)\n\n\nAnalyse / Domain Model / Use Cases\n\n\nEnd of Elaboration\n\n\nServer-Logik (nach 1. Construction Iteration)\n\n\nUsability Testing beginnnen (nach 2 construction iteration)\n\n\nFeature Freeze\n\n\n(Code Freeze) - End of Construction\n\n\n\n\nProjektplan\n\n\n\n\nabgemachte Code Reviews?\n\n\nTesting Metriken?\n\n\n\n\nArbeitspakete\n\n\n\n\nMaximale Zeitaufwand festlegen (10h?)\n\n\nZeit pro Arbeitspaket sch\u00e4tzen / Prio setzen\n\n\nEinteilung in kategorien und Milestones\n\n\n\n\nN\u00e4chste Arbeitspakete \n\n- Recherche Framework\n- Auswertung Zeit von Gitlab\n- Technologie festlegen\n- Requirements definieren\n- NF-Requirements definieren\n- Use Cases brief\n- Wichtigste Use Cases casual\n- Domain Modell erstellen\n- Architektur festlegen\n\n\nWeitere f\u00fcr Elaboration-Phase:\n- Build-Toolchain einrichten (Gitlab CI)\n- Static Code analysis? \n- UI-Prototypen\n- Backend-Prototypen mit Architektur, Datenbank und minimaler Logik", 
            "title": "1 Projektplan"
        }, 
        {
            "location": "/EPJ/1_Projektplan/#projektplanung", 
            "text": "", 
            "title": "Projektplanung"
        }, 
        {
            "location": "/EPJ/1_Projektplan/#milestones", 
            "text": "(Projektplan)  Analyse / Domain Model / Use Cases  End of Elaboration  Server-Logik (nach 1. Construction Iteration)  Usability Testing beginnnen (nach 2 construction iteration)  Feature Freeze  (Code Freeze) - End of Construction", 
            "title": "Milestones"
        }, 
        {
            "location": "/EPJ/1_Projektplan/#projektplan", 
            "text": "abgemachte Code Reviews?  Testing Metriken?", 
            "title": "Projektplan"
        }, 
        {
            "location": "/EPJ/1_Projektplan/#arbeitspakete", 
            "text": "Maximale Zeitaufwand festlegen (10h?)  Zeit pro Arbeitspaket sch\u00e4tzen / Prio setzen  Einteilung in kategorien und Milestones   N\u00e4chste Arbeitspakete  \n- Recherche Framework\n- Auswertung Zeit von Gitlab\n- Technologie festlegen\n- Requirements definieren\n- NF-Requirements definieren\n- Use Cases brief\n- Wichtigste Use Cases casual\n- Domain Modell erstellen\n- Architektur festlegen  Weitere f\u00fcr Elaboration-Phase:\n- Build-Toolchain einrichten (Gitlab CI)\n- Static Code analysis? \n- UI-Prototypen\n- Backend-Prototypen mit Architektur, Datenbank und minimaler Logik", 
            "title": "Arbeitspakete"
        }, 
        {
            "location": "/ITBus/0_Index/", 
            "text": "Wirtschaftsinformatik 1 - IT im Business\n\n\n\n\nExam Notes", 
            "title": "0 Index"
        }, 
        {
            "location": "/ITBus/0_Index/#wirtschaftsinformatik-1-it-im-business", 
            "text": "Exam Notes", 
            "title": "Wirtschaftsinformatik 1 - IT im Business"
        }, 
        {
            "location": "/ITBus/1_Exam/", 
            "text": "Exam\n\n\n\n\nTestatbedingungen\n\n\nAnwesenheit Gastvortr\u00e4ge 04.05 und 18.05\n\n\n\n\n\n\nGastreferate sind auch Pr\u00fcfungsstoff!", 
            "title": "1 Exam"
        }, 
        {
            "location": "/ITBus/1_Exam/#exam", 
            "text": "Testatbedingungen  Anwesenheit Gastvortr\u00e4ge 04.05 und 18.05    Gastreferate sind auch Pr\u00fcfungsstoff!", 
            "title": "Exam"
        }, 
        {
            "location": "/InfSi3/0_Index/", 
            "text": "Informationssicherheit 3\n\n\n\n\nExam Notes", 
            "title": "0 Index"
        }, 
        {
            "location": "/InfSi3/0_Index/#informationssicherheit-3", 
            "text": "Exam Notes", 
            "title": "Informationssicherheit 3"
        }, 
        {
            "location": "/InfSi3/1_Exam/", 
            "text": "Exam\n\n\n\n\nPr\u00fcfung ohne Unterlagen\n\n\nSelbststudium ist Pr\u00fcfungsstoff!", 
            "title": "1 Exam"
        }, 
        {
            "location": "/InfSi3/1_Exam/#exam", 
            "text": "Pr\u00fcfung ohne Unterlagen  Selbststudium ist Pr\u00fcfungsstoff!", 
            "title": "Exam"
        }, 
        {
            "location": "/InfSi3/2_Overview/", 
            "text": "Overview, Legal Aspects and Global Threats", 
            "title": "2 Overview"
        }, 
        {
            "location": "/InfSi3/2_Overview/#overview-legal-aspects-and-global-threats", 
            "text": "", 
            "title": "Overview, Legal Aspects and Global Threats"
        }, 
        {
            "location": "/ParProg/0_Index/", 
            "text": "Parallele Programmierung\n\n\n\n\nExam Notes\n\n\nMulti-Threading Grundlagen", 
            "title": "0 Index"
        }, 
        {
            "location": "/ParProg/0_Index/#parallele-programmierung", 
            "text": "Exam Notes  Multi-Threading Grundlagen", 
            "title": "Parallele Programmierung"
        }, 
        {
            "location": "/ParProg/1_Exam/", 
            "text": "Exam\n\n\nHilfsmittel\n\n\n\n\n1 A4 beidseitig", 
            "title": "1 Exam"
        }, 
        {
            "location": "/ParProg/1_Exam/#exam", 
            "text": "", 
            "title": "Exam"
        }, 
        {
            "location": "/ParProg/1_Exam/#hilfsmittel", 
            "text": "1 A4 beidseitig", 
            "title": "Hilfsmittel"
        }, 
        {
            "location": "/ParProg/2_Multi-Threading_Grundlagen/", 
            "text": "Multi-Threading Grundlagen\n\n\nMotivation\n\n\n\n\nReale Prozesse abbilden (Druckjobs, Server-Client)\n\n\nPerfromance-Steigerung\n\n\n\n\nSeit 2003 stagnieren Taktraten, stattdessen wird mehr auf Hyperthreading und mehrere Kerne gesetzt. Deshalb m\u00fcssen Programme darauf optimiert werden\n\n\n\n\n\n\nHyperthreading (Virtual Threading): Ein CPU-Core hat zwei Register-Sets, aber immer noch nur ein Rechenwerk (ALU)\n\n\n\n\nIst nicht \"echte\" Parallelisierung\n\n\n\n\n\n\n\n\nParallelit\u00e4t vs. Nebenl\u00e4ufigkeit\n\n\n\n\nParallelit\u00e4t\n:  Zerlegung eines Ablaufs in mehrere Teilabl\u00e4ufe, welche gleichzeitig auf mehreren Prozessoren laufen\n\n\nNebenl\u00e4ufigkeit\n (Concurrency): Gleichzeitig oder verzahnt ausf\u00fchrbare Abl\u00e4ufe, welche auf gemeinsame Ressourcen zugreifen.\n\n\n\u00c4lteres Prinzip, z.B. Drucker\n\n\nKann anschein von Parallelit\u00e4t haben, aber es wird immer nur etwas auf einmal ausgef\u00fchrt\n\n\n\n\n\n\n\n\n\n\nSystem Grundlagen Repetition\n\n\nThreads\n\n\n\n\nParallele Ablaufsequenz innerhalb eines Programms, teilen den Adressraum mit dem ganzen Prozess\n\n\nIst g\u00fcnstiger als eigener Prozess, braucht keine eigene Pagetable\n\n\nJeder Thread hat eigenen Stack\n\n\nUser-Level-Thread: Im Prozess implementiert, keine echte Parallelit\u00e4t durch mehrere Prozessoren\n\n\nKernel-Level-Thread: Im Kernel implementiert, kann Multi-Core ausnutzen. Wechsel per SW-Interrupt, ist also nicht ganz \"gratis\"\n\n\nScheduling: Ein CPU-Core kann immer nur ein Thread gleichzeitig ausf\u00fchren. Scheduler teilt die Threads zu\n\n\nWenn nur ein Prozessor Threads verarbeitet, ist es eine Quasi-Parallelisierung\n\n\n\n\nProgrammierung hat f\u00fcr \"echte\" oder \"quasi\"-Parallelit\u00e4t die gleichen Probleme, weil man nie weiss, wann die Kontextwechsel geschehen\n\n\n\n\n\n\nKontextwechsel\n\n\n\n\nSynchron\n: Thread wartet auf Bedingung, gibt den Prozessor selbst frei\n\n\nAsynchron\n: Nach gewisser Zeit wird der Thread gewzungen, die CPU freizugeben\n\n\n\n\n\n\nMulti-Tasking\n\n\nKooperativ\n: Threads m\u00fcssen explizit synchrone Kontextwechsel initiieren\n\n\nPreemptive\n: Scheduler unterbricht den Thread \nasynchron\n in gewissen Zeitintervallen\n\n\nHeute in der Regel immer \npreemptive\n!\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nTodo: Bild Folie 30\n\n\n\n\nGrundlagen Java Threads\n\n\n\n\nJVM ist ein Single Process System\n\n\nMain-Thread f\u00fchrt die \nmain()\n-Methode aus (per Reflection)\n\n\nProgrammierer kann weitere Threads starten\n\n\nLaufzeitsystem startet auch eigene Threads, z.B. GC\n\n\nDie JVM l\u00e4uft solange, bis kein (nicht-Daemon-) Thread mehr l\u00e4uft\n\n\nDaemon-Thread ist z.B. GC, wird bei Ende der JVM unkontrolliert beendet\n\n\n\n\n\n\n\n\nclass\n \nSimpleThread\n \nextends\n \nThread\n \n{\n\n    \n@Override\n\n    \npublic\n \nvoid\n \nrun\n()\n \n{\n\n        \n// thread behavior\n\n\n        \n// thread ends when run() exits \n\n        \n// (or unhandled exception orccurs)\n\n    \n}\n\n\n}\n\n\nThread\n \nmyThread\n \n=\n \nnew\n \nSimpleThread\n();\n\n\nmyThread\n.\nstart\n();\n\n\n\n\n\n\n\n\nWenn unbehandelte Exception in Thread auftritt, laufen andere Threads weiter (in Java, andere Umgebungen anders)\n\n\nThreads laufen ohne Vorkehrungen beliebig verzahnt, \nnicht-deterministischer Ablauf!\n\n\n\n\nRunnable Implementierung statt Vererbung:\n\n\nclass\n \nSimpleLogic\n \nimplements\n \nRunnable\n \n{\n\n    \n@Override\n\n    \npublic\n \nvoid\n \nrun\n()\n \n{\n\n        \n// thread behavior\n\n    \n}\n\n\n}\n\n\n// Pass Runnable to Thread constructor!\n\n\nThread\n \nmyThread\n \n=\n \nnew\n \nThread\n(\nnew\n \nSimpleLogic\n());\n\n\nmyThread\n.\nstart\n();\n\n\n\n\n\n\n\n\nRunnable\n-Interface hat 1 Methode -\n Functional Interface!\n\n\nKann mit Lambdas verwendet werden\n\n\n\n\n\n\n\n\nThread\n \nmyThread\n \n=\n \nnew\n \nThread\n(()\n \n-\n \n{\n\n    \n// thread behavior\n\n\n});\n\n\nmyThread\n.\nstart\n();\n\n\n\n\n\n\n\n\nMit \nThread.sleep(t[ms])\n kann der Thread schlafen gelegt werden\n\n\nThread.yield()\n gibt Thread frei, aber wird gleich wieder \nready\n. Provoziert Thread-Wechsel\n\n\nSollte man nicht verwenden, weil OS das Scheduling selbst verwaltet\n\n\n\n\n\n\nt.join()\n wartet solange, bis der Thread \nt\n terminiert\n\n\n\n\nThread\n \nmyThread\n \n=\n \nnew\n \nThread\n(()\n \n-\n \n{\n\n    \n// thread behavior\n\n\n});\n\n\nmyThread\n.\nstart\n();\n\n\n// Thread started\n\n\nmyThread\n.\njoin\n();\n\n\n// Thread finished\n\n\n\n\n\n\n\n\nThreads k\u00f6nnen von Aussen unterbrochen werden mit \nt.interrupt()\n\n\nL\u00f6st \nInterruptedException\n aus\n\n\nWird meist missbraucht zum Aufbrechen von Blockaden (schlecht!)", 
            "title": "2 Multi Threading Grundlagen"
        }, 
        {
            "location": "/ParProg/2_Multi-Threading_Grundlagen/#multi-threading-grundlagen", 
            "text": "", 
            "title": "Multi-Threading Grundlagen"
        }, 
        {
            "location": "/ParProg/2_Multi-Threading_Grundlagen/#motivation", 
            "text": "Reale Prozesse abbilden (Druckjobs, Server-Client)  Perfromance-Steigerung   Seit 2003 stagnieren Taktraten, stattdessen wird mehr auf Hyperthreading und mehrere Kerne gesetzt. Deshalb m\u00fcssen Programme darauf optimiert werden    Hyperthreading (Virtual Threading): Ein CPU-Core hat zwei Register-Sets, aber immer noch nur ein Rechenwerk (ALU)   Ist nicht \"echte\" Parallelisierung", 
            "title": "Motivation"
        }, 
        {
            "location": "/ParProg/2_Multi-Threading_Grundlagen/#parallelitat-vs-nebenlaufigkeit", 
            "text": "Parallelit\u00e4t :  Zerlegung eines Ablaufs in mehrere Teilabl\u00e4ufe, welche gleichzeitig auf mehreren Prozessoren laufen  Nebenl\u00e4ufigkeit  (Concurrency): Gleichzeitig oder verzahnt ausf\u00fchrbare Abl\u00e4ufe, welche auf gemeinsame Ressourcen zugreifen.  \u00c4lteres Prinzip, z.B. Drucker  Kann anschein von Parallelit\u00e4t haben, aber es wird immer nur etwas auf einmal ausgef\u00fchrt", 
            "title": "Parallelit\u00e4t vs. Nebenl\u00e4ufigkeit"
        }, 
        {
            "location": "/ParProg/2_Multi-Threading_Grundlagen/#system-grundlagen-repetition", 
            "text": "", 
            "title": "System Grundlagen Repetition"
        }, 
        {
            "location": "/ParProg/2_Multi-Threading_Grundlagen/#threads", 
            "text": "Parallele Ablaufsequenz innerhalb eines Programms, teilen den Adressraum mit dem ganzen Prozess  Ist g\u00fcnstiger als eigener Prozess, braucht keine eigene Pagetable  Jeder Thread hat eigenen Stack  User-Level-Thread: Im Prozess implementiert, keine echte Parallelit\u00e4t durch mehrere Prozessoren  Kernel-Level-Thread: Im Kernel implementiert, kann Multi-Core ausnutzen. Wechsel per SW-Interrupt, ist also nicht ganz \"gratis\"  Scheduling: Ein CPU-Core kann immer nur ein Thread gleichzeitig ausf\u00fchren. Scheduler teilt die Threads zu  Wenn nur ein Prozessor Threads verarbeitet, ist es eine Quasi-Parallelisierung   Programmierung hat f\u00fcr \"echte\" oder \"quasi\"-Parallelit\u00e4t die gleichen Probleme, weil man nie weiss, wann die Kontextwechsel geschehen    Kontextwechsel   Synchron : Thread wartet auf Bedingung, gibt den Prozessor selbst frei  Asynchron : Nach gewisser Zeit wird der Thread gewzungen, die CPU freizugeben    Multi-Tasking  Kooperativ : Threads m\u00fcssen explizit synchrone Kontextwechsel initiieren  Preemptive : Scheduler unterbricht den Thread  asynchron  in gewissen Zeitintervallen  Heute in der Regel immer  preemptive !      Note  Todo: Bild Folie 30", 
            "title": "Threads"
        }, 
        {
            "location": "/ParProg/2_Multi-Threading_Grundlagen/#grundlagen-java-threads", 
            "text": "JVM ist ein Single Process System  Main-Thread f\u00fchrt die  main() -Methode aus (per Reflection)  Programmierer kann weitere Threads starten  Laufzeitsystem startet auch eigene Threads, z.B. GC  Die JVM l\u00e4uft solange, bis kein (nicht-Daemon-) Thread mehr l\u00e4uft  Daemon-Thread ist z.B. GC, wird bei Ende der JVM unkontrolliert beendet     class   SimpleThread   extends   Thread   { \n     @Override \n     public   void   run ()   { \n         // thread behavior \n\n         // thread ends when run() exits  \n         // (or unhandled exception orccurs) \n     }  }  Thread   myThread   =   new   SimpleThread ();  myThread . start ();    Wenn unbehandelte Exception in Thread auftritt, laufen andere Threads weiter (in Java, andere Umgebungen anders)  Threads laufen ohne Vorkehrungen beliebig verzahnt,  nicht-deterministischer Ablauf!   Runnable Implementierung statt Vererbung:  class   SimpleLogic   implements   Runnable   { \n     @Override \n     public   void   run ()   { \n         // thread behavior \n     }  }  // Pass Runnable to Thread constructor!  Thread   myThread   =   new   Thread ( new   SimpleLogic ());  myThread . start ();    Runnable -Interface hat 1 Methode -  Functional Interface!  Kann mit Lambdas verwendet werden     Thread   myThread   =   new   Thread (()   -   { \n     // thread behavior  });  myThread . start ();    Mit  Thread.sleep(t[ms])  kann der Thread schlafen gelegt werden  Thread.yield()  gibt Thread frei, aber wird gleich wieder  ready . Provoziert Thread-Wechsel  Sollte man nicht verwenden, weil OS das Scheduling selbst verwaltet    t.join()  wartet solange, bis der Thread  t  terminiert   Thread   myThread   =   new   Thread (()   -   { \n     // thread behavior  });  myThread . start ();  // Thread started  myThread . join ();  // Thread finished    Threads k\u00f6nnen von Aussen unterbrochen werden mit  t.interrupt()  L\u00f6st  InterruptedException  aus  Wird meist missbraucht zum Aufbrechen von Blockaden (schlecht!)", 
            "title": "Grundlagen Java Threads"
        }, 
        {
            "location": "/ParProg/3_Thread-Synchronisation/", 
            "text": "Thread Synchronisation\n\n\n\n\nNote\n\n\nThread.currentThread().join()\n \n\n\nProgramm wartet ewig, weil es auf die Beendigung von sich selbst wartet\n\n\n\n\n\n\nSynchronisation = Einschr\u00e4nkung der Nebenl\u00e4ufigkeit\n\n\nF\u00e4lle f\u00fcr Synchronisation\n\n\nGegenseitiger Ausschluss: Eine Ressource kann nur von jemandem auf einmal benutzt werden\n\n\nWarten auf Bedingung\n\n\n\n\n\n\n\n\nGemeinsame Ressourcen\n\n\n\n\nThreads k\u00f6nnen sich gegenseitig st\u00f6ren, weil sie sich Adressraum und Heap teilen\n\n\nIn Java k\u00f6nnen lokale Variablen (closure) von Threads nur read-only zugegriffen werden\n\n\n\n\nKritische Abschnitte\n\n\n\n\nRace Condition: Fehler aufgrund von unkontrollierter Nebenl\u00e4ufigkeit\n\n\nRace Condition Szenario\n\n\nBeide Threads lesen die aktuelle Balance nacheinander in ein Register\n\n\nDer zweite Thread, der die Balance zur\u00fcck schreibt, \u00fcberschreibt den anderen Wert\n\n\n-\n Lost Update\n\n\n\n\n\n\nEin Programmst\u00fcck, dass eine Race Condition verursachen k\u00f6nnte, ist eine \"Critical Section\"\n\n\nNaiver Ansatz: \"Locked\"-Boolean einf\u00fchren und evtl. warten, bis \nlocked == false\n ist\n\n\nProblem: Pr\u00fcfung des boolean und Zuweisung nicht atomar -\n Gleiches Problem wie vorher\n\n\n\n\n\n\n\n\nGegenseitiger Ausschluss\n\n\n\n\nEigene Implementierung nicht trivial (gibt spezielle Algorithmen)\n\n\nWeitere Probleme mit CPU-Optimierungen, Reihenfolge der Instruktionen ist nicht garantiert\n\n\nBusy-Waiting (Endlosschleife) ist ineffizient\n\n\n\n\nJava Monitor Konzept\n\n\npublic\n \nsynchronized\n \nvoid\n \ndeposit\n(\nint\n \namount\n)\n \n{\n\n    \nthis\n.\nbalance\n \n+=\n \namount\n;\n \n// Kritischer Abschnitt\n\n\n}\n\n\n\n\n\n\n\n\nBody der Funktion wird unter gegenseitigem Ausschluss ausgef\u00fchrt\n\n\nNur ein Thread auf einmal kann die Methode ausf\u00fchren\n\n\nBei jedem Eintritt wird das Objekt gelockt (Monitor-Lock)\n\n\n\n\nGilt f\u00fcr das ganze Objekt, auch andere synchronized-Methoden schliessen sich gegenseitig aus\n\n\n\n\n\n\nFreigabe des Locks bei Ende, return oder unhandled Exception\n\n\n\n\n\n\nRecursive Locks: \nsynchronized\n Method ruft andere \nsynchronized\n Method auf (nested Lock)\n\n\n\n\nIst in Java kein Problem, in anderen Sprachen u.U. schon\n\n\n\n\n\n\n\n\nSynchronized Statements\n\n\n\n\nsynchronized(object) { statements }\n\n\nobject\n bezieht sich auf das Objekt, das gelockt wird\n\n\nBei \nsynchronized\n mit Static-Klassen wird \nclass\n.class\n mitgegeben, dann wird die Klasse gelockt (Singleton)\n\n\n\n\nWarten auf Bedingung\n\n\n\n\nNaiver Ansatz: in Schleife warten, bis Bedingung erf\u00fcllt\n\n\nFunktioniert nicht: Lock wird nicht aufgel\u00f6st, es kann niemand anders das Objekt bearbeiten\n\n\nIneffizent, immer zu pollen\n\n\n\n\n\n\n\n\nWait \n Signal\n\n\n\n\nMonitor: Gegenseitiger Ausschluss + Wait \n Signal Mechanismus\n\n\nNur ein Thread kann \"im Monitor\" sein\n\n\nSpezieller Wartebereich f\u00fcr Threads, die auf eine Bedingung warten\n\n\nSie werden signalisiert, sobald die Bedingung erf\u00fcllt ist\n\n\n\n\nclass\n \nBankAccount\n \n{\n\n    \nprivate\n \nint\n \nbalance\n \n=\n \n0\n;\n\n    \npublic\n \nsynchronized\n \nvoid\n \nwithdraw\n(\nint\n \namount\n)\n\n        \nthrows\n \nInterruptedException\n \n{\n\n        \nwhile\n \n(\namount\n \n \nbalance\n)\n \n{\n\n            \nwait\n();\n\n        \n}\n\n        \nbalance\n \n-=\n \namount\n;\n\n        \n}\n\n    \npublic\n \nsynchronized\n \nvoid\n \ndeposit\n(\nint\n \namount\n)\n \n{\n\n        \nbalance\n \n+=\n \namount\n;\n\n        \nnotifyAll\n();\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\n\nwait()\n setzt den Thread in die Warteschlange zum Warten auf eine Bedingung\n\n\nnotifyAll()\n weckt alle im Monitor wartenden Thread auf\n\n\nBeh\u00e4lt aber den Monitor-Lock f\u00fcr weitere Instruktionen (\"Single and Continue\")\n\n\n\n\n\n\nEin aufgeweckter Thread geht wieder in den \"\u00e4usseren\" Warteraum, genau wie alle anderen eintrittswilligen Threads\n\n\n\n\n\n\n\n\nWieso funktioniert das?\n\n\nwait()\n setzt sich in den \"Warteraum\" und gibt den Monitor (den Lock auf das Objekt) frei\n\n\n\n\n\n\nnotify()\n weckt einen \nbeliebigen\n Thread im \"Warteraum\" auf\n\n\nDie Reihenfolge im \"Warteraum\" ist in Java nicht spezifiziert (in .NET FIFO)\n\n\nSpurious Wakeup: Ein wartender Thread kann \"f\u00e4lschlicherweise\" aufgeweckt werden, ohne dass \nnotify\n aufgerufen wurde\n\n\nProblem von POSIX-Threads\n\n\n\n\n\n\n\n\n\n\nFallstricke beim Java Monitor\n\n\nWait mit If\n\n\n\n\nNach dem \nwait()\n muss die Bedingung wieder \u00fcberpr\u00fcft werden\n\n\nIn der Zwischenzeit k\u00f6nnte nach dem \nnotify()\n und vor dem Eintreten die Bedingung wieder invalidiert werden\n\n\nDaher: \nwhile (!conditioin) { wait(); }\n\n\n\n\n\n\n\n\nSingle-Notify\n\n\n\n\nnotify()\n weckt ein beliebiger einzelner Thread auf\n\n\nWenn immer ein falscher Thread aufgeweckt wird, terminiert das Programm nie\n\n\nL\u00f6sung: \nnotifyAll()\n verwenden\n\n\n\n\nEffizenz-Probleme\n\n\n\n\nnotifyAll()\n weckt alle auf, bei vielen Threads ist das viel Overhead f\u00fcr die \u00dcberpr\u00fcfung der Bedingung\n\n\nKeine Fairness: Keine Warteschlange spezifiziert\n\n\nSignal-and-Continue: Informierte muss neu anstehen und k\u00f6nnen st\u00e4ndig \u00fcberholt werden\n\n\nAuch bei FIFO (.NET) nicht garantiert fair", 
            "title": "3 Thread Synchronisation"
        }, 
        {
            "location": "/ParProg/3_Thread-Synchronisation/#thread-synchronisation", 
            "text": "Note  Thread.currentThread().join()    Programm wartet ewig, weil es auf die Beendigung von sich selbst wartet    Synchronisation = Einschr\u00e4nkung der Nebenl\u00e4ufigkeit  F\u00e4lle f\u00fcr Synchronisation  Gegenseitiger Ausschluss: Eine Ressource kann nur von jemandem auf einmal benutzt werden  Warten auf Bedingung", 
            "title": "Thread Synchronisation"
        }, 
        {
            "location": "/ParProg/3_Thread-Synchronisation/#gemeinsame-ressourcen", 
            "text": "Threads k\u00f6nnen sich gegenseitig st\u00f6ren, weil sie sich Adressraum und Heap teilen  In Java k\u00f6nnen lokale Variablen (closure) von Threads nur read-only zugegriffen werden", 
            "title": "Gemeinsame Ressourcen"
        }, 
        {
            "location": "/ParProg/3_Thread-Synchronisation/#kritische-abschnitte", 
            "text": "Race Condition: Fehler aufgrund von unkontrollierter Nebenl\u00e4ufigkeit  Race Condition Szenario  Beide Threads lesen die aktuelle Balance nacheinander in ein Register  Der zweite Thread, der die Balance zur\u00fcck schreibt, \u00fcberschreibt den anderen Wert  -  Lost Update    Ein Programmst\u00fcck, dass eine Race Condition verursachen k\u00f6nnte, ist eine \"Critical Section\"  Naiver Ansatz: \"Locked\"-Boolean einf\u00fchren und evtl. warten, bis  locked == false  ist  Problem: Pr\u00fcfung des boolean und Zuweisung nicht atomar -  Gleiches Problem wie vorher", 
            "title": "Kritische Abschnitte"
        }, 
        {
            "location": "/ParProg/3_Thread-Synchronisation/#gegenseitiger-ausschluss", 
            "text": "Eigene Implementierung nicht trivial (gibt spezielle Algorithmen)  Weitere Probleme mit CPU-Optimierungen, Reihenfolge der Instruktionen ist nicht garantiert  Busy-Waiting (Endlosschleife) ist ineffizient", 
            "title": "Gegenseitiger Ausschluss"
        }, 
        {
            "location": "/ParProg/3_Thread-Synchronisation/#java-monitor-konzept", 
            "text": "public   synchronized   void   deposit ( int   amount )   { \n     this . balance   +=   amount ;   // Kritischer Abschnitt  }    Body der Funktion wird unter gegenseitigem Ausschluss ausgef\u00fchrt  Nur ein Thread auf einmal kann die Methode ausf\u00fchren  Bei jedem Eintritt wird das Objekt gelockt (Monitor-Lock)   Gilt f\u00fcr das ganze Objekt, auch andere synchronized-Methoden schliessen sich gegenseitig aus    Freigabe des Locks bei Ende, return oder unhandled Exception    Recursive Locks:  synchronized  Method ruft andere  synchronized  Method auf (nested Lock)   Ist in Java kein Problem, in anderen Sprachen u.U. schon", 
            "title": "Java Monitor Konzept"
        }, 
        {
            "location": "/ParProg/3_Thread-Synchronisation/#synchronized-statements", 
            "text": "synchronized(object) { statements }  object  bezieht sich auf das Objekt, das gelockt wird  Bei  synchronized  mit Static-Klassen wird  class .class  mitgegeben, dann wird die Klasse gelockt (Singleton)", 
            "title": "Synchronized Statements"
        }, 
        {
            "location": "/ParProg/3_Thread-Synchronisation/#warten-auf-bedingung", 
            "text": "Naiver Ansatz: in Schleife warten, bis Bedingung erf\u00fcllt  Funktioniert nicht: Lock wird nicht aufgel\u00f6st, es kann niemand anders das Objekt bearbeiten  Ineffizent, immer zu pollen", 
            "title": "Warten auf Bedingung"
        }, 
        {
            "location": "/ParProg/3_Thread-Synchronisation/#wait-signal", 
            "text": "Monitor: Gegenseitiger Ausschluss + Wait   Signal Mechanismus  Nur ein Thread kann \"im Monitor\" sein  Spezieller Wartebereich f\u00fcr Threads, die auf eine Bedingung warten  Sie werden signalisiert, sobald die Bedingung erf\u00fcllt ist   class   BankAccount   { \n     private   int   balance   =   0 ; \n     public   synchronized   void   withdraw ( int   amount ) \n         throws   InterruptedException   { \n         while   ( amount     balance )   { \n             wait (); \n         } \n         balance   -=   amount ; \n         } \n     public   synchronized   void   deposit ( int   amount )   { \n         balance   +=   amount ; \n         notifyAll (); \n     }  }    wait()  setzt den Thread in die Warteschlange zum Warten auf eine Bedingung  notifyAll()  weckt alle im Monitor wartenden Thread auf  Beh\u00e4lt aber den Monitor-Lock f\u00fcr weitere Instruktionen (\"Single and Continue\")    Ein aufgeweckter Thread geht wieder in den \"\u00e4usseren\" Warteraum, genau wie alle anderen eintrittswilligen Threads     Wieso funktioniert das?  wait()  setzt sich in den \"Warteraum\" und gibt den Monitor (den Lock auf das Objekt) frei    notify()  weckt einen  beliebigen  Thread im \"Warteraum\" auf  Die Reihenfolge im \"Warteraum\" ist in Java nicht spezifiziert (in .NET FIFO)  Spurious Wakeup: Ein wartender Thread kann \"f\u00e4lschlicherweise\" aufgeweckt werden, ohne dass  notify  aufgerufen wurde  Problem von POSIX-Threads", 
            "title": "Wait &amp; Signal"
        }, 
        {
            "location": "/ParProg/3_Thread-Synchronisation/#fallstricke-beim-java-monitor", 
            "text": "", 
            "title": "Fallstricke beim Java Monitor"
        }, 
        {
            "location": "/ParProg/3_Thread-Synchronisation/#wait-mit-if", 
            "text": "Nach dem  wait()  muss die Bedingung wieder \u00fcberpr\u00fcft werden  In der Zwischenzeit k\u00f6nnte nach dem  notify()  und vor dem Eintreten die Bedingung wieder invalidiert werden  Daher:  while (!conditioin) { wait(); }", 
            "title": "Wait mit If"
        }, 
        {
            "location": "/ParProg/3_Thread-Synchronisation/#single-notify", 
            "text": "notify()  weckt ein beliebiger einzelner Thread auf  Wenn immer ein falscher Thread aufgeweckt wird, terminiert das Programm nie  L\u00f6sung:  notifyAll()  verwenden", 
            "title": "Single-Notify"
        }, 
        {
            "location": "/ParProg/3_Thread-Synchronisation/#effizenz-probleme", 
            "text": "notifyAll()  weckt alle auf, bei vielen Threads ist das viel Overhead f\u00fcr die \u00dcberpr\u00fcfung der Bedingung  Keine Fairness: Keine Warteschlange spezifiziert  Signal-and-Continue: Informierte muss neu anstehen und k\u00f6nnen st\u00e4ndig \u00fcberholt werden  Auch bei FIFO (.NET) nicht garantiert fair", 
            "title": "Effizenz-Probleme"
        }, 
        {
            "location": "/PhAI/0_Index/", 
            "text": "Physik Anwendungen f\u00fcr Informatik\n\n\n\n\nExam Notes", 
            "title": "0 Index"
        }, 
        {
            "location": "/PhAI/0_Index/#physik-anwendungen-fur-informatik", 
            "text": "Exam Notes", 
            "title": "Physik Anwendungen f\u00fcr Informatik"
        }, 
        {
            "location": "/PhAI/1_Exam/", 
            "text": "Some exam notes...", 
            "title": "1 Exam"
        }, 
        {
            "location": "/SE2/0_Index/", 
            "text": "Software Engineering 2\n\n\n\n\nExam Notes", 
            "title": "0 Index"
        }, 
        {
            "location": "/SE2/0_Index/#software-engineering-2", 
            "text": "Exam Notes", 
            "title": "Software Engineering 2"
        }, 
        {
            "location": "/SE2/1_Exam/", 
            "text": "Some exam notes...", 
            "title": "1 Exam"
        }, 
        {
            "location": "/Vss/0_Index/", 
            "text": "Verteilte Software-Systeme\n\n\n\n\nExam Notes\n\n\nIntroduction", 
            "title": "0 Index"
        }, 
        {
            "location": "/Vss/0_Index/#verteilte-software-systeme", 
            "text": "Exam Notes  Introduction", 
            "title": "Verteilte Software-Systeme"
        }, 
        {
            "location": "/Vss/1_Exam/", 
            "text": "Exam\n\n\nHilfsmittel\n\n\n\n\n2 A4-Seiten Zusammenfassung", 
            "title": "1 Exam"
        }, 
        {
            "location": "/Vss/1_Exam/#exam", 
            "text": "", 
            "title": "Exam"
        }, 
        {
            "location": "/Vss/1_Exam/#hilfsmittel", 
            "text": "2 A4-Seiten Zusammenfassung", 
            "title": "Hilfsmittel"
        }, 
        {
            "location": "/Vss/2_Introduction/", 
            "text": "Introduction\n\n\n\n\nTransparency Types: Eigenschaften eines Systems transparent (= \"durchsichtig\") f\u00fcr den Benutzer machen, damit er nicht mitbekommt, dass z.B. mehrere Benutzer gleichzeitig zugreifen (Concurrency Transparency)\n\n\nVorteile von VSS\n\n\nBilden die verteilte Realit\u00e4t ab (verschiedene Arbeitspl\u00e4tze etc.)\n\n\nPerformancesteigerung (paralelle Verarbeitung)\n\n\nSkalierbarkeit\n\n\nFehlertoleranz\n\n\n\n\n\n\nHerausforderungen VSS\n\n\nKomplexe Kommunikation\n\n\nPerformanceprobleme (Latenz, Durchsatz)\n\n\nZuverl\u00e4ssigkeit (Netzzugriffe, Ausf\u00e4lle)\n\n\nTransaktionssicherheit (mehrere Benutzer)\n\n\n\n\n\n\n\n\nMiddleware\n\n\nMidleware\n ist infrastrukturelle Software, die eine Ebene unter dem Software-System liegt\n\n\n\n\nWird i.d.R. nicht selbst geschrieben\n\n\nDient zur Kommunikation zwischen den Software-Komponenten\n\n\n\n\nKommunikationsmiddleware\n\n\n\n\nInterfaces zur Netzwerkprogrammierung\n\n\nTCP/IP Sockets, RESTful HTTP, etc.\n\n\n\n\nAnwedungsorientierte Middleware\n\n\n\n\nUnterst\u00fctzung verteiler Andwendungen\n\n\nVereinfacht das Design der Applikation\n\n\nbietet Sicherheit, Zuverl\u00e4ssigkeit, verteilte Transaktionen, ...\n\n\nz.B. .NET Application Server, SQL mit Remote Queries, ...\n\n\n\n\n\n\nVSS Architectural Styles\n\n\n\n\n\n\n\n\nHub and Spoke\n: Alle kommunizieren \u00fcber zentrale Stelle (\"Hub\")\n\n\n\n\n\n\nCORBA (Centralized Object Request Broker Architecture) wird heute nicht mehr verwendet, die Prinzipien sind aber immer noch releveant\n\n\n\n\n\n\nIdempotenz\n\n\n\n\nIdempotente Funktion: z.B. zwei Zahlen addieren, Funktion macht bei jedem gleichen Aufruf das selbe\n\n\nNicht-idempotente Funktion: Es wird ein Zustand ver\u00e4ndert, bei zweitem gleichen Aufruf ist das Verhalten anders. z.B. Lagerstand \u00e4ndern, Konto-\u00dcbertrag\n\n\nServer idempotent machen: Designfrage, z.B. jede Nachricht mit eindeutiger ID versehen, Server darf diese ID nur einmal bearbeiten", 
            "title": "2 Introduction"
        }, 
        {
            "location": "/Vss/2_Introduction/#introduction", 
            "text": "Transparency Types: Eigenschaften eines Systems transparent (= \"durchsichtig\") f\u00fcr den Benutzer machen, damit er nicht mitbekommt, dass z.B. mehrere Benutzer gleichzeitig zugreifen (Concurrency Transparency)  Vorteile von VSS  Bilden die verteilte Realit\u00e4t ab (verschiedene Arbeitspl\u00e4tze etc.)  Performancesteigerung (paralelle Verarbeitung)  Skalierbarkeit  Fehlertoleranz    Herausforderungen VSS  Komplexe Kommunikation  Performanceprobleme (Latenz, Durchsatz)  Zuverl\u00e4ssigkeit (Netzzugriffe, Ausf\u00e4lle)  Transaktionssicherheit (mehrere Benutzer)", 
            "title": "Introduction"
        }, 
        {
            "location": "/Vss/2_Introduction/#middleware", 
            "text": "Midleware  ist infrastrukturelle Software, die eine Ebene unter dem Software-System liegt   Wird i.d.R. nicht selbst geschrieben  Dient zur Kommunikation zwischen den Software-Komponenten", 
            "title": "Middleware"
        }, 
        {
            "location": "/Vss/2_Introduction/#kommunikationsmiddleware", 
            "text": "Interfaces zur Netzwerkprogrammierung  TCP/IP Sockets, RESTful HTTP, etc.", 
            "title": "Kommunikationsmiddleware"
        }, 
        {
            "location": "/Vss/2_Introduction/#anwedungsorientierte-middleware", 
            "text": "Unterst\u00fctzung verteiler Andwendungen  Vereinfacht das Design der Applikation  bietet Sicherheit, Zuverl\u00e4ssigkeit, verteilte Transaktionen, ...  z.B. .NET Application Server, SQL mit Remote Queries, ...", 
            "title": "Anwedungsorientierte Middleware"
        }, 
        {
            "location": "/Vss/2_Introduction/#vss-architectural-styles", 
            "text": "Hub and Spoke : Alle kommunizieren \u00fcber zentrale Stelle (\"Hub\")    CORBA (Centralized Object Request Broker Architecture) wird heute nicht mehr verwendet, die Prinzipien sind aber immer noch releveant", 
            "title": "VSS Architectural Styles"
        }, 
        {
            "location": "/Vss/2_Introduction/#idempotenz", 
            "text": "Idempotente Funktion: z.B. zwei Zahlen addieren, Funktion macht bei jedem gleichen Aufruf das selbe  Nicht-idempotente Funktion: Es wird ein Zustand ver\u00e4ndert, bei zweitem gleichen Aufruf ist das Verhalten anders. z.B. Lagerstand \u00e4ndern, Konto-\u00dcbertrag  Server idempotent machen: Designfrage, z.B. jede Nachricht mit eindeutiger ID versehen, Server darf diese ID nur einmal bearbeiten", 
            "title": "Idempotenz"
        }, 
        {
            "location": "/Vss/3_socket_programmierung/", 
            "text": "Socket Programmierung\n\n\n\n\nMessage-Oriented Middleware (z.B. HTTP GET / POST)\n\n\nClient wartet meist asynchron auf die Antwort\n\n\n\n\n\n\nRemote Procedure Call\n\n\nz.B. JAVA RMI\n\n\nHeute Web-Services (RESTful HTTP)\n\n\nClient wartet auf die Antwort\n\n\n\n\n\n\nFallacies of Distributed Systems\n\n\nFowler's First Law\n of Distributed Object Design\n\n\nVerteilte eigene Objekte sind starke Kopplung!\n\n\nM\u00fcssen meist in gleicher Sprache sein\n\n\n\n\n\n\n\n\nSockets\n\n\n\n\nMiddleware, um \u00fcber TCP / UDP zu kommunizieren\n\n\nZwei Prozesse schreiben und lesen auf den Socket, als ob es ein File w\u00e4re\n\n\nIdentifiziert durch Tupel IP-Adresse und Port\n\n\nZuerst muss Session aufgebaut werden\n\n\nEnge Kopplung zwischen Client und Server\n\n\nIn TCP/IP-Model auf Application-Layer, in OSI-Modell auf Session-Layer\n\n\nNachteile\n\n\nReiner Bytestream - Muss geparsed werden\n\n\nMessage Exchange Patterns muss selbst implementiert werden, z.B. Reihenfolge der Messages\n\n\n\n\n\n\nMeist nicht direkt auf Sockets programmieren, sondern h\u00f6here Abstraktion verwenden\n\n\n\n\nServer\n\n\n\n\nH\u00f6rt auf einen Port (Listener)\n\n\nErstellt f\u00fcr jeden Client einen eigenen Socket\n\n\n\n\nMeist wird f\u00fcr jede Client-Connection (Socket) ein eigener Thread verwendet\n\n\n\n\n\n\nBerkeley Sockets bieten ein standardisiertes Interface\n\n\n\n\n\n\nWebSockets\n\n\n\n\nBei reinem HTTP kann der Server nur Daten senden, wenn der Client eine Anfrage sendet\n\n\nMit Websockets kann der Server Daten auf den Client \"pushen\"\n\n\nBrowser sendet Daten mit \nsend()\n und empf\u00e4ngt Daten in \nonmessage\n Event handler\n\n\nWird von modernen Browsern unterst\u00fctzt\n\n\n\n\nUDP-Sockets\n\n\n\n\nClient muss keine Verbindung vor dem Senden zum Server aufbauen, sondern kann direkt anfangen zu senden\n\n\nServer sendet keine Best\u00e4tigung\n\n\nJava Tutorial\n\n\n\n\nMessaging Patterns\n\n\n\n\nBasic Pattern\n: Analog zu einem Brief, der von einem Message Endpoint zum anderen gesendet wird\n\n\nBlocking Receiver Message Pattern\n: Synchrone \u00dcbertragung, Server und Client warten auf die Antwort\n\n\nPolling Receiver Message Pattern\n: Der Receiver macht Anfragen zum Empfangen der Nachricht (Polling)\n\n\nService Activator Message Pattern\n: Auf einen Request ruft der \"Replier\" mit dem \"Service Activator\" die richtige Service-Funktion auf (RPC-style)", 
            "title": "3 socket programmierung"
        }, 
        {
            "location": "/Vss/3_socket_programmierung/#socket-programmierung", 
            "text": "Message-Oriented Middleware (z.B. HTTP GET / POST)  Client wartet meist asynchron auf die Antwort    Remote Procedure Call  z.B. JAVA RMI  Heute Web-Services (RESTful HTTP)  Client wartet auf die Antwort    Fallacies of Distributed Systems  Fowler's First Law  of Distributed Object Design  Verteilte eigene Objekte sind starke Kopplung!  M\u00fcssen meist in gleicher Sprache sein", 
            "title": "Socket Programmierung"
        }, 
        {
            "location": "/Vss/3_socket_programmierung/#sockets", 
            "text": "Middleware, um \u00fcber TCP / UDP zu kommunizieren  Zwei Prozesse schreiben und lesen auf den Socket, als ob es ein File w\u00e4re  Identifiziert durch Tupel IP-Adresse und Port  Zuerst muss Session aufgebaut werden  Enge Kopplung zwischen Client und Server  In TCP/IP-Model auf Application-Layer, in OSI-Modell auf Session-Layer  Nachteile  Reiner Bytestream - Muss geparsed werden  Message Exchange Patterns muss selbst implementiert werden, z.B. Reihenfolge der Messages    Meist nicht direkt auf Sockets programmieren, sondern h\u00f6here Abstraktion verwenden", 
            "title": "Sockets"
        }, 
        {
            "location": "/Vss/3_socket_programmierung/#server", 
            "text": "H\u00f6rt auf einen Port (Listener)  Erstellt f\u00fcr jeden Client einen eigenen Socket   Meist wird f\u00fcr jede Client-Connection (Socket) ein eigener Thread verwendet    Berkeley Sockets bieten ein standardisiertes Interface", 
            "title": "Server"
        }, 
        {
            "location": "/Vss/3_socket_programmierung/#websockets", 
            "text": "Bei reinem HTTP kann der Server nur Daten senden, wenn der Client eine Anfrage sendet  Mit Websockets kann der Server Daten auf den Client \"pushen\"  Browser sendet Daten mit  send()  und empf\u00e4ngt Daten in  onmessage  Event handler  Wird von modernen Browsern unterst\u00fctzt", 
            "title": "WebSockets"
        }, 
        {
            "location": "/Vss/3_socket_programmierung/#udp-sockets", 
            "text": "Client muss keine Verbindung vor dem Senden zum Server aufbauen, sondern kann direkt anfangen zu senden  Server sendet keine Best\u00e4tigung  Java Tutorial", 
            "title": "UDP-Sockets"
        }, 
        {
            "location": "/Vss/3_socket_programmierung/#messaging-patterns", 
            "text": "Basic Pattern : Analog zu einem Brief, der von einem Message Endpoint zum anderen gesendet wird  Blocking Receiver Message Pattern : Synchrone \u00dcbertragung, Server und Client warten auf die Antwort  Polling Receiver Message Pattern : Der Receiver macht Anfragen zum Empfangen der Nachricht (Polling)  Service Activator Message Pattern : Auf einen Request ruft der \"Replier\" mit dem \"Service Activator\" die richtige Service-Funktion auf (RPC-style)", 
            "title": "Messaging Patterns"
        }, 
        {
            "location": "/VwlTg/0_Index/", 
            "text": "Volkswirtschaft und Technikgeschichte\n\n\n\n\nExam Notes", 
            "title": "0 Index"
        }, 
        {
            "location": "/VwlTg/0_Index/#volkswirtschaft-und-technikgeschichte", 
            "text": "Exam Notes", 
            "title": "Volkswirtschaft und Technikgeschichte"
        }, 
        {
            "location": "/VwlTg/1_Exam/", 
            "text": "Some exam notes...", 
            "title": "1 Exam"
        }, 
        {
            "location": "/VwlTg/2_Wohlstand/", 
            "text": "Wohlstand / Makro\u00f6konomisches Gleichgewicht\n\n\n\n\nMikro\u00f6konimie untersucht das Verhalten einzelner M\u00e4rkte und Branchen, Makro\u00f6konomie auf Stufe von mehreren L\u00e4ndern\n\n\n\n\nPreisniveau\n\n\n\n\nPreisniveau: Je h\u00f6her, desto h\u00f6her werden die Preise\n\n\nWird mit einem standardisierten G\u00fctekorb gemessen\n\n\nVerschiedene G\u00fctekorbe, z.B. f\u00fcr Konsumenten oder Produzenten\n\n\n\n\n\n\nProduzentenpreisindex in den letzten Jahren stark gesunken\n\n\nStarker Franken (zuerst 1.20, jetzt ca. 1.08)\n\n\nRohstoffe sind g\u00fcnstiger geworden (geringere Nachfrage)\n\n\n\n\n\n\nDagegen ist konsumentenindex nur leicht gesunken\n\n\nKonsumenteng\u00fcterkorb ist auf Luxuskonsum ausgerichtet\n\n\nWenig f\u00fcr Bildung, viel f\u00fcr Restaurant / Hotels\n\n\n\n\n\n\nF\u00fcr SNB ist sinkende Konsumentenindex gef\u00e4hrlich\n\n\nKonsumenten sparen mehr -\n Deflation\n\n\nProblem in Japan seit 20 Jahren (stark verschuldet)\n\n\n\n\n\n\nFolie 11: Schweizer Volk kann Inflation sehr gut einsch\u00e4tzen\n\n\n\n\nReales BIP\n\n\n\n\nBIP: Alle G\u00fcter und Dienstleistungen, die in einem Jahr in einem Land hergestellt werden\n\n\nReales BIP: Nominales BIP - Inflation\n\n\nheisst: Alles zu festgelegten Standardpreisen\n\n\n\n\n\n\nHier immer das reale BIP gemeint!\n\n\n2009 Finanzkriese: Platzen der Immobilienblase in den USA + Eurokrise (unabh\u00e4ngig)\n\n\n2015: BIP pro Kopf gesunken, weil starker Zuwanderung von Arbeitskr\u00e4ften\n\n\nEinwanderer gehen in Branchen, die weniger Wertsch\u00f6pfung haben, z.B. Gesundheitsbereich, Pflege, etc.\n\n\n\n\n\n\n\n\nAN-Kurve (Aggregierte Nachfrage)\n\n\n\n\nNachfrage nach G\u00fctern von Konsumenten, Unternehmen, Staat, Import/Export\n\n\nUSA hat negative Nettoexperte (mehr Importe als Exporte)\n\n\nJe tiefer das Preisniveau, desto h\u00f6her die Nachfrage\n\n\n\n\nAAL-Konstante (langfristig aggregiertes Angebot)\n\n\n\n\nDer Punkt, an dem ein Land mit allen verf\u00fcgbaren Ressourcen produzieren\n\n\nheisst: Jeder arbeitet, alle Maschinen laufen, etc.\n\n\n\"Optimale Produktionsmenge\"\n\n\nIst bei uns konstante Gr\u00f6sse\n\n\n\n\nAAk-Kurve (kurzfristig aggregiertes Angebot)\n\n\n\n\nJe h\u00f6her die Preise, desto mehr wollen die Produzenten herstellen\n\n\nKann theoretisch \u00fcber Kapazit\u00e4tsgrenze, dann arbeiten Menschen \u00fcberstunden\n\n\n\"\u00fcberhitzte\" Wirtschaft\n\n\nF\u00fchrt zu explodierenden Preisen\n\n\n\n\n\n\n\n\nProduktion links der Kapazit\u00e4tsgrenze -\n Rezession\n\n\n\n\n\n\nIdealerweise kreuzen sich AN und AAK genau auf Kapazit\u00e4tsgrenze\n\n\n\n\nOptimale Auslastung und genau soviel, wie die Nachfrage verlangt\n\n\nIn der Schweiz ist der Punkt eher rechts der Grenze, weil z.T. viele Arbeitskr\u00e4fte fehlen\n\n\nAndere Darstellung: Angebot eines Landes ist gleich der Nachfrage\n\n\n\n\nReales BIP in der Schweiz\n\n\n\n\nIn Produktionswert sind die Werte mehrmals verrechnet, wenn z.B. ein F\u00f6rster sein Holz verkauft und die S\u00e4gerei das Holz dem Schreiner, ist das Holz zwei Mal verrechnet\n\n\nVorleistungen rechnen dies raus - etwa die H\u00e4lfte in der Schweiz\n\n\nRund 2/3 des BIP geht an Arbeitnehmer, 1/6 an Arbeitgeber\n\n\nIn der Schweiz ist dieser Wert ziemlich konstant, im Gegensatz z.B. zu USA und Schweden\n\n\nGrund: GAVs, Arbeitsfrieden, (direkte Demokratie)\n\n\n\n\n\n\nExporte in der Schweiz in den letzten Jahren gesunken, aber auch Importe sind gefallen -\n BIP bleibt gleich\n\n\nGold- Import und Export ist gleich gross (70 Mia.)\n\n\nSchweiz ist Handelsplatz f\u00fcr Gold\n\n\n\n\n\n\nKaufkraftbereinigung: BIP bereinigt nach Kaufkraft, d.h. was kann man mit dem BIP kaufen?\n\n\n1975 war die Schweiz das reichste Land der Welt, danach weniger Wachstum\n\n\nAbschottung, Binnenmarkt geschlossen\n\n\nPreis von direkter Demokratie, F\u00f6deralismus, ...\n\n\n\n\n\n\nStarke Korrelation zwischen BIP pro Kopf und sozialem Fortschritt\n\n\nHoher Wohlstand ist wichtig bis zu einem gewissen Grad (dann immer weniger Fortschritt)", 
            "title": "2 Wohlstand"
        }, 
        {
            "location": "/VwlTg/2_Wohlstand/#wohlstand-makrookonomisches-gleichgewicht", 
            "text": "Mikro\u00f6konimie untersucht das Verhalten einzelner M\u00e4rkte und Branchen, Makro\u00f6konomie auf Stufe von mehreren L\u00e4ndern", 
            "title": "Wohlstand / Makro\u00f6konomisches Gleichgewicht"
        }, 
        {
            "location": "/VwlTg/2_Wohlstand/#preisniveau", 
            "text": "Preisniveau: Je h\u00f6her, desto h\u00f6her werden die Preise  Wird mit einem standardisierten G\u00fctekorb gemessen  Verschiedene G\u00fctekorbe, z.B. f\u00fcr Konsumenten oder Produzenten    Produzentenpreisindex in den letzten Jahren stark gesunken  Starker Franken (zuerst 1.20, jetzt ca. 1.08)  Rohstoffe sind g\u00fcnstiger geworden (geringere Nachfrage)    Dagegen ist konsumentenindex nur leicht gesunken  Konsumenteng\u00fcterkorb ist auf Luxuskonsum ausgerichtet  Wenig f\u00fcr Bildung, viel f\u00fcr Restaurant / Hotels    F\u00fcr SNB ist sinkende Konsumentenindex gef\u00e4hrlich  Konsumenten sparen mehr -  Deflation  Problem in Japan seit 20 Jahren (stark verschuldet)    Folie 11: Schweizer Volk kann Inflation sehr gut einsch\u00e4tzen", 
            "title": "Preisniveau"
        }, 
        {
            "location": "/VwlTg/2_Wohlstand/#reales-bip", 
            "text": "BIP: Alle G\u00fcter und Dienstleistungen, die in einem Jahr in einem Land hergestellt werden  Reales BIP: Nominales BIP - Inflation  heisst: Alles zu festgelegten Standardpreisen    Hier immer das reale BIP gemeint!  2009 Finanzkriese: Platzen der Immobilienblase in den USA + Eurokrise (unabh\u00e4ngig)  2015: BIP pro Kopf gesunken, weil starker Zuwanderung von Arbeitskr\u00e4ften  Einwanderer gehen in Branchen, die weniger Wertsch\u00f6pfung haben, z.B. Gesundheitsbereich, Pflege, etc.", 
            "title": "Reales BIP"
        }, 
        {
            "location": "/VwlTg/2_Wohlstand/#an-kurve-aggregierte-nachfrage", 
            "text": "Nachfrage nach G\u00fctern von Konsumenten, Unternehmen, Staat, Import/Export  USA hat negative Nettoexperte (mehr Importe als Exporte)  Je tiefer das Preisniveau, desto h\u00f6her die Nachfrage", 
            "title": "AN-Kurve (Aggregierte Nachfrage)"
        }, 
        {
            "location": "/VwlTg/2_Wohlstand/#aal-konstante-langfristig-aggregiertes-angebot", 
            "text": "Der Punkt, an dem ein Land mit allen verf\u00fcgbaren Ressourcen produzieren  heisst: Jeder arbeitet, alle Maschinen laufen, etc.  \"Optimale Produktionsmenge\"  Ist bei uns konstante Gr\u00f6sse", 
            "title": "AAL-Konstante (langfristig aggregiertes Angebot)"
        }, 
        {
            "location": "/VwlTg/2_Wohlstand/#aak-kurve-kurzfristig-aggregiertes-angebot", 
            "text": "Je h\u00f6her die Preise, desto mehr wollen die Produzenten herstellen  Kann theoretisch \u00fcber Kapazit\u00e4tsgrenze, dann arbeiten Menschen \u00fcberstunden  \"\u00fcberhitzte\" Wirtschaft  F\u00fchrt zu explodierenden Preisen     Produktion links der Kapazit\u00e4tsgrenze -  Rezession    Idealerweise kreuzen sich AN und AAK genau auf Kapazit\u00e4tsgrenze   Optimale Auslastung und genau soviel, wie die Nachfrage verlangt  In der Schweiz ist der Punkt eher rechts der Grenze, weil z.T. viele Arbeitskr\u00e4fte fehlen  Andere Darstellung: Angebot eines Landes ist gleich der Nachfrage", 
            "title": "AAk-Kurve (kurzfristig aggregiertes Angebot)"
        }, 
        {
            "location": "/VwlTg/2_Wohlstand/#reales-bip-in-der-schweiz", 
            "text": "In Produktionswert sind die Werte mehrmals verrechnet, wenn z.B. ein F\u00f6rster sein Holz verkauft und die S\u00e4gerei das Holz dem Schreiner, ist das Holz zwei Mal verrechnet  Vorleistungen rechnen dies raus - etwa die H\u00e4lfte in der Schweiz  Rund 2/3 des BIP geht an Arbeitnehmer, 1/6 an Arbeitgeber  In der Schweiz ist dieser Wert ziemlich konstant, im Gegensatz z.B. zu USA und Schweden  Grund: GAVs, Arbeitsfrieden, (direkte Demokratie)    Exporte in der Schweiz in den letzten Jahren gesunken, aber auch Importe sind gefallen -  BIP bleibt gleich  Gold- Import und Export ist gleich gross (70 Mia.)  Schweiz ist Handelsplatz f\u00fcr Gold    Kaufkraftbereinigung: BIP bereinigt nach Kaufkraft, d.h. was kann man mit dem BIP kaufen?  1975 war die Schweiz das reichste Land der Welt, danach weniger Wachstum  Abschottung, Binnenmarkt geschlossen  Preis von direkter Demokratie, F\u00f6deralismus, ...    Starke Korrelation zwischen BIP pro Kopf und sozialem Fortschritt  Hoher Wohlstand ist wichtig bis zu einem gewissen Grad (dann immer weniger Fortschritt)", 
            "title": "Reales BIP in der Schweiz"
        }
    ]
}